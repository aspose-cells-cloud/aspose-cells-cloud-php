<?php
/**
 * CellsPicturesApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Aspose\Cells\Cloud;

require_once('vendor\autoload.php');
require_once('test\Api\CellsApiTestBase.php');
use \Aspose\Cells\Cloud\Configuration;
use \Aspose\Cells\Cloud\ApiException;
use \Aspose\Cells\Cloud\ObjectSerializer;
use \Aspose\Cells\Cloud\CellsApiTestBase;
use \Aspose\Cells\Cloud\Api\CellsApi;
use \Aspose\Cells\Cloud\Model\Picture;

/**
 * CellsPicturesApiTest Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsPicturesApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        $this->instance = CellsApiTestBase::getInstance();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for cellsPicturesDeleteWorkSheetPictures
     *
     * Delete all pictures in worksheet..
     *
     */
    public function testCellsPicturesDeleteWorkSheetPictures()
    {
        $name ='Book1.xlsx';
        $sheet_name ='Sheet6';
        $index = 0;         
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPicturesDeleteWorkSheetPictures($name, $sheet_name,$folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPicturesDeleteWorksheetPicture
     *
     * Delete a picture object in worksheet.
     *
     */
    public function testCellsPicturesDeleteWorksheetPicture()
    {
        $name ='Book1.xlsx';
        $sheet_name ='Sheet6';
        $pictureIndex = 0;         
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPicturesDeleteWorksheetPicture($name, $sheet_name,$pictureIndex,$folder);
        $this->assertEquals(200, $result['code']);
    }


    /**
     * Test case for cellsPicturesGetWorksheetPicture
     *
     * GRead worksheet picture by number..
     *
     */
    public function testCellsPicturesGetWorksheetPicture()
    {
        $name ='Book1.xlsx';
        $sheet_name ='Sheet6';
        $pictureIndex = 0;         
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPicturesGetWorksheetPicture($name, $sheet_name,$pictureIndex,null,$folder);
        $json = json_decode($result);
        $this->assertEquals(200, $json->Code);
    }
    
    /**
     * Test case for cellsPicturesGetWorksheetPicture format
     *
     * GRead worksheet picture by number..
     *
     */
    public function testCellsPicturesGetWorksheetPictureFormat()
    {
        $name ='Book1.xlsx';
        $sheet_name ='Sheet6';
        $pictureIndex = 0;
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPicturesGetWorksheetPicture($name, $sheet_name,$pictureIndex,"png",$folder);
        $this->assertGreaterThan(0, $result->getSize());
    }

    /**
     * Test case for cellsPicturesGetWorksheetPictures
     *
     * Read worksheet pictures..
     *
     */
    public function testCellsPicturesGetWorksheetPictures()
    {
        $name ='Book1.xlsx';
        $sheet_name ='Sheet6';
        $pictureIndex = 0;         
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPicturesGetWorksheetPictures($name, $sheet_name,$folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPicturesPostWorkSheetPicture
     *
     * Update worksheet picture by index..
     *
     */
    public function testCellsPicturesPostWorkSheetPicture()
    {
        $name ='Book1.xlsx';
        $sheet_name ='Sheet6';
        $pictureIndex = 0;   
        $picture = new Picture ();
        $picture->setLeft(10);      
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPicturesPostWorkSheetPicture($name, $sheet_name, $pictureIndex , $picture,$folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPicturesPutWorksheetAddPicture
     *
     * Add a new worksheet picture..
     *
     */
    public function testCellsPicturesPutWorksheetAddPicture()
    {
        $name ='Book1.xlsx';
        $sheet_name ='Sheet6';       
        $picture = null;
        $upperLeftRow = 1;   
        $upperLeftColumn = 1;   
        $lowerRightRow = 10;   
        $lowerRightColumn = 10;   
        $picturePath = 'WaterMark.png';        
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        CellsApiTestBase::ready(  $this->instance,$picturePath ,"");
        $result = $this->instance->cellsPicturesPutWorksheetAddPicture($name, $sheet_name, $picture,   $upperLeftRow,$upperLeftColumn ,$lowerRightRow,$lowerRightColumn,$picturePath, $folder);
        $this->assertEquals(200, $result['code']);
    }
}
