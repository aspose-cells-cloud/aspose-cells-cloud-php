<?php
/**
 * MHtmlSaveOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/* 
 * <summary>
 *  Copyright (c) 2020 Aspose.Cells Cloud
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all 
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Model;
use \Aspose\Cells\Cloud\ObjectSerializer;

/**
 * MHtmlSaveOptions Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MHtmlSaveOptions extends SaveOptions 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MHtmlSaveOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attached_files_directory' => 'string',
        'attached_files_url_prefix' => 'string',
        'encoding' => 'string',
        'export_active_worksheet_only' => 'bool',
        'export_chart_image_format' => 'string',
        'export_images_as_base64' => 'bool',
        'hidden_col_display_type' => 'string',
        'hidden_row_display_type' => 'string',
        'html_cross_string_type' => 'string',
        'is_exp_image_to_temp_dir' => 'bool',
        'page_title' => 'string',
        'parse_html_tag_in_cell' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attached_files_directory' => null,
        'attached_files_url_prefix' => null,
        'encoding' => null,
        'export_active_worksheet_only' => null,
        'export_chart_image_format' => null,
        'export_images_as_base64' => null,
        'hidden_col_display_type' => null,
        'hidden_row_display_type' => null,
        'html_cross_string_type' => null,
        'is_exp_image_to_temp_dir' => null,
        'page_title' => null,
        'parse_html_tag_in_cell' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attached_files_directory' => 'AttachedFilesDirectory',
        'attached_files_url_prefix' => 'AttachedFilesUrlPrefix',
        'encoding' => 'Encoding',
        'export_active_worksheet_only' => 'ExportActiveWorksheetOnly',
        'export_chart_image_format' => 'ExportChartImageFormat',
        'export_images_as_base64' => 'ExportImagesAsBase64',
        'hidden_col_display_type' => 'HiddenColDisplayType',
        'hidden_row_display_type' => 'HiddenRowDisplayType',
        'html_cross_string_type' => 'HtmlCrossStringType',
        'is_exp_image_to_temp_dir' => 'IsExpImageToTempDir',
        'page_title' => 'PageTitle',
        'parse_html_tag_in_cell' => 'ParseHtmlTagInCell'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attached_files_directory' => 'setAttachedFilesDirectory',
        'attached_files_url_prefix' => 'setAttachedFilesUrlPrefix',
        'encoding' => 'setEncoding',
        'export_active_worksheet_only' => 'setExportActiveWorksheetOnly',
        'export_chart_image_format' => 'setExportChartImageFormat',
        'export_images_as_base64' => 'setExportImagesAsBase64',
        'hidden_col_display_type' => 'setHiddenColDisplayType',
        'hidden_row_display_type' => 'setHiddenRowDisplayType',
        'html_cross_string_type' => 'setHtmlCrossStringType',
        'is_exp_image_to_temp_dir' => 'setIsExpImageToTempDir',
        'page_title' => 'setPageTitle',
        'parse_html_tag_in_cell' => 'setParseHtmlTagInCell'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attached_files_directory' => 'getAttachedFilesDirectory',
        'attached_files_url_prefix' => 'getAttachedFilesUrlPrefix',
        'encoding' => 'getEncoding',
        'export_active_worksheet_only' => 'getExportActiveWorksheetOnly',
        'export_chart_image_format' => 'getExportChartImageFormat',
        'export_images_as_base64' => 'getExportImagesAsBase64',
        'hidden_col_display_type' => 'getHiddenColDisplayType',
        'hidden_row_display_type' => 'getHiddenRowDisplayType',
        'html_cross_string_type' => 'getHtmlCrossStringType',
        'is_exp_image_to_temp_dir' => 'getIsExpImageToTempDir',
        'page_title' => 'getPageTitle',
        'parse_html_tag_in_cell' => 'getParseHtmlTagInCell'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['attached_files_directory'] = isset($data['attached_files_directory']) ? $data['attached_files_directory'] : null;
        $this->container['attached_files_url_prefix'] = isset($data['attached_files_url_prefix']) ? $data['attached_files_url_prefix'] : null;
        $this->container['encoding'] = isset($data['encoding']) ? $data['encoding'] : null;
        $this->container['export_active_worksheet_only'] = isset($data['export_active_worksheet_only']) ? $data['export_active_worksheet_only'] : null;
        $this->container['export_chart_image_format'] = isset($data['export_chart_image_format']) ? $data['export_chart_image_format'] : null;
        $this->container['export_images_as_base64'] = isset($data['export_images_as_base64']) ? $data['export_images_as_base64'] : null;
        $this->container['hidden_col_display_type'] = isset($data['hidden_col_display_type']) ? $data['hidden_col_display_type'] : null;
        $this->container['hidden_row_display_type'] = isset($data['hidden_row_display_type']) ? $data['hidden_row_display_type'] : null;
        $this->container['html_cross_string_type'] = isset($data['html_cross_string_type']) ? $data['html_cross_string_type'] : null;
        $this->container['is_exp_image_to_temp_dir'] = isset($data['is_exp_image_to_temp_dir']) ? $data['is_exp_image_to_temp_dir'] : null;
        $this->container['page_title'] = isset($data['page_title']) ? $data['page_title'] : null;
        $this->container['parse_html_tag_in_cell'] = isset($data['parse_html_tag_in_cell']) ? $data['parse_html_tag_in_cell'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        return true;
    }


    /**
     * Gets attached_files_directory
     *
     * @return string
     */
    public function getAttachedFilesDirectory()
    {
        return $this->container['attached_files_directory'];
    }

    /**
     * Sets attached_files_directory
     *
     * @param string $attached_files_directory attached_files_directory
     *
     * @return $this
     */
    public function setAttachedFilesDirectory($attached_files_directory)
    {
        $this->container['attached_files_directory'] = $attached_files_directory;

        return $this;
    }

    /**
     * Gets attached_files_url_prefix
     *
     * @return string
     */
    public function getAttachedFilesUrlPrefix()
    {
        return $this->container['attached_files_url_prefix'];
    }

    /**
     * Sets attached_files_url_prefix
     *
     * @param string $attached_files_url_prefix attached_files_url_prefix
     *
     * @return $this
     */
    public function setAttachedFilesUrlPrefix($attached_files_url_prefix)
    {
        $this->container['attached_files_url_prefix'] = $attached_files_url_prefix;

        return $this;
    }

    /**
     * Gets encoding
     *
     * @return string
     */
    public function getEncoding()
    {
        return $this->container['encoding'];
    }

    /**
     * Sets encoding
     *
     * @param string $encoding encoding
     *
     * @return $this
     */
    public function setEncoding($encoding)
    {
        $this->container['encoding'] = $encoding;

        return $this;
    }

    /**
     * Gets export_active_worksheet_only
     *
     * @return bool
     */
    public function getExportActiveWorksheetOnly()
    {
        return $this->container['export_active_worksheet_only'];
    }

    /**
     * Sets export_active_worksheet_only
     *
     * @param bool $export_active_worksheet_only export_active_worksheet_only
     *
     * @return $this
     */
    public function setExportActiveWorksheetOnly($export_active_worksheet_only)
    {
        $this->container['export_active_worksheet_only'] = $export_active_worksheet_only;

        return $this;
    }

    /**
     * Gets export_chart_image_format
     *
     * @return string
     */
    public function getExportChartImageFormat()
    {
        return $this->container['export_chart_image_format'];
    }

    /**
     * Sets export_chart_image_format
     *
     * @param string $export_chart_image_format export_chart_image_format
     *
     * @return $this
     */
    public function setExportChartImageFormat($export_chart_image_format)
    {
        $this->container['export_chart_image_format'] = $export_chart_image_format;

        return $this;
    }

    /**
     * Gets export_images_as_base64
     *
     * @return bool
     */
    public function getExportImagesAsBase64()
    {
        return $this->container['export_images_as_base64'];
    }

    /**
     * Sets export_images_as_base64
     *
     * @param bool $export_images_as_base64 export_images_as_base64
     *
     * @return $this
     */
    public function setExportImagesAsBase64($export_images_as_base64)
    {
        $this->container['export_images_as_base64'] = $export_images_as_base64;

        return $this;
    }

    /**
     * Gets hidden_col_display_type
     *
     * @return string
     */
    public function getHiddenColDisplayType()
    {
        return $this->container['hidden_col_display_type'];
    }

    /**
     * Sets hidden_col_display_type
     *
     * @param string $hidden_col_display_type hidden_col_display_type
     *
     * @return $this
     */
    public function setHiddenColDisplayType($hidden_col_display_type)
    {
        $this->container['hidden_col_display_type'] = $hidden_col_display_type;

        return $this;
    }

    /**
     * Gets hidden_row_display_type
     *
     * @return string
     */
    public function getHiddenRowDisplayType()
    {
        return $this->container['hidden_row_display_type'];
    }

    /**
     * Sets hidden_row_display_type
     *
     * @param string $hidden_row_display_type hidden_row_display_type
     *
     * @return $this
     */
    public function setHiddenRowDisplayType($hidden_row_display_type)
    {
        $this->container['hidden_row_display_type'] = $hidden_row_display_type;

        return $this;
    }

    /**
     * Gets html_cross_string_type
     *
     * @return string
     */
    public function getHtmlCrossStringType()
    {
        return $this->container['html_cross_string_type'];
    }

    /**
     * Sets html_cross_string_type
     *
     * @param string $html_cross_string_type html_cross_string_type
     *
     * @return $this
     */
    public function setHtmlCrossStringType($html_cross_string_type)
    {
        $this->container['html_cross_string_type'] = $html_cross_string_type;

        return $this;
    }

    /**
     * Gets is_exp_image_to_temp_dir
     *
     * @return bool
     */
    public function getIsExpImageToTempDir()
    {
        return $this->container['is_exp_image_to_temp_dir'];
    }

    /**
     * Sets is_exp_image_to_temp_dir
     *
     * @param bool $is_exp_image_to_temp_dir is_exp_image_to_temp_dir
     *
     * @return $this
     */
    public function setIsExpImageToTempDir($is_exp_image_to_temp_dir)
    {
        $this->container['is_exp_image_to_temp_dir'] = $is_exp_image_to_temp_dir;

        return $this;
    }

    /**
     * Gets page_title
     *
     * @return string
     */
    public function getPageTitle()
    {
        return $this->container['page_title'];
    }

    /**
     * Sets page_title
     *
     * @param string $page_title page_title
     *
     * @return $this
     */
    public function setPageTitle($page_title)
    {
        $this->container['page_title'] = $page_title;

        return $this;
    }

    /**
     * Gets parse_html_tag_in_cell
     *
     * @return bool
     */
    public function getParseHtmlTagInCell()
    {
        return $this->container['parse_html_tag_in_cell'];
    }

    /**
     * Sets parse_html_tag_in_cell
     *
     * @param bool $parse_html_tag_in_cell parse_html_tag_in_cell
     *
     * @return $this
     */
    public function setParseHtmlTagInCell($parse_html_tag_in_cell)
    {
        $this->container['parse_html_tag_in_cell'] = $parse_html_tag_in_cell;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


