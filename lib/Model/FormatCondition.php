<?php
/**
 * FormatCondition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Model;

use \ArrayAccess;
use \Aspose\Cells\Cloud\ObjectSerializer;

/**
 * FormatCondition Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormatCondition implements  ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FormatCondition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'link' => '\Aspose\Cells\Cloud\Model\Link',
        'priority' => 'int',
        'type' => 'string',
        'stop_if_true' => 'bool',
        'above_average' => '\Aspose\Cells\Cloud\Model\AboveAverage',
        'color_scale' => '\Aspose\Cells\Cloud\Model\ColorScale',
        'data_bar' => '\Aspose\Cells\Cloud\Model\DataBar',
        'formula1' => 'string',
        'formula2' => 'string',
        'icon_set' => '\Aspose\Cells\Cloud\Model\IconSet',
        'operator' => 'string',
        'style' => '\Aspose\Cells\Cloud\Model\Style',
        'text' => 'string',
        'time_period' => 'string',
        'top10' => '\Aspose\Cells\Cloud\Model\Top10'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'link' => null,
        'priority' => 'int32',
        'type' => null,
        'stop_if_true' => null,
        'above_average' => null,
        'color_scale' => null,
        'data_bar' => null,
        'formula1' => null,
        'formula2' => null,
        'icon_set' => null,
        'operator' => null,
        'style' => null,
        'text' => null,
        'time_period' => null,
        'top10' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'link' => 'link',
        'priority' => 'Priority',
        'type' => 'Type',
        'stop_if_true' => 'StopIfTrue',
        'above_average' => 'AboveAverage',
        'color_scale' => 'ColorScale',
        'data_bar' => 'DataBar',
        'formula1' => 'Formula1',
        'formula2' => 'Formula2',
        'icon_set' => 'IconSet',
        'operator' => 'Operator',
        'style' => 'Style',
        'text' => 'Text',
        'time_period' => 'TimePeriod',
        'top10' => 'Top10'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'link' => 'setLink',
        'priority' => 'setPriority',
        'type' => 'setType',
        'stop_if_true' => 'setStopIfTrue',
        'above_average' => 'setAboveAverage',
        'color_scale' => 'setColorScale',
        'data_bar' => 'setDataBar',
        'formula1' => 'setFormula1',
        'formula2' => 'setFormula2',
        'icon_set' => 'setIconSet',
        'operator' => 'setOperator',
        'style' => 'setStyle',
        'text' => 'setText',
        'time_period' => 'setTimePeriod',
        'top10' => 'setTop10'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'link' => 'getLink',
        'priority' => 'getPriority',
        'type' => 'getType',
        'stop_if_true' => 'getStopIfTrue',
        'above_average' => 'getAboveAverage',
        'color_scale' => 'getColorScale',
        'data_bar' => 'getDataBar',
        'formula1' => 'getFormula1',
        'formula2' => 'getFormula2',
        'icon_set' => 'getIconSet',
        'operator' => 'getOperator',
        'style' => 'getStyle',
        'text' => 'getText',
        'time_period' => 'getTimePeriod',
        'top10' => 'getTop10'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['stop_if_true'] = isset($data['stop_if_true']) ? $data['stop_if_true'] : null;
        $this->container['above_average'] = isset($data['above_average']) ? $data['above_average'] : null;
        $this->container['color_scale'] = isset($data['color_scale']) ? $data['color_scale'] : null;
        $this->container['data_bar'] = isset($data['data_bar']) ? $data['data_bar'] : null;
        $this->container['formula1'] = isset($data['formula1']) ? $data['formula1'] : null;
        $this->container['formula2'] = isset($data['formula2']) ? $data['formula2'] : null;
        $this->container['icon_set'] = isset($data['icon_set']) ? $data['icon_set'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['style'] = isset($data['style']) ? $data['style'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['time_period'] = isset($data['time_period']) ? $data['time_period'] : null;
        $this->container['top10'] = isset($data['top10']) ? $data['top10'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets link
     *
     * @return \Aspose\Cells\Cloud\Model\Link
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param \Aspose\Cells\Cloud\Model\Link $link link
     *
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority The priority of this conditional formatting rule. This value is used to determine     which format should be evaluated and rendered. Lower numeric values are higher     priority than higher numeric values, where '1' is the highest priority.
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Gets and sets whether the conditional format Type.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets stop_if_true
     *
     * @return bool
     */
    public function getStopIfTrue()
    {
        return $this->container['stop_if_true'];
    }

    /**
     * Sets stop_if_true
     *
     * @param bool $stop_if_true True, no rules with lower priority may be applied over this rule, when this     rule evaluates to true.  Only applies for Excel 2007;
     *
     * @return $this
     */
    public function setStopIfTrue($stop_if_true)
    {
        $this->container['stop_if_true'] = $stop_if_true;

        return $this;
    }

    /**
     * Gets above_average
     *
     * @return \Aspose\Cells\Cloud\Model\AboveAverage
     */
    public function getAboveAverage()
    {
        return $this->container['above_average'];
    }

    /**
     * Sets above_average
     *
     * @param \Aspose\Cells\Cloud\Model\AboveAverage $above_average above_average
     *
     * @return $this
     */
    public function setAboveAverage($above_average)
    {
        $this->container['above_average'] = $above_average;

        return $this;
    }

    /**
     * Gets color_scale
     *
     * @return \Aspose\Cells\Cloud\Model\ColorScale
     */
    public function getColorScale()
    {
        return $this->container['color_scale'];
    }

    /**
     * Sets color_scale
     *
     * @param \Aspose\Cells\Cloud\Model\ColorScale $color_scale color_scale
     *
     * @return $this
     */
    public function setColorScale($color_scale)
    {
        $this->container['color_scale'] = $color_scale;

        return $this;
    }

    /**
     * Gets data_bar
     *
     * @return \Aspose\Cells\Cloud\Model\DataBar
     */
    public function getDataBar()
    {
        return $this->container['data_bar'];
    }

    /**
     * Sets data_bar
     *
     * @param \Aspose\Cells\Cloud\Model\DataBar $data_bar data_bar
     *
     * @return $this
     */
    public function setDataBar($data_bar)
    {
        $this->container['data_bar'] = $data_bar;

        return $this;
    }

    /**
     * Gets formula1
     *
     * @return string
     */
    public function getFormula1()
    {
        return $this->container['formula1'];
    }

    /**
     * Sets formula1
     *
     * @param string $formula1 formula1
     *
     * @return $this
     */
    public function setFormula1($formula1)
    {
        $this->container['formula1'] = $formula1;

        return $this;
    }

    /**
     * Gets formula2
     *
     * @return string
     */
    public function getFormula2()
    {
        return $this->container['formula2'];
    }

    /**
     * Sets formula2
     *
     * @param string $formula2 formula2
     *
     * @return $this
     */
    public function setFormula2($formula2)
    {
        $this->container['formula2'] = $formula2;

        return $this;
    }

    /**
     * Gets icon_set
     *
     * @return \Aspose\Cells\Cloud\Model\IconSet
     */
    public function getIconSet()
    {
        return $this->container['icon_set'];
    }

    /**
     * Sets icon_set
     *
     * @param \Aspose\Cells\Cloud\Model\IconSet $icon_set icon_set
     *
     * @return $this
     */
    public function setIconSet($icon_set)
    {
        $this->container['icon_set'] = $icon_set;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator operator
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets style
     *
     * @return \Aspose\Cells\Cloud\Model\Style
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param \Aspose\Cells\Cloud\Model\Style $style style
     *
     * @return $this
     */
    public function setStyle($style)
    {
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets time_period
     *
     * @return string
     */
    public function getTimePeriod()
    {
        return $this->container['time_period'];
    }

    /**
     * Sets time_period
     *
     * @param string $time_period time_period
     *
     * @return $this
     */
    public function setTimePeriod($time_period)
    {
        $this->container['time_period'] = $time_period;

        return $this;
    }

    /**
     * Gets top10
     *
     * @return \Aspose\Cells\Cloud\Model\Top10
     */
    public function getTop10()
    {
        return $this->container['top10'];
    }

    /**
     * Sets top10
     *
     * @param \Aspose\Cells\Cloud\Model\Top10 $top10 top10
     *
     * @return $this
     */
    public function setTop10($top10)
    {
        $this->container['top10'] = $top10;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


