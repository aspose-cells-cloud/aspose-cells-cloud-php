<?php
/**
 * CalculationOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Model;

use \ArrayAccess;
use \Aspose\Cells\Cloud\ObjectSerializer;

/**
 * CalculationOptions Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CalculationOptions implements  ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CalculationOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'calc_stack_size' => 'int',
        'ignore_error' => 'bool',
        'precision_strategy' => 'string',
        'recursive' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'calc_stack_size' => 'int32',
        'ignore_error' => null,
        'precision_strategy' => null,
        'recursive' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'calc_stack_size' => 'CalcStackSize',
        'ignore_error' => 'IgnoreError',
        'precision_strategy' => 'PrecisionStrategy',
        'recursive' => 'Recursive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'calc_stack_size' => 'setCalcStackSize',
        'ignore_error' => 'setIgnoreError',
        'precision_strategy' => 'setPrecisionStrategy',
        'recursive' => 'setRecursive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'calc_stack_size' => 'getCalcStackSize',
        'ignore_error' => 'getIgnoreError',
        'precision_strategy' => 'getPrecisionStrategy',
        'recursive' => 'getRecursive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['calc_stack_size'] = isset($data['calc_stack_size']) ? $data['calc_stack_size'] : null;
        $this->container['ignore_error'] = isset($data['ignore_error']) ? $data['ignore_error'] : null;
        $this->container['precision_strategy'] = isset($data['precision_strategy']) ? $data['precision_strategy'] : null;
        $this->container['recursive'] = isset($data['recursive']) ? $data['recursive'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets calc_stack_size
     *
     * @return int
     */
    public function getCalcStackSize()
    {
        return $this->container['calc_stack_size'];
    }

    /**
     * Sets calc_stack_size
     *
     * @param int $calc_stack_size calc_stack_size
     *
     * @return $this
     */
    public function setCalcStackSize($calc_stack_size)
    {
        $this->container['calc_stack_size'] = $calc_stack_size;

        return $this;
    }

    /**
     * Gets ignore_error
     *
     * @return bool
     */
    public function getIgnoreError()
    {
        return $this->container['ignore_error'];
    }

    /**
     * Sets ignore_error
     *
     * @param bool $ignore_error ignore_error
     *
     * @return $this
     */
    public function setIgnoreError($ignore_error)
    {
        $this->container['ignore_error'] = $ignore_error;

        return $this;
    }

    /**
     * Gets precision_strategy
     *
     * @return string
     */
    public function getPrecisionStrategy()
    {
        return $this->container['precision_strategy'];
    }

    /**
     * Sets precision_strategy
     *
     * @param string $precision_strategy precision_strategy
     *
     * @return $this
     */
    public function setPrecisionStrategy($precision_strategy)
    {
        $this->container['precision_strategy'] = $precision_strategy;

        return $this;
    }

    /**
     * Gets recursive
     *
     * @return bool
     */
    public function getRecursive()
    {
        return $this->container['recursive'];
    }

    /**
     * Sets recursive
     *
     * @param bool $recursive recursive
     *
     * @return $this
     */
    public function setRecursive($recursive)
    {
        $this->container['recursive'] = $recursive;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


