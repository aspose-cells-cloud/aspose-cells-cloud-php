<?php
/**
 * DataBar
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/* 
 * <summary>
 *  Copyright (c) 2020 Aspose.Cells Cloud
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all 
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Model;

use \ArrayAccess;
use \Aspose\Cells\Cloud\ObjectSerializer;

/**
 * DataBar Class Doc Comment
 *
 * @category Class
 * @description Describe the DataBar conditional formatting rule. This conditional formatting    rule displays a gradated data bar in the range of cells.
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataBar implements  ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataBar';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'direction' => 'string',
        'max_cfvo' => '\Aspose\Cells\Cloud\Model\ConditionalFormattingValue',
        'color' => '\Aspose\Cells\Cloud\Model\Color',
        'min_length' => 'int',
        'bar_fill_type' => 'string',
        'min_cfvo' => '\Aspose\Cells\Cloud\Model\ConditionalFormattingValue',
        'axis_position' => 'string',
        'negative_bar_format' => '\Aspose\Cells\Cloud\Model\NegativeBarFormat',
        'bar_border' => '\Aspose\Cells\Cloud\Model\DataBarBorder',
        'axis_color' => '\Aspose\Cells\Cloud\Model\Color',
        'max_length' => 'int',
        'show_value' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'direction' => null,
        'max_cfvo' => null,
        'color' => null,
        'min_length' => 'int32',
        'bar_fill_type' => null,
        'min_cfvo' => null,
        'axis_position' => null,
        'negative_bar_format' => null,
        'bar_border' => null,
        'axis_color' => null,
        'max_length' => 'int32',
        'show_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'direction' => 'Direction',
        'max_cfvo' => 'MaxCfvo',
        'color' => 'Color',
        'min_length' => 'MinLength',
        'bar_fill_type' => 'BarFillType',
        'min_cfvo' => 'MinCfvo',
        'axis_position' => 'AxisPosition',
        'negative_bar_format' => 'NegativeBarFormat',
        'bar_border' => 'BarBorder',
        'axis_color' => 'AxisColor',
        'max_length' => 'MaxLength',
        'show_value' => 'ShowValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'direction' => 'setDirection',
        'max_cfvo' => 'setMaxCfvo',
        'color' => 'setColor',
        'min_length' => 'setMinLength',
        'bar_fill_type' => 'setBarFillType',
        'min_cfvo' => 'setMinCfvo',
        'axis_position' => 'setAxisPosition',
        'negative_bar_format' => 'setNegativeBarFormat',
        'bar_border' => 'setBarBorder',
        'axis_color' => 'setAxisColor',
        'max_length' => 'setMaxLength',
        'show_value' => 'setShowValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'direction' => 'getDirection',
        'max_cfvo' => 'getMaxCfvo',
        'color' => 'getColor',
        'min_length' => 'getMinLength',
        'bar_fill_type' => 'getBarFillType',
        'min_cfvo' => 'getMinCfvo',
        'axis_position' => 'getAxisPosition',
        'negative_bar_format' => 'getNegativeBarFormat',
        'bar_border' => 'getBarBorder',
        'axis_color' => 'getAxisColor',
        'max_length' => 'getMaxLength',
        'show_value' => 'getShowValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['max_cfvo'] = isset($data['max_cfvo']) ? $data['max_cfvo'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['min_length'] = isset($data['min_length']) ? $data['min_length'] : null;
        $this->container['bar_fill_type'] = isset($data['bar_fill_type']) ? $data['bar_fill_type'] : null;
        $this->container['min_cfvo'] = isset($data['min_cfvo']) ? $data['min_cfvo'] : null;
        $this->container['axis_position'] = isset($data['axis_position']) ? $data['axis_position'] : null;
        $this->container['negative_bar_format'] = isset($data['negative_bar_format']) ? $data['negative_bar_format'] : null;
        $this->container['bar_border'] = isset($data['bar_border']) ? $data['bar_border'] : null;
        $this->container['axis_color'] = isset($data['axis_color']) ? $data['axis_color'] : null;
        $this->container['max_length'] = isset($data['max_length']) ? $data['max_length'] : null;
        $this->container['show_value'] = isset($data['show_value']) ? $data['show_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction Gets or sets the direction the databar is displayed.
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets max_cfvo
     *
     * @return \Aspose\Cells\Cloud\Model\ConditionalFormattingValue
     */
    public function getMaxCfvo()
    {
        return $this->container['max_cfvo'];
    }

    /**
     * Sets max_cfvo
     *
     * @param \Aspose\Cells\Cloud\Model\ConditionalFormattingValue $max_cfvo Get or set this DataBar's max value object.  Cannot set null or CFValueObject    with type FormatConditionValueType.Min to it.
     *
     * @return $this
     */
    public function setMaxCfvo($max_cfvo)
    {
        $this->container['max_cfvo'] = $max_cfvo;

        return $this;
    }

    /**
     * Gets color
     *
     * @return \Aspose\Cells\Cloud\Model\Color
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param \Aspose\Cells\Cloud\Model\Color $color Get or set this DataBar's Color.
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets min_length
     *
     * @return int
     */
    public function getMinLength()
    {
        return $this->container['min_length'];
    }

    /**
     * Sets min_length
     *
     * @param int $min_length Represents the min length of data bar .
     *
     * @return $this
     */
    public function setMinLength($min_length)
    {
        $this->container['min_length'] = $min_length;

        return $this;
    }

    /**
     * Gets bar_fill_type
     *
     * @return string
     */
    public function getBarFillType()
    {
        return $this->container['bar_fill_type'];
    }

    /**
     * Sets bar_fill_type
     *
     * @param string $bar_fill_type Gets or sets how a data bar is filled with color.
     *
     * @return $this
     */
    public function setBarFillType($bar_fill_type)
    {
        $this->container['bar_fill_type'] = $bar_fill_type;

        return $this;
    }

    /**
     * Gets min_cfvo
     *
     * @return \Aspose\Cells\Cloud\Model\ConditionalFormattingValue
     */
    public function getMinCfvo()
    {
        return $this->container['min_cfvo'];
    }

    /**
     * Sets min_cfvo
     *
     * @param \Aspose\Cells\Cloud\Model\ConditionalFormattingValue $min_cfvo Get or set this DataBar's min value object.  Cannot set null or CFValueObject   with type FormatConditionValueType.Max to it.
     *
     * @return $this
     */
    public function setMinCfvo($min_cfvo)
    {
        $this->container['min_cfvo'] = $min_cfvo;

        return $this;
    }

    /**
     * Gets axis_position
     *
     * @return string
     */
    public function getAxisPosition()
    {
        return $this->container['axis_position'];
    }

    /**
     * Sets axis_position
     *
     * @param string $axis_position Gets or sets the position of the axis of the data bars specified by a conditional    formatting rule.
     *
     * @return $this
     */
    public function setAxisPosition($axis_position)
    {
        $this->container['axis_position'] = $axis_position;

        return $this;
    }

    /**
     * Gets negative_bar_format
     *
     * @return \Aspose\Cells\Cloud\Model\NegativeBarFormat
     */
    public function getNegativeBarFormat()
    {
        return $this->container['negative_bar_format'];
    }

    /**
     * Sets negative_bar_format
     *
     * @param \Aspose\Cells\Cloud\Model\NegativeBarFormat $negative_bar_format Gets the NegativeBarFormat object associated with a data bar conditional     formatting rule.
     *
     * @return $this
     */
    public function setNegativeBarFormat($negative_bar_format)
    {
        $this->container['negative_bar_format'] = $negative_bar_format;

        return $this;
    }

    /**
     * Gets bar_border
     *
     * @return \Aspose\Cells\Cloud\Model\DataBarBorder
     */
    public function getBarBorder()
    {
        return $this->container['bar_border'];
    }

    /**
     * Sets bar_border
     *
     * @param \Aspose\Cells\Cloud\Model\DataBarBorder $bar_border Gets an object that specifies the border of a data bar.
     *
     * @return $this
     */
    public function setBarBorder($bar_border)
    {
        $this->container['bar_border'] = $bar_border;

        return $this;
    }

    /**
     * Gets axis_color
     *
     * @return \Aspose\Cells\Cloud\Model\Color
     */
    public function getAxisColor()
    {
        return $this->container['axis_color'];
    }

    /**
     * Sets axis_color
     *
     * @param \Aspose\Cells\Cloud\Model\Color $axis_color Gets the color of the axis for cells with conditional formatting as data bars.
     *
     * @return $this
     */
    public function setAxisColor($axis_color)
    {
        $this->container['axis_color'] = $axis_color;

        return $this;
    }

    /**
     * Gets max_length
     *
     * @return int
     */
    public function getMaxLength()
    {
        return $this->container['max_length'];
    }

    /**
     * Sets max_length
     *
     * @param int $max_length Represents the max length of data bar .
     *
     * @return $this
     */
    public function setMaxLength($max_length)
    {
        $this->container['max_length'] = $max_length;

        return $this;
    }

    /**
     * Gets show_value
     *
     * @return bool
     */
    public function getShowValue()
    {
        return $this->container['show_value'];
    }

    /**
     * Sets show_value
     *
     * @param bool $show_value Get or set the flag indicating whether to show the values of the cells on   which this data bar is applied.  Default value is true.
     *
     * @return $this
     */
    public function setShowValue($show_value)
    {
        $this->container['show_value'] = $show_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


