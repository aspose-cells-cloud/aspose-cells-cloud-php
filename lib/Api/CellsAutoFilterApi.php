<?php
/**
 * CellsAutoFilterApi
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aspose\Cells\Cloud\ApiException;
use Aspose\Cells\Cloud\Configuration;
use Aspose\Cells\Cloud\HeaderSelector;
use Aspose\Cells\Cloud\ObjectSerializer;

/**
 * CellsAutoFilterApi Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsAutoFilterApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetDateFilter
     *
     * Removes a date filter.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $field_index field_index (required)
     * @param  string $date_time_grouping_type date_time_grouping_type (required)
     * @param  int $year year (optional, default to 0)
     * @param  int $month month (optional, default to 0)
     * @param  int $day day (optional, default to 0)
     * @param  int $hour hour (optional, default to 0)
     * @param  int $minute minute (optional, default to 0)
     * @param  int $second second (optional, default to 0)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsAutoFilterDeleteWorksheetDateFilter($name, $sheet_name, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $folder = null)
    {
        list($response) = $this->cellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo($name, $sheet_name, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $folder);
        return $response;
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo
     *
     * Removes a date filter.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo($name, $sheet_name, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterDeleteWorksheetDateFilterRequest($name, $sheet_name, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetDateFilterAsync
     *
     * Removes a date filter.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterDeleteWorksheetDateFilterAsync($name, $sheet_name, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $folder = null)
    {
        return $this->cellsAutoFilterDeleteWorksheetDateFilterAsyncWithHttpInfo($name, $sheet_name, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetDateFilterAsyncWithHttpInfo
     *
     * Removes a date filter.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterDeleteWorksheetDateFilterAsyncWithHttpInfo($name, $sheet_name, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterDeleteWorksheetDateFilterRequest($name, $sheet_name, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterDeleteWorksheetDateFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsAutoFilterDeleteWorksheetDateFilterRequest($name, $sheet_name, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterDeleteWorksheetDateFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterDeleteWorksheetDateFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterDeleteWorksheetDateFilter'
            );
        }
        // verify the required parameter 'date_time_grouping_type' is set
        if ($date_time_grouping_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_time_grouping_type when calling cellsAutoFilterDeleteWorksheetDateFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($date_time_grouping_type !== null) {
            $queryParams['dateTimeGroupingType'] = ObjectSerializer::toQueryValue($date_time_grouping_type);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }
        // query params
        if ($month !== null) {
            $queryParams['month'] = ObjectSerializer::toQueryValue($month);
        }
        // query params
        if ($day !== null) {
            $queryParams['day'] = ObjectSerializer::toQueryValue($day);
        }
        // query params
        if ($hour !== null) {
            $queryParams['hour'] = ObjectSerializer::toQueryValue($hour);
        }
        // query params
        if ($minute !== null) {
            $queryParams['minute'] = ObjectSerializer::toQueryValue($minute);
        }
        // query params
        if ($second !== null) {
            $queryParams['second'] = ObjectSerializer::toQueryValue($second);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetFilter
     *
     * Delete a filter for a filter column.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $field_index field_index (required)
     * @param  string $criteria criteria (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsAutoFilterDeleteWorksheetFilter($name, $sheet_name, $field_index, $criteria = null, $folder = null)
    {
        list($response) = $this->cellsAutoFilterDeleteWorksheetFilterWithHttpInfo($name, $sheet_name, $field_index, $criteria, $folder);
        return $response;
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetFilterWithHttpInfo
     *
     * Delete a filter for a filter column.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $criteria (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsAutoFilterDeleteWorksheetFilterWithHttpInfo($name, $sheet_name, $field_index, $criteria = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterDeleteWorksheetFilterRequest($name, $sheet_name, $field_index, $criteria, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetFilterAsync
     *
     * Delete a filter for a filter column.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $criteria (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterDeleteWorksheetFilterAsync($name, $sheet_name, $field_index, $criteria = null, $folder = null)
    {
        return $this->cellsAutoFilterDeleteWorksheetFilterAsyncWithHttpInfo($name, $sheet_name, $field_index, $criteria, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetFilterAsyncWithHttpInfo
     *
     * Delete a filter for a filter column.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $criteria (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterDeleteWorksheetFilterAsyncWithHttpInfo($name, $sheet_name, $field_index, $criteria = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterDeleteWorksheetFilterRequest($name, $sheet_name, $field_index, $criteria, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterDeleteWorksheetFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $criteria (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsAutoFilterDeleteWorksheetFilterRequest($name, $sheet_name, $field_index, $criteria = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterDeleteWorksheetFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterDeleteWorksheetFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterDeleteWorksheetFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/filter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($criteria !== null) {
            $queryParams['criteria'] = ObjectSerializer::toQueryValue($criteria);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterGetWorksheetAutoFilter
     *
     * Get Auto filter Description
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\AutoFilterResponse
     */
    public function cellsAutoFilterGetWorksheetAutoFilter($name, $sheet_name, $folder = null)
    {
        list($response) = $this->cellsAutoFilterGetWorksheetAutoFilterWithHttpInfo($name, $sheet_name, $folder);
        return $response;
    }

    /**
     * Operation cellsAutoFilterGetWorksheetAutoFilterWithHttpInfo
     *
     * Get Auto filter Description
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\AutoFilterResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsAutoFilterGetWorksheetAutoFilterWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AutoFilterResponse';
        $request = $this->cellsAutoFilterGetWorksheetAutoFilterRequest($name, $sheet_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\AutoFilterResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterGetWorksheetAutoFilterAsync
     *
     * Get Auto filter Description
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterGetWorksheetAutoFilterAsync($name, $sheet_name, $folder = null)
    {
        return $this->cellsAutoFilterGetWorksheetAutoFilterAsyncWithHttpInfo($name, $sheet_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterGetWorksheetAutoFilterAsyncWithHttpInfo
     *
     * Get Auto filter Description
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterGetWorksheetAutoFilterAsyncWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AutoFilterResponse';
        $request = $this->cellsAutoFilterGetWorksheetAutoFilterRequest($name, $sheet_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterGetWorksheetAutoFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsAutoFilterGetWorksheetAutoFilterRequest($name, $sheet_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterGetWorksheetAutoFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterGetWorksheetAutoFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPostWorksheetAutoFilterRefresh
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsAutoFilterPostWorksheetAutoFilterRefresh($name, $sheet_name, $folder = null)
    {
        list($response) = $this->cellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo($name, $sheet_name, $folder);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPostWorksheetAutoFilterRefreshRequest($name, $sheet_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPostWorksheetAutoFilterRefreshAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPostWorksheetAutoFilterRefreshAsync($name, $sheet_name, $folder = null)
    {
        return $this->cellsAutoFilterPostWorksheetAutoFilterRefreshAsyncWithHttpInfo($name, $sheet_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPostWorksheetAutoFilterRefreshAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPostWorksheetAutoFilterRefreshAsyncWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPostWorksheetAutoFilterRefreshRequest($name, $sheet_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPostWorksheetAutoFilterRefresh'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsAutoFilterPostWorksheetAutoFilterRefreshRequest($name, $sheet_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPostWorksheetAutoFilterRefresh'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPostWorksheetAutoFilterRefresh'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/refresh';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchBlanks
     *
     * Match all blank cell in the list.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $field_index field_index (required)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsAutoFilterPostWorksheetMatchBlanks($name, $sheet_name, $field_index, $folder = null)
    {
        list($response) = $this->cellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo($name, $sheet_name, $field_index, $folder);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo
     *
     * Match all blank cell in the list.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo($name, $sheet_name, $field_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPostWorksheetMatchBlanksRequest($name, $sheet_name, $field_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchBlanksAsync
     *
     * Match all blank cell in the list.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPostWorksheetMatchBlanksAsync($name, $sheet_name, $field_index, $folder = null)
    {
        return $this->cellsAutoFilterPostWorksheetMatchBlanksAsyncWithHttpInfo($name, $sheet_name, $field_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchBlanksAsyncWithHttpInfo
     *
     * Match all blank cell in the list.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPostWorksheetMatchBlanksAsyncWithHttpInfo($name, $sheet_name, $field_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPostWorksheetMatchBlanksRequest($name, $sheet_name, $field_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPostWorksheetMatchBlanks'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsAutoFilterPostWorksheetMatchBlanksRequest($name, $sheet_name, $field_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPostWorksheetMatchBlanks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPostWorksheetMatchBlanks'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPostWorksheetMatchBlanks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/matchBlanks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchNonBlanks
     *
     * Match all not blank cell in the list.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $field_index field_index (required)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsAutoFilterPostWorksheetMatchNonBlanks($name, $sheet_name, $field_index, $folder = null)
    {
        list($response) = $this->cellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo($name, $sheet_name, $field_index, $folder);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo
     *
     * Match all not blank cell in the list.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo($name, $sheet_name, $field_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPostWorksheetMatchNonBlanksRequest($name, $sheet_name, $field_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchNonBlanksAsync
     *
     * Match all not blank cell in the list.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPostWorksheetMatchNonBlanksAsync($name, $sheet_name, $field_index, $folder = null)
    {
        return $this->cellsAutoFilterPostWorksheetMatchNonBlanksAsyncWithHttpInfo($name, $sheet_name, $field_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchNonBlanksAsyncWithHttpInfo
     *
     * Match all not blank cell in the list.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPostWorksheetMatchNonBlanksAsyncWithHttpInfo($name, $sheet_name, $field_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPostWorksheetMatchNonBlanksRequest($name, $sheet_name, $field_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPostWorksheetMatchNonBlanks'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsAutoFilterPostWorksheetMatchNonBlanksRequest($name, $sheet_name, $field_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPostWorksheetMatchNonBlanks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPostWorksheetMatchNonBlanks'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPostWorksheetMatchNonBlanks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/matchNonBlanks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetColorFilter
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ColorFilterRequest $color_filter color_filter (optional)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsAutoFilterPutWorksheetColorFilter($name, $sheet_name, $range, $field_index, $color_filter = null, $match_blanks = null, $refresh = null, $folder = null)
    {
        list($response) = $this->cellsAutoFilterPutWorksheetColorFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $color_filter, $match_blanks, $refresh, $folder);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetColorFilterWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ColorFilterRequest $color_filter (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsAutoFilterPutWorksheetColorFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $color_filter = null, $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetColorFilterRequest($name, $sheet_name, $range, $field_index, $color_filter, $match_blanks, $refresh, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetColorFilterAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ColorFilterRequest $color_filter (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetColorFilterAsync($name, $sheet_name, $range, $field_index, $color_filter = null, $match_blanks = null, $refresh = null, $folder = null)
    {
        return $this->cellsAutoFilterPutWorksheetColorFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $color_filter, $match_blanks, $refresh, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetColorFilterAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ColorFilterRequest $color_filter (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetColorFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $color_filter = null, $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetColorFilterRequest($name, $sheet_name, $range, $field_index, $color_filter, $match_blanks, $refresh, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetColorFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ColorFilterRequest $color_filter (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsAutoFilterPutWorksheetColorFilterRequest($name, $sheet_name, $range, $field_index, $color_filter = null, $match_blanks = null, $refresh = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetColorFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetColorFilter'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetColorFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetColorFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/colorFilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($color_filter)) {
            $_tempBody = $color_filter;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetCustomFilter
     *
     * Filters a list with a custom criteria.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  string $operator_type1 operator_type1 (required)
     * @param  string $criteria1 criteria1 (required)
     * @param  bool $is_and is_and (optional)
     * @param  string $operator_type2 operator_type2 (optional)
     * @param  string $criteria2 criteria2 (optional)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsAutoFilterPutWorksheetCustomFilter($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and = null, $operator_type2 = null, $criteria2 = null, $match_blanks = null, $refresh = null, $folder = null)
    {
        list($response) = $this->cellsAutoFilterPutWorksheetCustomFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and, $operator_type2, $criteria2, $match_blanks, $refresh, $folder);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetCustomFilterWithHttpInfo
     *
     * Filters a list with a custom criteria.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $operator_type1 (required)
     * @param  string $criteria1 (required)
     * @param  bool $is_and (optional)
     * @param  string $operator_type2 (optional)
     * @param  string $criteria2 (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsAutoFilterPutWorksheetCustomFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and = null, $operator_type2 = null, $criteria2 = null, $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetCustomFilterRequest($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and, $operator_type2, $criteria2, $match_blanks, $refresh, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetCustomFilterAsync
     *
     * Filters a list with a custom criteria.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $operator_type1 (required)
     * @param  string $criteria1 (required)
     * @param  bool $is_and (optional)
     * @param  string $operator_type2 (optional)
     * @param  string $criteria2 (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetCustomFilterAsync($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and = null, $operator_type2 = null, $criteria2 = null, $match_blanks = null, $refresh = null, $folder = null)
    {
        return $this->cellsAutoFilterPutWorksheetCustomFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and, $operator_type2, $criteria2, $match_blanks, $refresh, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetCustomFilterAsyncWithHttpInfo
     *
     * Filters a list with a custom criteria.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $operator_type1 (required)
     * @param  string $criteria1 (required)
     * @param  bool $is_and (optional)
     * @param  string $operator_type2 (optional)
     * @param  string $criteria2 (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetCustomFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and = null, $operator_type2 = null, $criteria2 = null, $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetCustomFilterRequest($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and, $operator_type2, $criteria2, $match_blanks, $refresh, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetCustomFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $operator_type1 (required)
     * @param  string $criteria1 (required)
     * @param  bool $is_and (optional)
     * @param  string $operator_type2 (optional)
     * @param  string $criteria2 (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsAutoFilterPutWorksheetCustomFilterRequest($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and = null, $operator_type2 = null, $criteria2 = null, $match_blanks = null, $refresh = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetCustomFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetCustomFilter'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetCustomFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetCustomFilter'
            );
        }
        // verify the required parameter 'operator_type1' is set
        if ($operator_type1 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_type1 when calling cellsAutoFilterPutWorksheetCustomFilter'
            );
        }
        // verify the required parameter 'criteria1' is set
        if ($criteria1 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $criteria1 when calling cellsAutoFilterPutWorksheetCustomFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($operator_type1 !== null) {
            $queryParams['operatorType1'] = ObjectSerializer::toQueryValue($operator_type1);
        }
        // query params
        if ($criteria1 !== null) {
            $queryParams['criteria1'] = ObjectSerializer::toQueryValue($criteria1);
        }
        // query params
        if ($is_and !== null) {
            $queryParams['isAnd'] = ObjectSerializer::toQueryValue($is_and);
        }
        // query params
        if ($operator_type2 !== null) {
            $queryParams['operatorType2'] = ObjectSerializer::toQueryValue($operator_type2);
        }
        // query params
        if ($criteria2 !== null) {
            $queryParams['criteria2'] = ObjectSerializer::toQueryValue($criteria2);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDateFilter
     *
     * add date filter in worksheet
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  string $date_time_grouping_type date_time_grouping_type (required)
     * @param  int $year year (optional, default to 0)
     * @param  int $month month (optional, default to 0)
     * @param  int $day day (optional, default to 0)
     * @param  int $hour hour (optional, default to 0)
     * @param  int $minute minute (optional, default to 0)
     * @param  int $second second (optional, default to 0)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsAutoFilterPutWorksheetDateFilter($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $match_blanks = null, $refresh = null, $folder = null)
    {
        list($response) = $this->cellsAutoFilterPutWorksheetDateFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $match_blanks, $refresh, $folder);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDateFilterWithHttpInfo
     *
     * add date filter in worksheet
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsAutoFilterPutWorksheetDateFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetDateFilterRequest($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $match_blanks, $refresh, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDateFilterAsync
     *
     * add date filter in worksheet
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetDateFilterAsync($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $match_blanks = null, $refresh = null, $folder = null)
    {
        return $this->cellsAutoFilterPutWorksheetDateFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $match_blanks, $refresh, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDateFilterAsyncWithHttpInfo
     *
     * add date filter in worksheet
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetDateFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetDateFilterRequest($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $match_blanks, $refresh, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetDateFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsAutoFilterPutWorksheetDateFilterRequest($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $match_blanks = null, $refresh = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetDateFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetDateFilter'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetDateFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetDateFilter'
            );
        }
        // verify the required parameter 'date_time_grouping_type' is set
        if ($date_time_grouping_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_time_grouping_type when calling cellsAutoFilterPutWorksheetDateFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($date_time_grouping_type !== null) {
            $queryParams['dateTimeGroupingType'] = ObjectSerializer::toQueryValue($date_time_grouping_type);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }
        // query params
        if ($month !== null) {
            $queryParams['month'] = ObjectSerializer::toQueryValue($month);
        }
        // query params
        if ($day !== null) {
            $queryParams['day'] = ObjectSerializer::toQueryValue($day);
        }
        // query params
        if ($hour !== null) {
            $queryParams['hour'] = ObjectSerializer::toQueryValue($hour);
        }
        // query params
        if ($minute !== null) {
            $queryParams['minute'] = ObjectSerializer::toQueryValue($minute);
        }
        // query params
        if ($second !== null) {
            $queryParams['second'] = ObjectSerializer::toQueryValue($second);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDynamicFilter
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  string $dynamic_filter_type dynamic_filter_type (required)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsAutoFilterPutWorksheetDynamicFilter($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks = null, $refresh = null, $folder = null)
    {
        list($response) = $this->cellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks, $refresh, $folder);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $dynamic_filter_type (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetDynamicFilterRequest($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks, $refresh, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDynamicFilterAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $dynamic_filter_type (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetDynamicFilterAsync($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks = null, $refresh = null, $folder = null)
    {
        return $this->cellsAutoFilterPutWorksheetDynamicFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks, $refresh, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDynamicFilterAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $dynamic_filter_type (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetDynamicFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetDynamicFilterRequest($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks, $refresh, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetDynamicFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $dynamic_filter_type (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsAutoFilterPutWorksheetDynamicFilterRequest($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks = null, $refresh = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetDynamicFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetDynamicFilter'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetDynamicFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetDynamicFilter'
            );
        }
        // verify the required parameter 'dynamic_filter_type' is set
        if ($dynamic_filter_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dynamic_filter_type when calling cellsAutoFilterPutWorksheetDynamicFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/dynamicFilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($dynamic_filter_type !== null) {
            $queryParams['dynamicFilterType'] = ObjectSerializer::toQueryValue($dynamic_filter_type);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilter
     *
     * Adds a filter for a filter column.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  string $criteria criteria (required)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsAutoFilterPutWorksheetFilter($name, $sheet_name, $range, $field_index, $criteria, $match_blanks = null, $refresh = null, $folder = null)
    {
        list($response) = $this->cellsAutoFilterPutWorksheetFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $criteria, $match_blanks, $refresh, $folder);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterWithHttpInfo
     *
     * Adds a filter for a filter column.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $criteria (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsAutoFilterPutWorksheetFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $criteria, $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetFilterRequest($name, $sheet_name, $range, $field_index, $criteria, $match_blanks, $refresh, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterAsync
     *
     * Adds a filter for a filter column.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $criteria (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetFilterAsync($name, $sheet_name, $range, $field_index, $criteria, $match_blanks = null, $refresh = null, $folder = null)
    {
        return $this->cellsAutoFilterPutWorksheetFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $criteria, $match_blanks, $refresh, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterAsyncWithHttpInfo
     *
     * Adds a filter for a filter column.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $criteria (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $criteria, $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetFilterRequest($name, $sheet_name, $range, $field_index, $criteria, $match_blanks, $refresh, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $criteria (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsAutoFilterPutWorksheetFilterRequest($name, $sheet_name, $range, $field_index, $criteria, $match_blanks = null, $refresh = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetFilter'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetFilter'
            );
        }
        // verify the required parameter 'criteria' is set
        if ($criteria === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $criteria when calling cellsAutoFilterPutWorksheetFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/filter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($criteria !== null) {
            $queryParams['criteria'] = ObjectSerializer::toQueryValue($criteria);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterTop10
     *
     * Filter the top 10 item in the list
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  bool $is_top is_top (required)
     * @param  bool $is_percent is_percent (required)
     * @param  int $item_count item_count (required)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsAutoFilterPutWorksheetFilterTop10($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks = null, $refresh = null, $folder = null)
    {
        list($response) = $this->cellsAutoFilterPutWorksheetFilterTop10WithHttpInfo($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks, $refresh, $folder);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterTop10WithHttpInfo
     *
     * Filter the top 10 item in the list
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  bool $is_top (required)
     * @param  bool $is_percent (required)
     * @param  int $item_count (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsAutoFilterPutWorksheetFilterTop10WithHttpInfo($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetFilterTop10Request($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks, $refresh, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterTop10Async
     *
     * Filter the top 10 item in the list
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  bool $is_top (required)
     * @param  bool $is_percent (required)
     * @param  int $item_count (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetFilterTop10Async($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks = null, $refresh = null, $folder = null)
    {
        return $this->cellsAutoFilterPutWorksheetFilterTop10AsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks, $refresh, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterTop10AsyncWithHttpInfo
     *
     * Filter the top 10 item in the list
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  bool $is_top (required)
     * @param  bool $is_percent (required)
     * @param  int $item_count (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetFilterTop10AsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetFilterTop10Request($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks, $refresh, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetFilterTop10'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  bool $is_top (required)
     * @param  bool $is_percent (required)
     * @param  int $item_count (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsAutoFilterPutWorksheetFilterTop10Request($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks = null, $refresh = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }
        // verify the required parameter 'is_top' is set
        if ($is_top === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_top when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }
        // verify the required parameter 'is_percent' is set
        if ($is_percent === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_percent when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }
        // verify the required parameter 'item_count' is set
        if ($item_count === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_count when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/filterTop10';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($is_top !== null) {
            $queryParams['isTop'] = ObjectSerializer::toQueryValue($is_top);
        }
        // query params
        if ($is_percent !== null) {
            $queryParams['isPercent'] = ObjectSerializer::toQueryValue($is_percent);
        }
        // query params
        if ($item_count !== null) {
            $queryParams['itemCount'] = ObjectSerializer::toQueryValue($item_count);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetIconFilter
     *
     * Adds an icon filter.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  string $icon_set_type icon_set_type (required)
     * @param  int $icon_id icon_id (required)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsAutoFilterPutWorksheetIconFilter($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks = null, $refresh = null, $folder = null)
    {
        list($response) = $this->cellsAutoFilterPutWorksheetIconFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks, $refresh, $folder);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetIconFilterWithHttpInfo
     *
     * Adds an icon filter.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $icon_set_type (required)
     * @param  int $icon_id (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsAutoFilterPutWorksheetIconFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetIconFilterRequest($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks, $refresh, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetIconFilterAsync
     *
     * Adds an icon filter.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $icon_set_type (required)
     * @param  int $icon_id (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetIconFilterAsync($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks = null, $refresh = null, $folder = null)
    {
        return $this->cellsAutoFilterPutWorksheetIconFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks, $refresh, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetIconFilterAsyncWithHttpInfo
     *
     * Adds an icon filter.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $icon_set_type (required)
     * @param  int $icon_id (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsAutoFilterPutWorksheetIconFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks = null, $refresh = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsAutoFilterPutWorksheetIconFilterRequest($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks, $refresh, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetIconFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $icon_set_type (required)
     * @param  int $icon_id (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsAutoFilterPutWorksheetIconFilterRequest($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks = null, $refresh = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetIconFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetIconFilter'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetIconFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetIconFilter'
            );
        }
        // verify the required parameter 'icon_set_type' is set
        if ($icon_set_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $icon_set_type when calling cellsAutoFilterPutWorksheetIconFilter'
            );
        }
        // verify the required parameter 'icon_id' is set
        if ($icon_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $icon_id when calling cellsAutoFilterPutWorksheetIconFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/iconFilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($icon_set_type !== null) {
            $queryParams['iconSetType'] = ObjectSerializer::toQueryValue($icon_set_type);
        }
        // query params
        if ($icon_id !== null) {
            $queryParams['iconId'] = ObjectSerializer::toQueryValue($icon_id);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
