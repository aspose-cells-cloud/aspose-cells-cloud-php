<?php
/**
 * CellsRangesApi
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aspose\Cells\Cloud\ApiException;
use Aspose\Cells\Cloud\Configuration;
use Aspose\Cells\Cloud\HeaderSelector;
use Aspose\Cells\Cloud\ObjectSerializer;

/**
 * CellsRangesApi Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsRangesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cellsRangesGetWorksheetCellsRangeValue
     *
     * Get cells list in a range by range name or row column indexes
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param  int $first_row the first row of the range (optional)
     * @param  int $first_column the first column of the range (optional)
     * @param  int $row_count the count of rows in the range (optional)
     * @param  int $column_count the count of columns in the range (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\RangeValueResponse
     */
    public function cellsRangesGetWorksheetCellsRangeValue($name, $sheet_name, $namerange = null, $first_row = null, $first_column = null, $row_count = null, $column_count = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsRangesGetWorksheetCellsRangeValueWithHttpInfo($name, $sheet_name, $namerange, $first_row, $first_column, $row_count, $column_count, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsRangesGetWorksheetCellsRangeValueWithHttpInfo
     *
     * Get cells list in a range by range name or row column indexes
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param  int $first_row the first row of the range (optional)
     * @param  int $first_column the first column of the range (optional)
     * @param  int $row_count the count of rows in the range (optional)
     * @param  int $column_count the count of columns in the range (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\RangeValueResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsRangesGetWorksheetCellsRangeValueWithHttpInfo($name, $sheet_name, $namerange = null, $first_row = null, $first_column = null, $row_count = null, $column_count = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RangeValueResponse';
        $request = $this->cellsRangesGetWorksheetCellsRangeValueRequest($name, $sheet_name, $namerange, $first_row, $first_column, $row_count, $column_count, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\RangeValueResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesGetWorksheetCellsRangeValueAsync
     *
     * Get cells list in a range by range name or row column indexes
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param  int $first_row the first row of the range (optional)
     * @param  int $first_column the first column of the range (optional)
     * @param  int $row_count the count of rows in the range (optional)
     * @param  int $column_count the count of columns in the range (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesGetWorksheetCellsRangeValueAsync($name, $sheet_name, $namerange = null, $first_row = null, $first_column = null, $row_count = null, $column_count = null, $folder = null, $storage = null)
    {
        return $this->cellsRangesGetWorksheetCellsRangeValueAsyncWithHttpInfo($name, $sheet_name, $namerange, $first_row, $first_column, $row_count, $column_count, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesGetWorksheetCellsRangeValueAsyncWithHttpInfo
     *
     * Get cells list in a range by range name or row column indexes
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param  int $first_row the first row of the range (optional)
     * @param  int $first_column the first column of the range (optional)
     * @param  int $row_count the count of rows in the range (optional)
     * @param  int $column_count the count of columns in the range (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesGetWorksheetCellsRangeValueAsyncWithHttpInfo($name, $sheet_name, $namerange = null, $first_row = null, $first_column = null, $row_count = null, $column_count = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RangeValueResponse';
        $request = $this->cellsRangesGetWorksheetCellsRangeValueRequest($name, $sheet_name, $namerange, $first_row, $first_column, $row_count, $column_count, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesGetWorksheetCellsRangeValue'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param  int $first_row the first row of the range (optional)
     * @param  int $first_column the first column of the range (optional)
     * @param  int $row_count the count of rows in the range (optional)
     * @param  int $column_count the count of columns in the range (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsRangesGetWorksheetCellsRangeValueRequest($name, $sheet_name, $namerange = null, $first_row = null, $first_column = null, $row_count = null, $column_count = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesGetWorksheetCellsRangeValue'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesGetWorksheetCellsRangeValue'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($namerange !== null) {
            $queryParams['namerange'] = ObjectSerializer::toQueryValue($namerange);
        }
        // query params
        if ($first_row !== null) {
            $queryParams['firstRow'] = ObjectSerializer::toQueryValue($first_row);
        }
        // query params
        if ($first_column !== null) {
            $queryParams['firstColumn'] = ObjectSerializer::toQueryValue($first_column);
        }
        // query params
        if ($row_count !== null) {
            $queryParams['rowCount'] = ObjectSerializer::toQueryValue($row_count);
        }
        // query params
        if ($column_count !== null) {
            $queryParams['columnCount'] = ObjectSerializer::toQueryValue($column_count);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeColumnWidth
     *
     * Set column width of range
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  double $value value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsRangesPostWorksheetCellsRangeColumnWidth($name, $sheet_name, $value, $range = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo($name, $sheet_name, $value, $range, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo
     *
     * Set column width of range
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo($name, $sheet_name, $value, $range = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeColumnWidthRequest($name, $sheet_name, $value, $range, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeColumnWidthAsync
     *
     * Set column width of range
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeColumnWidthAsync($name, $sheet_name, $value, $range = null, $folder = null, $storage = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeColumnWidthAsyncWithHttpInfo($name, $sheet_name, $value, $range, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeColumnWidthAsyncWithHttpInfo
     *
     * Set column width of range
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeColumnWidthAsyncWithHttpInfo($name, $sheet_name, $value, $range = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeColumnWidthRequest($name, $sheet_name, $value, $range, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeColumnWidth'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsRangesPostWorksheetCellsRangeColumnWidthRequest($name, $sheet_name, $value, $range = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeColumnWidth'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeColumnWidth'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling cellsRangesPostWorksheetCellsRangeColumnWidth'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/columnWidth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($range)) {
            $_tempBody = $range;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMerge
     *
     * Combines a range of cells into a single cell.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsRangesPostWorksheetCellsRangeMerge($name, $sheet_name, $range = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsRangesPostWorksheetCellsRangeMergeWithHttpInfo($name, $sheet_name, $range, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMergeWithHttpInfo
     *
     * Combines a range of cells into a single cell.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsRangesPostWorksheetCellsRangeMergeWithHttpInfo($name, $sheet_name, $range = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeMergeRequest($name, $sheet_name, $range, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMergeAsync
     *
     * Combines a range of cells into a single cell.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeMergeAsync($name, $sheet_name, $range = null, $folder = null, $storage = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeMergeAsyncWithHttpInfo($name, $sheet_name, $range, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMergeAsyncWithHttpInfo
     *
     * Combines a range of cells into a single cell.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeMergeAsyncWithHttpInfo($name, $sheet_name, $range = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeMergeRequest($name, $sheet_name, $range, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeMerge'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsRangesPostWorksheetCellsRangeMergeRequest($name, $sheet_name, $range = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeMerge'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeMerge'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($range)) {
            $_tempBody = $range;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMoveTo
     *
     * Move the current range to the dest range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  int $dest_row The start row of the dest range. (required)
     * @param  int $dest_column The start column of the dest range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsRangesPostWorksheetCellsRangeMoveTo($name, $sheet_name, $dest_row, $dest_column, $range = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo($name, $sheet_name, $dest_row, $dest_column, $range, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo
     *
     * Move the current range to the dest range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  int $dest_row The start row of the dest range. (required)
     * @param  int $dest_column The start column of the dest range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo($name, $sheet_name, $dest_row, $dest_column, $range = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeMoveToRequest($name, $sheet_name, $dest_row, $dest_column, $range, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMoveToAsync
     *
     * Move the current range to the dest range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  int $dest_row The start row of the dest range. (required)
     * @param  int $dest_column The start column of the dest range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeMoveToAsync($name, $sheet_name, $dest_row, $dest_column, $range = null, $folder = null, $storage = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeMoveToAsyncWithHttpInfo($name, $sheet_name, $dest_row, $dest_column, $range, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMoveToAsyncWithHttpInfo
     *
     * Move the current range to the dest range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  int $dest_row The start row of the dest range. (required)
     * @param  int $dest_column The start column of the dest range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeMoveToAsyncWithHttpInfo($name, $sheet_name, $dest_row, $dest_column, $range = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeMoveToRequest($name, $sheet_name, $dest_row, $dest_column, $range, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeMoveTo'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  int $dest_row The start row of the dest range. (required)
     * @param  int $dest_column The start column of the dest range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsRangesPostWorksheetCellsRangeMoveToRequest($name, $sheet_name, $dest_row, $dest_column, $range = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeMoveTo'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeMoveTo'
            );
        }
        // verify the required parameter 'dest_row' is set
        if ($dest_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest_row when calling cellsRangesPostWorksheetCellsRangeMoveTo'
            );
        }
        // verify the required parameter 'dest_column' is set
        if ($dest_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest_column when calling cellsRangesPostWorksheetCellsRangeMoveTo'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/moveto';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dest_row !== null) {
            $queryParams['destRow'] = ObjectSerializer::toQueryValue($dest_row);
        }
        // query params
        if ($dest_column !== null) {
            $queryParams['destColumn'] = ObjectSerializer::toQueryValue($dest_column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($range)) {
            $_tempBody = $range;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeOutlineBorder
     *
     * Sets outline border around a range of cells.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetOutlineBorderRequest $range_operate Range Set OutlineBorder Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsRangesPostWorksheetCellsRangeOutlineBorder($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo($name, $sheet_name, $range_operate, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo
     *
     * Sets outline border around a range of cells.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetOutlineBorderRequest $range_operate Range Set OutlineBorder Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeOutlineBorderRequest($name, $sheet_name, $range_operate, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeOutlineBorderAsync
     *
     * Sets outline border around a range of cells.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetOutlineBorderRequest $range_operate Range Set OutlineBorder Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeOutlineBorderAsync($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeOutlineBorderAsyncWithHttpInfo($name, $sheet_name, $range_operate, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeOutlineBorderAsyncWithHttpInfo
     *
     * Sets outline border around a range of cells.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetOutlineBorderRequest $range_operate Range Set OutlineBorder Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeOutlineBorderAsyncWithHttpInfo($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeOutlineBorderRequest($name, $sheet_name, $range_operate, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeOutlineBorder'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetOutlineBorderRequest $range_operate Range Set OutlineBorder Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsRangesPostWorksheetCellsRangeOutlineBorderRequest($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeOutlineBorder'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeOutlineBorder'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/outlineBorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($range_operate)) {
            $_tempBody = $range_operate;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeRowHeight
     *
     * set row height of range
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  double $value value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsRangesPostWorksheetCellsRangeRowHeight($name, $sheet_name, $value, $range = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo($name, $sheet_name, $value, $range, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo
     *
     * set row height of range
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo($name, $sheet_name, $value, $range = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeRowHeightRequest($name, $sheet_name, $value, $range, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeRowHeightAsync
     *
     * set row height of range
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeRowHeightAsync($name, $sheet_name, $value, $range = null, $folder = null, $storage = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeRowHeightAsyncWithHttpInfo($name, $sheet_name, $value, $range, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeRowHeightAsyncWithHttpInfo
     *
     * set row height of range
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeRowHeightAsyncWithHttpInfo($name, $sheet_name, $value, $range = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeRowHeightRequest($name, $sheet_name, $value, $range, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeRowHeight'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsRangesPostWorksheetCellsRangeRowHeightRequest($name, $sheet_name, $value, $range = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeRowHeight'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeRowHeight'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling cellsRangesPostWorksheetCellsRangeRowHeight'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/rowHeight';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($range)) {
            $_tempBody = $range;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeStyle
     *
     * Sets the style of the range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetStyleRequest $range_operate Range Set Style Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsRangesPostWorksheetCellsRangeStyle($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsRangesPostWorksheetCellsRangeStyleWithHttpInfo($name, $sheet_name, $range_operate, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeStyleWithHttpInfo
     *
     * Sets the style of the range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetStyleRequest $range_operate Range Set Style Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsRangesPostWorksheetCellsRangeStyleWithHttpInfo($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeStyleRequest($name, $sheet_name, $range_operate, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeStyleAsync
     *
     * Sets the style of the range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetStyleRequest $range_operate Range Set Style Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeStyleAsync($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeStyleAsyncWithHttpInfo($name, $sheet_name, $range_operate, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeStyleAsyncWithHttpInfo
     *
     * Sets the style of the range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetStyleRequest $range_operate Range Set Style Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeStyleAsyncWithHttpInfo($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeStyleRequest($name, $sheet_name, $range_operate, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeStyle'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetStyleRequest $range_operate Range Set Style Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsRangesPostWorksheetCellsRangeStyleRequest($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/style';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($range_operate)) {
            $_tempBody = $range_operate;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeUnmerge
     *
     * Unmerges merged cells of this range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsRangesPostWorksheetCellsRangeUnmerge($name, $sheet_name, $range = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo($name, $sheet_name, $range, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo
     *
     * Unmerges merged cells of this range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo($name, $sheet_name, $range = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeUnmergeRequest($name, $sheet_name, $range, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeUnmergeAsync
     *
     * Unmerges merged cells of this range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeUnmergeAsync($name, $sheet_name, $range = null, $folder = null, $storage = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeUnmergeAsyncWithHttpInfo($name, $sheet_name, $range, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeUnmergeAsyncWithHttpInfo
     *
     * Unmerges merged cells of this range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeUnmergeAsyncWithHttpInfo($name, $sheet_name, $range = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeUnmergeRequest($name, $sheet_name, $range, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeUnmerge'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsRangesPostWorksheetCellsRangeUnmergeRequest($name, $sheet_name, $range = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeUnmerge'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeUnmerge'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/unmerge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($range)) {
            $_tempBody = $range;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeValue
     *
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $value Input value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  bool $is_converted True: converted to other data type if appropriate. (optional, default to false)
     * @param  bool $set_style True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsRangesPostWorksheetCellsRangeValue($name, $sheet_name, $value, $range = null, $is_converted = 'false', $set_style = 'false', $folder = null, $storage = null)
    {
        list($response) = $this->cellsRangesPostWorksheetCellsRangeValueWithHttpInfo($name, $sheet_name, $value, $range, $is_converted, $set_style, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeValueWithHttpInfo
     *
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $value Input value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  bool $is_converted True: converted to other data type if appropriate. (optional, default to false)
     * @param  bool $set_style True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsRangesPostWorksheetCellsRangeValueWithHttpInfo($name, $sheet_name, $value, $range = null, $is_converted = 'false', $set_style = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeValueRequest($name, $sheet_name, $value, $range, $is_converted, $set_style, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeValueAsync
     *
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $value Input value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  bool $is_converted True: converted to other data type if appropriate. (optional, default to false)
     * @param  bool $set_style True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeValueAsync($name, $sheet_name, $value, $range = null, $is_converted = 'false', $set_style = 'false', $folder = null, $storage = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeValueAsyncWithHttpInfo($name, $sheet_name, $value, $range, $is_converted, $set_style, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeValueAsyncWithHttpInfo
     *
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $value Input value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  bool $is_converted True: converted to other data type if appropriate. (optional, default to false)
     * @param  bool $set_style True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangeValueAsyncWithHttpInfo($name, $sheet_name, $value, $range = null, $is_converted = 'false', $set_style = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeValueRequest($name, $sheet_name, $value, $range, $is_converted, $set_style, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeValue'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $value Input value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  bool $is_converted True: converted to other data type if appropriate. (optional, default to false)
     * @param  bool $set_style True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsRangesPostWorksheetCellsRangeValueRequest($name, $sheet_name, $value, $range = null, $is_converted = 'false', $set_style = 'false', $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeValue'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeValue'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling cellsRangesPostWorksheetCellsRangeValue'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($value !== null) {
            $queryParams['Value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($is_converted !== null) {
            $queryParams['isConverted'] = ObjectSerializer::toQueryValue($is_converted);
        }
        // query params
        if ($set_style !== null) {
            $queryParams['setStyle'] = ObjectSerializer::toQueryValue($set_style);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($range)) {
            $_tempBody = $range;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRanges
     *
     * copy range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeCopyRequest $range_operate copydata,copystyle,copyto,copyvalue (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsRangesPostWorksheetCellsRanges($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsRangesPostWorksheetCellsRangesWithHttpInfo($name, $sheet_name, $range_operate, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangesWithHttpInfo
     *
     * copy range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeCopyRequest $range_operate copydata,copystyle,copyto,copyvalue (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsRangesPostWorksheetCellsRangesWithHttpInfo($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangesRequest($name, $sheet_name, $range_operate, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangesAsync
     *
     * copy range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeCopyRequest $range_operate copydata,copystyle,copyto,copyvalue (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangesAsync($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangesAsyncWithHttpInfo($name, $sheet_name, $range_operate, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangesAsyncWithHttpInfo
     *
     * copy range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeCopyRequest $range_operate copydata,copystyle,copyto,copyvalue (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsRangesPostWorksheetCellsRangesAsyncWithHttpInfo($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangesRequest($name, $sheet_name, $range_operate, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRanges'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeCopyRequest $range_operate copydata,copystyle,copyto,copyvalue (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsRangesPostWorksheetCellsRangesRequest($name, $sheet_name, $range_operate = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRanges'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRanges'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($range_operate)) {
            $_tempBody = $range_operate;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
