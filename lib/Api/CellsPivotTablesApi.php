<?php
/**
 * CellsPivotTablesApi
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aspose\Cells\Cloud\ApiException;
use Aspose\Cells\Cloud\Configuration;
use Aspose\Cells\Cloud\HeaderSelector;
use Aspose\Cells\Cloud\ObjectSerializer;

/**
 * CellsPivotTablesApi Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsPivotTablesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cellsPivotTablesDeletePivotTableField
     *
     * Delete pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPivotTablesDeletePivotTableField($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesDeletePivotTableFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesDeletePivotTableFieldWithHttpInfo
     *
     * Delete pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesDeletePivotTableFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesDeletePivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesDeletePivotTableFieldAsync
     *
     * Delete pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesDeletePivotTableFieldAsync($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesDeletePivotTableFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesDeletePivotTableFieldAsyncWithHttpInfo
     *
     * Delete pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesDeletePivotTableFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesDeletePivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesDeletePivotTableField'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesDeletePivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesDeletePivotTableField'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesDeletePivotTableField'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesDeletePivotTableField'
            );
        }
        // verify the required parameter 'pivot_field_type' is set
        if ($pivot_field_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field_type when calling cellsPivotTablesDeletePivotTableField'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pivot_field_type !== null) {
            $queryParams['pivotFieldType'] = ObjectSerializer::toQueryValue($pivot_field_type);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTable
     *
     * Delete worksheet pivot table by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPivotTablesDeleteWorksheetPivotTable($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo
     *
     * Delete worksheet pivot table by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTableRequest($name, $sheet_name, $pivot_table_index, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableAsync
     *
     * Delete worksheet pivot table by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableAsync($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesDeleteWorksheetPivotTableAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableAsyncWithHttpInfo
     *
     * Delete worksheet pivot table by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTableRequest($name, $sheet_name, $pivot_table_index, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesDeleteWorksheetPivotTable'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesDeleteWorksheetPivotTableRequest($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesDeleteWorksheetPivotTable'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesDeleteWorksheetPivotTable'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesDeleteWorksheetPivotTable'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFilter
     *
     * delete  pivot filter for piovt table
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  int $field_index field_index (required)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFilter($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo
     *
     * delete  pivot filter for piovt table
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFilterAsync
     *
     * delete  pivot filter for piovt table
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFilterAsync($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesDeleteWorksheetPivotTableFilterAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFilterAsyncWithHttpInfo
     *
     * delete  pivot filter for piovt table
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFilterAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesDeleteWorksheetPivotTableFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesDeleteWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesDeleteWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesDeleteWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesDeleteWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsPivotTablesDeleteWorksheetPivotTableFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{fieldIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }
        // path params
        if ($field_index !== null) {
            $resourcePath = str_replace(
                '{' . 'fieldIndex' . '}',
                ObjectSerializer::toPathValue($field_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFilters
     *
     * delete all pivot filters for piovt table
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFilters($name, $sheet_name, $pivot_table_index, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo($name, $sheet_name, $pivot_table_index, $need_re_calculate, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo
     *
     * delete all pivot filters for piovt table
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo($name, $sheet_name, $pivot_table_index, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTableFiltersRequest($name, $sheet_name, $pivot_table_index, $need_re_calculate, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFiltersAsync
     *
     * delete all pivot filters for piovt table
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFiltersAsync($name, $sheet_name, $pivot_table_index, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesDeleteWorksheetPivotTableFiltersAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $need_re_calculate, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFiltersAsyncWithHttpInfo
     *
     * delete all pivot filters for piovt table
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFiltersAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTableFiltersRequest($name, $sheet_name, $pivot_table_index, $need_re_calculate, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesDeleteWorksheetPivotTableFilters'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesDeleteWorksheetPivotTableFiltersRequest($name, $sheet_name, $pivot_table_index, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesDeleteWorksheetPivotTableFilters'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesDeleteWorksheetPivotTableFilters'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesDeleteWorksheetPivotTableFilters'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTables
     *
     * Delete worksheet pivot tables
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPivotTablesDeleteWorksheetPivotTables($name, $sheet_name, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo($name, $sheet_name, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo
     *
     * Delete worksheet pivot tables
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTablesRequest($name, $sheet_name, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTablesAsync
     *
     * Delete worksheet pivot tables
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesDeleteWorksheetPivotTablesAsync($name, $sheet_name, $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesDeleteWorksheetPivotTablesAsyncWithHttpInfo($name, $sheet_name, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTablesAsyncWithHttpInfo
     *
     * Delete worksheet pivot tables
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesDeleteWorksheetPivotTablesAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTablesRequest($name, $sheet_name, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesDeleteWorksheetPivotTables'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesDeleteWorksheetPivotTablesRequest($name, $sheet_name, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesDeleteWorksheetPivotTables'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesDeleteWorksheetPivotTables'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesGetPivotTableField
     *
     * Get pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $pivot_field_index The field index in the base fields. (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PivotFieldResponse
     */
    public function cellsPivotTablesGetPivotTableField($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesGetPivotTableFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesGetPivotTableFieldWithHttpInfo
     *
     * Get pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $pivot_field_index The field index in the base fields. (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PivotFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesGetPivotTableFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFieldResponse';
        $request = $this->cellsPivotTablesGetPivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PivotFieldResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesGetPivotTableFieldAsync
     *
     * Get pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $pivot_field_index The field index in the base fields. (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesGetPivotTableFieldAsync($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesGetPivotTableFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesGetPivotTableFieldAsyncWithHttpInfo
     *
     * Get pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $pivot_field_index The field index in the base fields. (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesGetPivotTableFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFieldResponse';
        $request = $this->cellsPivotTablesGetPivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesGetPivotTableField'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $pivot_field_index The field index in the base fields. (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesGetPivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesGetPivotTableField'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesGetPivotTableField'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesGetPivotTableField'
            );
        }
        // verify the required parameter 'pivot_field_index' is set
        if ($pivot_field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field_index when calling cellsPivotTablesGetPivotTableField'
            );
        }
        // verify the required parameter 'pivot_field_type' is set
        if ($pivot_field_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field_type when calling cellsPivotTablesGetPivotTableField'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pivot_field_index !== null) {
            $queryParams['pivotFieldIndex'] = ObjectSerializer::toQueryValue($pivot_field_index);
        }
        // query params
        if ($pivot_field_type !== null) {
            $queryParams['pivotFieldType'] = ObjectSerializer::toQueryValue($pivot_field_type);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTable
     *
     * Get worksheet pivottable info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivottable_index pivottable_index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PivotTableResponse
     */
    public function cellsPivotTablesGetWorksheetPivotTable($name, $sheet_name, $pivottable_index, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesGetWorksheetPivotTableWithHttpInfo($name, $sheet_name, $pivottable_index, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableWithHttpInfo
     *
     * Get worksheet pivottable info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivottable_index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PivotTableResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesGetWorksheetPivotTableWithHttpInfo($name, $sheet_name, $pivottable_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotTableResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTableRequest($name, $sheet_name, $pivottable_index, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PivotTableResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableAsync
     *
     * Get worksheet pivottable info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivottable_index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesGetWorksheetPivotTableAsync($name, $sheet_name, $pivottable_index, $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesGetWorksheetPivotTableAsyncWithHttpInfo($name, $sheet_name, $pivottable_index, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableAsyncWithHttpInfo
     *
     * Get worksheet pivottable info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivottable_index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesGetWorksheetPivotTableAsyncWithHttpInfo($name, $sheet_name, $pivottable_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotTableResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTableRequest($name, $sheet_name, $pivottable_index, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesGetWorksheetPivotTable'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivottable_index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesGetWorksheetPivotTableRequest($name, $sheet_name, $pivottable_index, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesGetWorksheetPivotTable'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesGetWorksheetPivotTable'
            );
        }
        // verify the required parameter 'pivottable_index' is set
        if ($pivottable_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivottable_index when calling cellsPivotTablesGetWorksheetPivotTable'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivottableIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivottable_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivottableIndex' . '}',
                ObjectSerializer::toPathValue($pivottable_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFilter
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  int $filter_index filter_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PivotFilterResponse
     */
    public function cellsPivotTablesGetWorksheetPivotTableFilter($name, $sheet_name, $pivot_table_index, $filter_index, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter_index, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $filter_index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PivotFilterResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFilterResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $filter_index, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PivotFilterResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFilterAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $filter_index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesGetWorksheetPivotTableFilterAsync($name, $sheet_name, $pivot_table_index, $filter_index, $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesGetWorksheetPivotTableFilterAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter_index, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFilterAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $filter_index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesGetWorksheetPivotTableFilterAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFilterResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $filter_index, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesGetWorksheetPivotTableFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $filter_index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesGetWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $filter_index, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesGetWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesGetWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesGetWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'filter_index' is set
        if ($filter_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_index when calling cellsPivotTablesGetWorksheetPivotTableFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{filterIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }
        // path params
        if ($filter_index !== null) {
            $resourcePath = str_replace(
                '{' . 'filterIndex' . '}',
                ObjectSerializer::toPathValue($filter_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFilters
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PivotFiltersResponse
     */
    public function cellsPivotTablesGetWorksheetPivotTableFilters($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PivotFiltersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFiltersResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTableFiltersRequest($name, $sheet_name, $pivot_table_index, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PivotFiltersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFiltersAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesGetWorksheetPivotTableFiltersAsync($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesGetWorksheetPivotTableFiltersAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFiltersAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesGetWorksheetPivotTableFiltersAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFiltersResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTableFiltersRequest($name, $sheet_name, $pivot_table_index, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesGetWorksheetPivotTableFilters'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesGetWorksheetPivotTableFiltersRequest($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesGetWorksheetPivotTableFilters'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesGetWorksheetPivotTableFilters'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesGetWorksheetPivotTableFilters'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTables
     *
     * Get worksheet pivottables info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PivotTablesResponse
     */
    public function cellsPivotTablesGetWorksheetPivotTables($name, $sheet_name, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesGetWorksheetPivotTablesWithHttpInfo($name, $sheet_name, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTablesWithHttpInfo
     *
     * Get worksheet pivottables info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PivotTablesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesGetWorksheetPivotTablesWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotTablesResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTablesRequest($name, $sheet_name, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PivotTablesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTablesAsync
     *
     * Get worksheet pivottables info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesGetWorksheetPivotTablesAsync($name, $sheet_name, $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesGetWorksheetPivotTablesAsyncWithHttpInfo($name, $sheet_name, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTablesAsyncWithHttpInfo
     *
     * Get worksheet pivottables info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesGetWorksheetPivotTablesAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotTablesResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTablesRequest($name, $sheet_name, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesGetWorksheetPivotTables'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesGetWorksheetPivotTablesRequest($name, $sheet_name, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesGetWorksheetPivotTables'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesGetWorksheetPivotTables'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableCellStyle
     *
     * Update cell style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $column column (required)
     * @param  int $row row (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPivotTablesPostPivotTableCellStyle($name, $sheet_name, $pivot_table_index, $column, $row, $style = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesPostPivotTableCellStyleWithHttpInfo($name, $sheet_name, $pivot_table_index, $column, $row, $style, $need_re_calculate, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostPivotTableCellStyleWithHttpInfo
     *
     * Update cell style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $column (required)
     * @param  int $row (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesPostPivotTableCellStyleWithHttpInfo($name, $sheet_name, $pivot_table_index, $column, $row, $style = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPostPivotTableCellStyleRequest($name, $sheet_name, $pivot_table_index, $column, $row, $style, $need_re_calculate, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostPivotTableCellStyleAsync
     *
     * Update cell style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $column (required)
     * @param  int $row (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPostPivotTableCellStyleAsync($name, $sheet_name, $pivot_table_index, $column, $row, $style = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesPostPivotTableCellStyleAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $column, $row, $style, $need_re_calculate, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableCellStyleAsyncWithHttpInfo
     *
     * Update cell style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $column (required)
     * @param  int $row (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPostPivotTableCellStyleAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $column, $row, $style = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPostPivotTableCellStyleRequest($name, $sheet_name, $pivot_table_index, $column, $row, $style, $need_re_calculate, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostPivotTableCellStyle'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $column (required)
     * @param  int $row (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesPostPivotTableCellStyleRequest($name, $sheet_name, $pivot_table_index, $column, $row, $style = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostPivotTableCellStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostPivotTableCellStyle'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostPivotTableCellStyle'
            );
        }
        // verify the required parameter 'column' is set
        if ($column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column when calling cellsPivotTablesPostPivotTableCellStyle'
            );
        }
        // verify the required parameter 'row' is set
        if ($row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row when calling cellsPivotTablesPostPivotTableCellStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Format';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($style)) {
            $_tempBody = $style;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldHideItem
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  string $pivot_field_type pivot_field_type (required)
     * @param  int $field_index field_index (required)
     * @param  int $item_index item_index (required)
     * @param  bool $is_hide is_hide (required)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPivotTablesPostPivotTableFieldHideItem($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $pivot_field_type (required)
     * @param  int $field_index (required)
     * @param  int $item_index (required)
     * @param  bool $is_hide (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPostPivotTableFieldHideItemRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldHideItemAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $pivot_field_type (required)
     * @param  int $field_index (required)
     * @param  int $item_index (required)
     * @param  bool $is_hide (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPostPivotTableFieldHideItemAsync($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesPostPivotTableFieldHideItemAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldHideItemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $pivot_field_type (required)
     * @param  int $field_index (required)
     * @param  int $item_index (required)
     * @param  bool $is_hide (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPostPivotTableFieldHideItemAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPostPivotTableFieldHideItemRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostPivotTableFieldHideItem'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $pivot_field_type (required)
     * @param  int $field_index (required)
     * @param  int $item_index (required)
     * @param  bool $is_hide (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesPostPivotTableFieldHideItemRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }
        // verify the required parameter 'pivot_field_type' is set
        if ($pivot_field_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field_type when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }
        // verify the required parameter 'item_index' is set
        if ($item_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_index when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }
        // verify the required parameter 'is_hide' is set
        if ($is_hide === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_hide when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Hide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pivot_field_type !== null) {
            $queryParams['pivotFieldType'] = ObjectSerializer::toQueryValue($pivot_field_type);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($item_index !== null) {
            $queryParams['itemIndex'] = ObjectSerializer::toQueryValue($item_index);
        }
        // query params
        if ($is_hide !== null) {
            $queryParams['isHide'] = ObjectSerializer::toQueryValue($is_hide);
        }
        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldMoveTo
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  int $field_index field_index (required)
     * @param  string $from from (required)
     * @param  string $to to (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPivotTablesPostPivotTableFieldMoveTo($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPostPivotTableFieldMoveToRequest($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldMoveToAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPostPivotTableFieldMoveToAsync($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesPostPivotTableFieldMoveToAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldMoveToAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPostPivotTableFieldMoveToAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPostPivotTableFieldMoveToRequest($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostPivotTableFieldMoveTo'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesPostPivotTableFieldMoveToRequest($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostPivotTableFieldMoveTo'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostPivotTableFieldMoveTo'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostPivotTableFieldMoveTo'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsPivotTablesPostPivotTableFieldMoveTo'
            );
        }
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling cellsPivotTablesPostPivotTableFieldMoveTo'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling cellsPivotTablesPostPivotTableFieldMoveTo'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Move';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableStyle
     *
     * Update style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPivotTablesPostPivotTableStyle($name, $sheet_name, $pivot_table_index, $style = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesPostPivotTableStyleWithHttpInfo($name, $sheet_name, $pivot_table_index, $style, $need_re_calculate, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostPivotTableStyleWithHttpInfo
     *
     * Update style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesPostPivotTableStyleWithHttpInfo($name, $sheet_name, $pivot_table_index, $style = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPostPivotTableStyleRequest($name, $sheet_name, $pivot_table_index, $style, $need_re_calculate, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostPivotTableStyleAsync
     *
     * Update style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPostPivotTableStyleAsync($name, $sheet_name, $pivot_table_index, $style = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesPostPivotTableStyleAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $style, $need_re_calculate, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableStyleAsyncWithHttpInfo
     *
     * Update style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPostPivotTableStyleAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $style = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPostPivotTableStyleRequest($name, $sheet_name, $pivot_table_index, $style, $need_re_calculate, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostPivotTableStyle'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesPostPivotTableStyleRequest($name, $sheet_name, $pivot_table_index, $style = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostPivotTableStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostPivotTableStyle'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostPivotTableStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/FormatAll';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($style)) {
            $_tempBody = $style;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableCalculate
     *
     * Calculates pivottable's data to cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPivotTablesPostWorksheetPivotTableCalculate($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo
     *
     * Calculates pivottable's data to cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPostWorksheetPivotTableCalculateRequest($name, $sheet_name, $pivot_table_index, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableCalculateAsync
     *
     * Calculates pivottable's data to cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPostWorksheetPivotTableCalculateAsync($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesPostWorksheetPivotTableCalculateAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableCalculateAsyncWithHttpInfo
     *
     * Calculates pivottable's data to cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPostWorksheetPivotTableCalculateAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPostWorksheetPivotTableCalculateRequest($name, $sheet_name, $pivot_table_index, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostWorksheetPivotTableCalculate'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesPostWorksheetPivotTableCalculateRequest($name, $sheet_name, $pivot_table_index, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostWorksheetPivotTableCalculate'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostWorksheetPivotTableCalculate'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostWorksheetPivotTableCalculate'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Calculate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableMove
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  int $row row (optional)
     * @param  int $column column (optional)
     * @param  string $dest_cell_name dest_cell_name (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPivotTablesPostWorksheetPivotTableMove($name, $sheet_name, $pivot_table_index, $row = null, $column = null, $dest_cell_name = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo($name, $sheet_name, $pivot_table_index, $row, $column, $dest_cell_name, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  string $dest_cell_name (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo($name, $sheet_name, $pivot_table_index, $row = null, $column = null, $dest_cell_name = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPostWorksheetPivotTableMoveRequest($name, $sheet_name, $pivot_table_index, $row, $column, $dest_cell_name, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableMoveAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  string $dest_cell_name (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPostWorksheetPivotTableMoveAsync($name, $sheet_name, $pivot_table_index, $row = null, $column = null, $dest_cell_name = null, $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesPostWorksheetPivotTableMoveAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $row, $column, $dest_cell_name, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableMoveAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  string $dest_cell_name (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPostWorksheetPivotTableMoveAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $row = null, $column = null, $dest_cell_name = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPostWorksheetPivotTableMoveRequest($name, $sheet_name, $pivot_table_index, $row, $column, $dest_cell_name, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostWorksheetPivotTableMove'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  string $dest_cell_name (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesPostWorksheetPivotTableMoveRequest($name, $sheet_name, $pivot_table_index, $row = null, $column = null, $dest_cell_name = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostWorksheetPivotTableMove'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostWorksheetPivotTableMove'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostWorksheetPivotTableMove'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Move';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($dest_cell_name !== null) {
            $queryParams['destCellName'] = ObjectSerializer::toQueryValue($dest_cell_name);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPutPivotTableField
     *
     * Add pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPivotTablesPutPivotTableField($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesPutPivotTableFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $need_re_calculate, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPutPivotTableFieldWithHttpInfo
     *
     * Add pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesPutPivotTableFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPutPivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $need_re_calculate, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPutPivotTableFieldAsync
     *
     * Add pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPutPivotTableFieldAsync($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesPutPivotTableFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $need_re_calculate, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPutPivotTableFieldAsyncWithHttpInfo
     *
     * Add pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPutPivotTableFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPutPivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $need_re_calculate, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPutPivotTableField'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesPutPivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPutPivotTableField'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPutPivotTableField'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPutPivotTableField'
            );
        }
        // verify the required parameter 'pivot_field_type' is set
        if ($pivot_field_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field_type when calling cellsPivotTablesPutPivotTableField'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pivot_field_type !== null) {
            $queryParams['pivotFieldType'] = ObjectSerializer::toQueryValue($pivot_field_type);
        }
        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTable
     *
     * Add a pivot table into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request CreatePivotTableRequest dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     * @param  string $source_data The data for the new PivotTable cache. (optional)
     * @param  string $dest_cell_name The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param  string $table_name The name of the new PivotTable report. (optional)
     * @param  bool $use_same_source Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PivotTableResponse
     */
    public function cellsPivotTablesPutWorksheetPivotTable($name, $sheet_name, $request = null, $folder = null, $storage = null, $source_data = null, $dest_cell_name = null, $table_name = null, $use_same_source = null)
    {
        list($response) = $this->cellsPivotTablesPutWorksheetPivotTableWithHttpInfo($name, $sheet_name, $request, $folder, $storage, $source_data, $dest_cell_name, $table_name, $use_same_source);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableWithHttpInfo
     *
     * Add a pivot table into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request CreatePivotTableRequest dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     * @param  string $source_data The data for the new PivotTable cache. (optional)
     * @param  string $dest_cell_name The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param  string $table_name The name of the new PivotTable report. (optional)
     * @param  bool $use_same_source Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PivotTableResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesPutWorksheetPivotTableWithHttpInfo($name, $sheet_name, $request = null, $folder = null, $storage = null, $source_data = null, $dest_cell_name = null, $table_name = null, $use_same_source = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotTableResponse';
        $request = $this->cellsPivotTablesPutWorksheetPivotTableRequest($name, $sheet_name, $request, $folder, $storage, $source_data, $dest_cell_name, $table_name, $use_same_source);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PivotTableResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableAsync
     *
     * Add a pivot table into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request CreatePivotTableRequest dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     * @param  string $source_data The data for the new PivotTable cache. (optional)
     * @param  string $dest_cell_name The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param  string $table_name The name of the new PivotTable report. (optional)
     * @param  bool $use_same_source Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPutWorksheetPivotTableAsync($name, $sheet_name, $request = null, $folder = null, $storage = null, $source_data = null, $dest_cell_name = null, $table_name = null, $use_same_source = null)
    {
        return $this->cellsPivotTablesPutWorksheetPivotTableAsyncWithHttpInfo($name, $sheet_name, $request, $folder, $storage, $source_data, $dest_cell_name, $table_name, $use_same_source)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableAsyncWithHttpInfo
     *
     * Add a pivot table into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request CreatePivotTableRequest dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     * @param  string $source_data The data for the new PivotTable cache. (optional)
     * @param  string $dest_cell_name The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param  string $table_name The name of the new PivotTable report. (optional)
     * @param  bool $use_same_source Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPutWorksheetPivotTableAsyncWithHttpInfo($name, $sheet_name, $request = null, $folder = null, $storage = null, $source_data = null, $dest_cell_name = null, $table_name = null, $use_same_source = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotTableResponse';
        $request = $this->cellsPivotTablesPutWorksheetPivotTableRequest($name, $sheet_name, $request, $folder, $storage, $source_data, $dest_cell_name, $table_name, $use_same_source);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPutWorksheetPivotTable'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request CreatePivotTableRequest dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     * @param  string $source_data The data for the new PivotTable cache. (optional)
     * @param  string $dest_cell_name The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param  string $table_name The name of the new PivotTable report. (optional)
     * @param  bool $use_same_source Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesPutWorksheetPivotTableRequest($name, $sheet_name, $request = null, $folder = null, $storage = null, $source_data = null, $dest_cell_name = null, $table_name = null, $use_same_source = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPutWorksheetPivotTable'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPutWorksheetPivotTable'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($source_data !== null) {
            $queryParams['sourceData'] = ObjectSerializer::toQueryValue($source_data);
        }
        // query params
        if ($dest_cell_name !== null) {
            $queryParams['destCellName'] = ObjectSerializer::toQueryValue($dest_cell_name);
        }
        // query params
        if ($table_name !== null) {
            $queryParams['tableName'] = ObjectSerializer::toQueryValue($table_name);
        }
        // query params
        if ($use_same_source !== null) {
            $queryParams['useSameSource'] = ObjectSerializer::toQueryValue($use_same_source);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableFilter
     *
     * Add pivot filter for piovt table index
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotFilter $filter filter (optional)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPivotTablesPutWorksheetPivotTableFilter($name, $sheet_name, $pivot_table_index, $filter = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        list($response) = $this->cellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter, $need_re_calculate, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo
     *
     * Add pivot filter for piovt table index
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotFilter $filter (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPutWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $filter, $need_re_calculate, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableFilterAsync
     *
     * Add pivot filter for piovt table index
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotFilter $filter (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPutWorksheetPivotTableFilterAsync($name, $sheet_name, $pivot_table_index, $filter = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        return $this->cellsPivotTablesPutWorksheetPivotTableFilterAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter, $need_re_calculate, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableFilterAsyncWithHttpInfo
     *
     * Add pivot filter for piovt table index
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotFilter $filter (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPivotTablesPutWorksheetPivotTableFilterAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPivotTablesPutWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $filter, $need_re_calculate, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPutWorksheetPivotTableFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotFilter $filter (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPivotTablesPutWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $filter = null, $need_re_calculate = 'false', $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPutWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPutWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPutWorksheetPivotTableFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($filter)) {
            $_tempBody = $filter;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
