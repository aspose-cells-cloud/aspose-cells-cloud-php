<?php
/**
 * CellsChartsApi
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aspose\Cells\Cloud\ApiException;
use Aspose\Cells\Cloud\Configuration;
use Aspose\Cells\Cloud\HeaderSelector;
use Aspose\Cells\Cloud\ObjectSerializer;

/**
 * CellsChartsApi Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsChartsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartLegend
     *
     * Hide legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsChartsDeleteWorksheetChartLegend($name, $sheet_name, $chart_index, $folder = null)
    {
        list($response) = $this->cellsChartsDeleteWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartLegendWithHttpInfo
     *
     * Hide legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsDeleteWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsChartsDeleteWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartLegendAsync
     *
     * Hide legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsDeleteWorksheetChartLegendAsync($name, $sheet_name, $chart_index, $folder = null)
    {
        return $this->cellsChartsDeleteWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartLegendAsyncWithHttpInfo
     *
     * Hide legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsDeleteWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsChartsDeleteWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsDeleteWorksheetChartLegend'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsDeleteWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsDeleteWorksheetChartLegend'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsDeleteWorksheetChartLegend'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsDeleteWorksheetChartLegend'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartTitle
     *
     * Hide title in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsChartsDeleteWorksheetChartTitle($name, $sheet_name, $chart_index, $folder = null)
    {
        list($response) = $this->cellsChartsDeleteWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartTitleWithHttpInfo
     *
     * Hide title in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsDeleteWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsChartsDeleteWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartTitleAsync
     *
     * Hide title in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsDeleteWorksheetChartTitleAsync($name, $sheet_name, $chart_index, $folder = null)
    {
        return $this->cellsChartsDeleteWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartTitleAsyncWithHttpInfo
     *
     * Hide title in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsDeleteWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsChartsDeleteWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsDeleteWorksheetChartTitle'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsDeleteWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsDeleteWorksheetChartTitle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsDeleteWorksheetChartTitle'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsDeleteWorksheetChartTitle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsDeleteWorksheetClearCharts
     *
     * Clear the charts.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsChartsDeleteWorksheetClearCharts($name, $sheet_name, $folder = null)
    {
        list($response) = $this->cellsChartsDeleteWorksheetClearChartsWithHttpInfo($name, $sheet_name, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsDeleteWorksheetClearChartsWithHttpInfo
     *
     * Clear the charts.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsDeleteWorksheetClearChartsWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsChartsDeleteWorksheetClearChartsRequest($name, $sheet_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsDeleteWorksheetClearChartsAsync
     *
     * Clear the charts.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsDeleteWorksheetClearChartsAsync($name, $sheet_name, $folder = null)
    {
        return $this->cellsChartsDeleteWorksheetClearChartsAsyncWithHttpInfo($name, $sheet_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsDeleteWorksheetClearChartsAsyncWithHttpInfo
     *
     * Clear the charts.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsDeleteWorksheetClearChartsAsyncWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsChartsDeleteWorksheetClearChartsRequest($name, $sheet_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsDeleteWorksheetClearCharts'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsDeleteWorksheetClearChartsRequest($name, $sheet_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsDeleteWorksheetClearCharts'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsDeleteWorksheetClearCharts'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsDeleteWorksheetDeleteChart
     *
     * Delete worksheet chart by index.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ChartsResponse
     */
    public function cellsChartsDeleteWorksheetDeleteChart($name, $sheet_name, $chart_index, $folder = null)
    {
        list($response) = $this->cellsChartsDeleteWorksheetDeleteChartWithHttpInfo($name, $sheet_name, $chart_index, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsDeleteWorksheetDeleteChartWithHttpInfo
     *
     * Delete worksheet chart by index.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ChartsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsDeleteWorksheetDeleteChartWithHttpInfo($name, $sheet_name, $chart_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ChartsResponse';
        $request = $this->cellsChartsDeleteWorksheetDeleteChartRequest($name, $sheet_name, $chart_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ChartsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsDeleteWorksheetDeleteChartAsync
     *
     * Delete worksheet chart by index.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsDeleteWorksheetDeleteChartAsync($name, $sheet_name, $chart_index, $folder = null)
    {
        return $this->cellsChartsDeleteWorksheetDeleteChartAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsDeleteWorksheetDeleteChartAsyncWithHttpInfo
     *
     * Delete worksheet chart by index.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsDeleteWorksheetDeleteChartAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ChartsResponse';
        $request = $this->cellsChartsDeleteWorksheetDeleteChartRequest($name, $sheet_name, $chart_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsDeleteWorksheetDeleteChart'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsDeleteWorksheetDeleteChartRequest($name, $sheet_name, $chart_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsDeleteWorksheetDeleteChart'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsDeleteWorksheetDeleteChart'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsDeleteWorksheetDeleteChart'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsGetWorksheetChart
     *
     * Get chart info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_number The chart number. (required)
     * @param  string $format The exported file format. (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function cellsChartsGetWorksheetChart($name, $sheet_name, $chart_number, $format = null, $folder = null)
    {
        list($response) = $this->cellsChartsGetWorksheetChartWithHttpInfo($name, $sheet_name, $chart_number, $format, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsGetWorksheetChartWithHttpInfo
     *
     * Get chart info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_number The chart number. (required)
     * @param  string $format The exported file format. (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsGetWorksheetChartWithHttpInfo($name, $sheet_name, $chart_number, $format = null, $folder = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsChartsGetWorksheetChartRequest($name, $sheet_name, $chart_number, $format, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsGetWorksheetChartAsync
     *
     * Get chart info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_number The chart number. (required)
     * @param  string $format The exported file format. (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsGetWorksheetChartAsync($name, $sheet_name, $chart_number, $format = null, $folder = null)
    {
        return $this->cellsChartsGetWorksheetChartAsyncWithHttpInfo($name, $sheet_name, $chart_number, $format, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsGetWorksheetChartAsyncWithHttpInfo
     *
     * Get chart info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_number The chart number. (required)
     * @param  string $format The exported file format. (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsGetWorksheetChartAsyncWithHttpInfo($name, $sheet_name, $chart_number, $format = null, $folder = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsChartsGetWorksheetChartRequest($name, $sheet_name, $chart_number, $format, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsGetWorksheetChart'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_number The chart number. (required)
     * @param  string $format The exported file format. (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsGetWorksheetChartRequest($name, $sheet_name, $chart_number, $format = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsGetWorksheetChart'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsGetWorksheetChart'
            );
        }
        // verify the required parameter 'chart_number' is set
        if ($chart_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_number when calling cellsChartsGetWorksheetChart'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_number !== null) {
            $resourcePath = str_replace(
                '{' . 'chartNumber' . '}',
                ObjectSerializer::toPathValue($chart_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsGetWorksheetChartLegend
     *
     * Get chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\LegendResponse
     */
    public function cellsChartsGetWorksheetChartLegend($name, $sheet_name, $chart_index, $folder = null)
    {
        list($response) = $this->cellsChartsGetWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsGetWorksheetChartLegendWithHttpInfo
     *
     * Get chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\LegendResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsGetWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\LegendResponse';
        $request = $this->cellsChartsGetWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\LegendResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsGetWorksheetChartLegendAsync
     *
     * Get chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsGetWorksheetChartLegendAsync($name, $sheet_name, $chart_index, $folder = null)
    {
        return $this->cellsChartsGetWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsGetWorksheetChartLegendAsyncWithHttpInfo
     *
     * Get chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsGetWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\LegendResponse';
        $request = $this->cellsChartsGetWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsGetWorksheetChartLegend'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsGetWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsGetWorksheetChartLegend'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsGetWorksheetChartLegend'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsGetWorksheetChartLegend'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsGetWorksheetChartTitle
     *
     * Get chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\TitleResponse
     */
    public function cellsChartsGetWorksheetChartTitle($name, $sheet_name, $chart_index, $folder = null)
    {
        list($response) = $this->cellsChartsGetWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsGetWorksheetChartTitleWithHttpInfo
     *
     * Get chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\TitleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsGetWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TitleResponse';
        $request = $this->cellsChartsGetWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\TitleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsGetWorksheetChartTitleAsync
     *
     * Get chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsGetWorksheetChartTitleAsync($name, $sheet_name, $chart_index, $folder = null)
    {
        return $this->cellsChartsGetWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsGetWorksheetChartTitleAsyncWithHttpInfo
     *
     * Get chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsGetWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TitleResponse';
        $request = $this->cellsChartsGetWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsGetWorksheetChartTitle'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsGetWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsGetWorksheetChartTitle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsGetWorksheetChartTitle'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsGetWorksheetChartTitle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsGetWorksheetCharts
     *
     * Get worksheet charts info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ChartsResponse
     */
    public function cellsChartsGetWorksheetCharts($name, $sheet_name, $folder = null)
    {
        list($response) = $this->cellsChartsGetWorksheetChartsWithHttpInfo($name, $sheet_name, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsGetWorksheetChartsWithHttpInfo
     *
     * Get worksheet charts info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ChartsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsGetWorksheetChartsWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ChartsResponse';
        $request = $this->cellsChartsGetWorksheetChartsRequest($name, $sheet_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ChartsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsGetWorksheetChartsAsync
     *
     * Get worksheet charts info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsGetWorksheetChartsAsync($name, $sheet_name, $folder = null)
    {
        return $this->cellsChartsGetWorksheetChartsAsyncWithHttpInfo($name, $sheet_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsGetWorksheetChartsAsyncWithHttpInfo
     *
     * Get worksheet charts info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsGetWorksheetChartsAsyncWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ChartsResponse';
        $request = $this->cellsChartsGetWorksheetChartsRequest($name, $sheet_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsGetWorksheetCharts'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsGetWorksheetChartsRequest($name, $sheet_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsGetWorksheetCharts'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsGetWorksheetCharts'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPostWorksheetChart
     *
     * Update chart propreties
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $chart_index chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Chart $chart chart (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsChartsPostWorksheetChart($name, $sheet_name, $chart_index, $chart = null, $folder = null)
    {
        list($response) = $this->cellsChartsPostWorksheetChartWithHttpInfo($name, $sheet_name, $chart_index, $chart, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsPostWorksheetChartWithHttpInfo
     *
     * Update chart propreties
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Chart $chart (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsPostWorksheetChartWithHttpInfo($name, $sheet_name, $chart_index, $chart = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsChartsPostWorksheetChartRequest($name, $sheet_name, $chart_index, $chart, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPostWorksheetChartAsync
     *
     * Update chart propreties
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Chart $chart (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsPostWorksheetChartAsync($name, $sheet_name, $chart_index, $chart = null, $folder = null)
    {
        return $this->cellsChartsPostWorksheetChartAsyncWithHttpInfo($name, $sheet_name, $chart_index, $chart, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPostWorksheetChartAsyncWithHttpInfo
     *
     * Update chart propreties
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Chart $chart (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsPostWorksheetChartAsyncWithHttpInfo($name, $sheet_name, $chart_index, $chart = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsChartsPostWorksheetChartRequest($name, $sheet_name, $chart_index, $chart, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPostWorksheetChart'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Chart $chart (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsPostWorksheetChartRequest($name, $sheet_name, $chart_index, $chart = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPostWorksheetChart'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPostWorksheetChart'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPostWorksheetChart'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($chart)) {
            $_tempBody = $chart;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPostWorksheetChartLegend
     *
     * Update chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Legend $legend legend (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\LegendResponse
     */
    public function cellsChartsPostWorksheetChartLegend($name, $sheet_name, $chart_index, $legend = null, $folder = null)
    {
        list($response) = $this->cellsChartsPostWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $legend, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsPostWorksheetChartLegendWithHttpInfo
     *
     * Update chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Legend $legend (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\LegendResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsPostWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $legend = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\LegendResponse';
        $request = $this->cellsChartsPostWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $legend, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\LegendResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPostWorksheetChartLegendAsync
     *
     * Update chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Legend $legend (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsPostWorksheetChartLegendAsync($name, $sheet_name, $chart_index, $legend = null, $folder = null)
    {
        return $this->cellsChartsPostWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $legend, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPostWorksheetChartLegendAsyncWithHttpInfo
     *
     * Update chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Legend $legend (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsPostWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $legend = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\LegendResponse';
        $request = $this->cellsChartsPostWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $legend, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPostWorksheetChartLegend'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Legend $legend (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsPostWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $legend = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPostWorksheetChartLegend'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPostWorksheetChartLegend'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPostWorksheetChartLegend'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($legend)) {
            $_tempBody = $legend;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPostWorksheetChartTitle
     *
     * Update chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\TitleResponse
     */
    public function cellsChartsPostWorksheetChartTitle($name, $sheet_name, $chart_index, $title = null, $folder = null)
    {
        list($response) = $this->cellsChartsPostWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $title, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsPostWorksheetChartTitleWithHttpInfo
     *
     * Update chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\TitleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsPostWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $title = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TitleResponse';
        $request = $this->cellsChartsPostWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $title, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\TitleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPostWorksheetChartTitleAsync
     *
     * Update chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsPostWorksheetChartTitleAsync($name, $sheet_name, $chart_index, $title = null, $folder = null)
    {
        return $this->cellsChartsPostWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $title, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPostWorksheetChartTitleAsyncWithHttpInfo
     *
     * Update chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsPostWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $title = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TitleResponse';
        $request = $this->cellsChartsPostWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $title, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPostWorksheetChartTitle'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsPostWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $title = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPostWorksheetChartTitle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPostWorksheetChartTitle'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPostWorksheetChartTitle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($title)) {
            $_tempBody = $title;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPutWorksheetAddChart
     *
     * Add new chart to worksheet.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $chart_type Chart type, please refer property Type in chart resource. (required)
     * @param  int $upper_left_row New chart upper left row. (optional, default to 0)
     * @param  int $upper_left_column New chart upperleft column. (optional, default to 0)
     * @param  int $lower_right_row New chart lower right row. (optional, default to 0)
     * @param  int $lower_right_column New chart lower right column. (optional, default to 0)
     * @param  string $area Specifies values from which to plot the data series. (optional)
     * @param  bool $is_vertical Specifies whether to plot the series from a range of cell values by row or by column. (optional, default to true)
     * @param  string $category_data Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). (optional)
     * @param  bool $is_auto_get_serial_name Specifies whether auto update serial name. (optional, default to true)
     * @param  string $title Specifies chart title name. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ChartsResponse
     */
    public function cellsChartsPutWorksheetAddChart($name, $sheet_name, $chart_type, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $area = null, $is_vertical = 'true', $category_data = null, $is_auto_get_serial_name = 'true', $title = null, $folder = null)
    {
        list($response) = $this->cellsChartsPutWorksheetAddChartWithHttpInfo($name, $sheet_name, $chart_type, $upper_left_row, $upper_left_column, $lower_right_row, $lower_right_column, $area, $is_vertical, $category_data, $is_auto_get_serial_name, $title, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsPutWorksheetAddChartWithHttpInfo
     *
     * Add new chart to worksheet.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $chart_type Chart type, please refer property Type in chart resource. (required)
     * @param  int $upper_left_row New chart upper left row. (optional, default to 0)
     * @param  int $upper_left_column New chart upperleft column. (optional, default to 0)
     * @param  int $lower_right_row New chart lower right row. (optional, default to 0)
     * @param  int $lower_right_column New chart lower right column. (optional, default to 0)
     * @param  string $area Specifies values from which to plot the data series. (optional)
     * @param  bool $is_vertical Specifies whether to plot the series from a range of cell values by row or by column. (optional, default to true)
     * @param  string $category_data Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). (optional)
     * @param  bool $is_auto_get_serial_name Specifies whether auto update serial name. (optional, default to true)
     * @param  string $title Specifies chart title name. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ChartsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsPutWorksheetAddChartWithHttpInfo($name, $sheet_name, $chart_type, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $area = null, $is_vertical = 'true', $category_data = null, $is_auto_get_serial_name = 'true', $title = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ChartsResponse';
        $request = $this->cellsChartsPutWorksheetAddChartRequest($name, $sheet_name, $chart_type, $upper_left_row, $upper_left_column, $lower_right_row, $lower_right_column, $area, $is_vertical, $category_data, $is_auto_get_serial_name, $title, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ChartsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPutWorksheetAddChartAsync
     *
     * Add new chart to worksheet.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $chart_type Chart type, please refer property Type in chart resource. (required)
     * @param  int $upper_left_row New chart upper left row. (optional, default to 0)
     * @param  int $upper_left_column New chart upperleft column. (optional, default to 0)
     * @param  int $lower_right_row New chart lower right row. (optional, default to 0)
     * @param  int $lower_right_column New chart lower right column. (optional, default to 0)
     * @param  string $area Specifies values from which to plot the data series. (optional)
     * @param  bool $is_vertical Specifies whether to plot the series from a range of cell values by row or by column. (optional, default to true)
     * @param  string $category_data Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). (optional)
     * @param  bool $is_auto_get_serial_name Specifies whether auto update serial name. (optional, default to true)
     * @param  string $title Specifies chart title name. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsPutWorksheetAddChartAsync($name, $sheet_name, $chart_type, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $area = null, $is_vertical = 'true', $category_data = null, $is_auto_get_serial_name = 'true', $title = null, $folder = null)
    {
        return $this->cellsChartsPutWorksheetAddChartAsyncWithHttpInfo($name, $sheet_name, $chart_type, $upper_left_row, $upper_left_column, $lower_right_row, $lower_right_column, $area, $is_vertical, $category_data, $is_auto_get_serial_name, $title, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPutWorksheetAddChartAsyncWithHttpInfo
     *
     * Add new chart to worksheet.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $chart_type Chart type, please refer property Type in chart resource. (required)
     * @param  int $upper_left_row New chart upper left row. (optional, default to 0)
     * @param  int $upper_left_column New chart upperleft column. (optional, default to 0)
     * @param  int $lower_right_row New chart lower right row. (optional, default to 0)
     * @param  int $lower_right_column New chart lower right column. (optional, default to 0)
     * @param  string $area Specifies values from which to plot the data series. (optional)
     * @param  bool $is_vertical Specifies whether to plot the series from a range of cell values by row or by column. (optional, default to true)
     * @param  string $category_data Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). (optional)
     * @param  bool $is_auto_get_serial_name Specifies whether auto update serial name. (optional, default to true)
     * @param  string $title Specifies chart title name. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsPutWorksheetAddChartAsyncWithHttpInfo($name, $sheet_name, $chart_type, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $area = null, $is_vertical = 'true', $category_data = null, $is_auto_get_serial_name = 'true', $title = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ChartsResponse';
        $request = $this->cellsChartsPutWorksheetAddChartRequest($name, $sheet_name, $chart_type, $upper_left_row, $upper_left_column, $lower_right_row, $lower_right_column, $area, $is_vertical, $category_data, $is_auto_get_serial_name, $title, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPutWorksheetAddChart'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $chart_type Chart type, please refer property Type in chart resource. (required)
     * @param  int $upper_left_row New chart upper left row. (optional, default to 0)
     * @param  int $upper_left_column New chart upperleft column. (optional, default to 0)
     * @param  int $lower_right_row New chart lower right row. (optional, default to 0)
     * @param  int $lower_right_column New chart lower right column. (optional, default to 0)
     * @param  string $area Specifies values from which to plot the data series. (optional)
     * @param  bool $is_vertical Specifies whether to plot the series from a range of cell values by row or by column. (optional, default to true)
     * @param  string $category_data Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). (optional)
     * @param  bool $is_auto_get_serial_name Specifies whether auto update serial name. (optional, default to true)
     * @param  string $title Specifies chart title name. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsPutWorksheetAddChartRequest($name, $sheet_name, $chart_type, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $area = null, $is_vertical = 'true', $category_data = null, $is_auto_get_serial_name = 'true', $title = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPutWorksheetAddChart'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPutWorksheetAddChart'
            );
        }
        // verify the required parameter 'chart_type' is set
        if ($chart_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_type when calling cellsChartsPutWorksheetAddChart'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($chart_type !== null) {
            $queryParams['chartType'] = ObjectSerializer::toQueryValue($chart_type);
        }
        // query params
        if ($upper_left_row !== null) {
            $queryParams['upperLeftRow'] = ObjectSerializer::toQueryValue($upper_left_row);
        }
        // query params
        if ($upper_left_column !== null) {
            $queryParams['upperLeftColumn'] = ObjectSerializer::toQueryValue($upper_left_column);
        }
        // query params
        if ($lower_right_row !== null) {
            $queryParams['lowerRightRow'] = ObjectSerializer::toQueryValue($lower_right_row);
        }
        // query params
        if ($lower_right_column !== null) {
            $queryParams['lowerRightColumn'] = ObjectSerializer::toQueryValue($lower_right_column);
        }
        // query params
        if ($area !== null) {
            $queryParams['area'] = ObjectSerializer::toQueryValue($area);
        }
        // query params
        if ($is_vertical !== null) {
            $queryParams['isVertical'] = ObjectSerializer::toQueryValue($is_vertical);
        }
        // query params
        if ($category_data !== null) {
            $queryParams['categoryData'] = ObjectSerializer::toQueryValue($category_data);
        }
        // query params
        if ($is_auto_get_serial_name !== null) {
            $queryParams['isAutoGetSerialName'] = ObjectSerializer::toQueryValue($is_auto_get_serial_name);
        }
        // query params
        if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPutWorksheetChartLegend
     *
     * Show legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsChartsPutWorksheetChartLegend($name, $sheet_name, $chart_index, $folder = null)
    {
        list($response) = $this->cellsChartsPutWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsPutWorksheetChartLegendWithHttpInfo
     *
     * Show legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsPutWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsChartsPutWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPutWorksheetChartLegendAsync
     *
     * Show legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsPutWorksheetChartLegendAsync($name, $sheet_name, $chart_index, $folder = null)
    {
        return $this->cellsChartsPutWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPutWorksheetChartLegendAsyncWithHttpInfo
     *
     * Show legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsPutWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsChartsPutWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPutWorksheetChartLegend'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsPutWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPutWorksheetChartLegend'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPutWorksheetChartLegend'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPutWorksheetChartLegend'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPutWorksheetChartTitle
     *
     * Add chart title / Set chart title visible
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\TitleResponse
     */
    public function cellsChartsPutWorksheetChartTitle($name, $sheet_name, $chart_index, $title = null, $folder = null)
    {
        list($response) = $this->cellsChartsPutWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $title, $folder);
        return $response;
    }

    /**
     * Operation cellsChartsPutWorksheetChartTitleWithHttpInfo
     *
     * Add chart title / Set chart title visible
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\TitleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsChartsPutWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $title = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TitleResponse';
        $request = $this->cellsChartsPutWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $title, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\TitleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPutWorksheetChartTitleAsync
     *
     * Add chart title / Set chart title visible
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsPutWorksheetChartTitleAsync($name, $sheet_name, $chart_index, $title = null, $folder = null)
    {
        return $this->cellsChartsPutWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $title, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPutWorksheetChartTitleAsyncWithHttpInfo
     *
     * Add chart title / Set chart title visible
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsChartsPutWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $title = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TitleResponse';
        $request = $this->cellsChartsPutWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $title, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPutWorksheetChartTitle'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsChartsPutWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $title = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPutWorksheetChartTitle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPutWorksheetChartTitle'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPutWorksheetChartTitle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($title)) {
            $_tempBody = $title;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
