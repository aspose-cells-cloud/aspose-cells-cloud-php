<?php
/**
 * CellsApi
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aspose\Cells\Cloud\ApiException;
use Aspose\Cells\Cloud\Configuration;
use Aspose\Cells\Cloud\HeaderSelector;
use Aspose\Cells\Cloud\ObjectSerializer;

/**
 * CellsApi Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cellsDeleteWorksheetColumns
     *
     * Delete worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ColumnsResponse
     */
    public function cellsDeleteWorksheetColumns($name, $sheet_name, $column_index, $columns, $update_reference, $folder = null)
    {
        list($response) = $this->cellsDeleteWorksheetColumnsWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference, $folder);
        return $response;
    }

    /**
     * Operation cellsDeleteWorksheetColumnsWithHttpInfo
     *
     * Delete worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ColumnsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsDeleteWorksheetColumnsWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnsResponse';
        $request = $this->cellsDeleteWorksheetColumnsRequest($name, $sheet_name, $column_index, $columns, $update_reference, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ColumnsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsDeleteWorksheetColumnsAsync
     *
     * Delete worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsDeleteWorksheetColumnsAsync($name, $sheet_name, $column_index, $columns, $update_reference, $folder = null)
    {
        return $this->cellsDeleteWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsDeleteWorksheetColumnsAsyncWithHttpInfo
     *
     * Delete worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsDeleteWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnsResponse';
        $request = $this->cellsDeleteWorksheetColumnsRequest($name, $sheet_name, $column_index, $columns, $update_reference, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsDeleteWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsDeleteWorksheetColumnsRequest($name, $sheet_name, $column_index, $columns, $update_reference, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsDeleteWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsDeleteWorksheetColumns'
            );
        }
        // verify the required parameter 'column_index' is set
        if ($column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_index when calling cellsDeleteWorksheetColumns'
            );
        }
        // verify the required parameter 'columns' is set
        if ($columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $columns when calling cellsDeleteWorksheetColumns'
            );
        }
        // verify the required parameter 'update_reference' is set
        if ($update_reference === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_reference when calling cellsDeleteWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }
        // query params
        if ($update_reference !== null) {
            $queryParams['updateReference'] = ObjectSerializer::toQueryValue($update_reference);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($column_index !== null) {
            $resourcePath = str_replace(
                '{' . 'columnIndex' . '}',
                ObjectSerializer::toPathValue($column_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsDeleteWorksheetRow
     *
     * Delete worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsDeleteWorksheetRow($name, $sheet_name, $row_index, $folder = null)
    {
        list($response) = $this->cellsDeleteWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $folder);
        return $response;
    }

    /**
     * Operation cellsDeleteWorksheetRowWithHttpInfo
     *
     * Delete worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsDeleteWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsDeleteWorksheetRowRequest($name, $sheet_name, $row_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsDeleteWorksheetRowAsync
     *
     * Delete worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsDeleteWorksheetRowAsync($name, $sheet_name, $row_index, $folder = null)
    {
        return $this->cellsDeleteWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsDeleteWorksheetRowAsyncWithHttpInfo
     *
     * Delete worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsDeleteWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsDeleteWorksheetRowRequest($name, $sheet_name, $row_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsDeleteWorksheetRow'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsDeleteWorksheetRowRequest($name, $sheet_name, $row_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsDeleteWorksheetRow'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsDeleteWorksheetRow'
            );
        }
        // verify the required parameter 'row_index' is set
        if ($row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_index when calling cellsDeleteWorksheetRow'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($row_index !== null) {
            $resourcePath = str_replace(
                '{' . 'rowIndex' . '}',
                ObjectSerializer::toPathValue($row_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsDeleteWorksheetRows
     *
     * Delete several worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsDeleteWorksheetRows($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null)
    {
        list($response) = $this->cellsDeleteWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder);
        return $response;
    }

    /**
     * Operation cellsDeleteWorksheetRowsWithHttpInfo
     *
     * Delete several worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsDeleteWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsDeleteWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsDeleteWorksheetRowsAsync
     *
     * Delete several worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsDeleteWorksheetRowsAsync($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null)
    {
        return $this->cellsDeleteWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsDeleteWorksheetRowsAsyncWithHttpInfo
     *
     * Delete several worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsDeleteWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsDeleteWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsDeleteWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsDeleteWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsDeleteWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsDeleteWorksheetRows'
            );
        }
        // verify the required parameter 'startrow' is set
        if ($startrow === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startrow when calling cellsDeleteWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startrow !== null) {
            $queryParams['startrow'] = ObjectSerializer::toQueryValue($startrow);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($update_reference !== null) {
            $queryParams['updateReference'] = ObjectSerializer::toQueryValue($update_reference);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetCell
     *
     * Read cell data by cell's name.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_or_method_name The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function cellsGetWorksheetCell($name, $sheet_name, $cell_or_method_name, $folder = null)
    {
        list($response) = $this->cellsGetWorksheetCellWithHttpInfo($name, $sheet_name, $cell_or_method_name, $folder);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetCellWithHttpInfo
     *
     * Read cell data by cell's name.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_or_method_name The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsGetWorksheetCellWithHttpInfo($name, $sheet_name, $cell_or_method_name, $folder = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsGetWorksheetCellRequest($name, $sheet_name, $cell_or_method_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetCellAsync
     *
     * Read cell data by cell's name.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_or_method_name The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetCellAsync($name, $sheet_name, $cell_or_method_name, $folder = null)
    {
        return $this->cellsGetWorksheetCellAsyncWithHttpInfo($name, $sheet_name, $cell_or_method_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetCellAsyncWithHttpInfo
     *
     * Read cell data by cell's name.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_or_method_name The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetCellAsyncWithHttpInfo($name, $sheet_name, $cell_or_method_name, $folder = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsGetWorksheetCellRequest($name, $sheet_name, $cell_or_method_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetCell'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_or_method_name The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsGetWorksheetCellRequest($name, $sheet_name, $cell_or_method_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetCell'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetCell'
            );
        }
        // verify the required parameter 'cell_or_method_name' is set
        if ($cell_or_method_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_or_method_name when calling cellsGetWorksheetCell'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellOrMethodName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_or_method_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellOrMethodName' . '}',
                ObjectSerializer::toPathValue($cell_or_method_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetCellStyle
     *
     * Read cell's style info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name Cell&#39;s name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\StyleResponse
     */
    public function cellsGetWorksheetCellStyle($name, $sheet_name, $cell_name, $folder = null)
    {
        list($response) = $this->cellsGetWorksheetCellStyleWithHttpInfo($name, $sheet_name, $cell_name, $folder);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetCellStyleWithHttpInfo
     *
     * Read cell's style info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name Cell&#39;s name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\StyleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsGetWorksheetCellStyleWithHttpInfo($name, $sheet_name, $cell_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\StyleResponse';
        $request = $this->cellsGetWorksheetCellStyleRequest($name, $sheet_name, $cell_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\StyleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetCellStyleAsync
     *
     * Read cell's style info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name Cell&#39;s name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetCellStyleAsync($name, $sheet_name, $cell_name, $folder = null)
    {
        return $this->cellsGetWorksheetCellStyleAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetCellStyleAsyncWithHttpInfo
     *
     * Read cell's style info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name Cell&#39;s name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetCellStyleAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\StyleResponse';
        $request = $this->cellsGetWorksheetCellStyleRequest($name, $sheet_name, $cell_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetCellStyle'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name Cell&#39;s name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsGetWorksheetCellStyleRequest($name, $sheet_name, $cell_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetCellStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetCellStyle'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsGetWorksheetCellStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetCells
     *
     * Get cells info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $offest Begginig offset. (optional, default to 0)
     * @param  int $count Maximum amount of cells in the response. (optional, default to 0)
     * @param  string $folder Document&#39;s folder name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsResponse
     */
    public function cellsGetWorksheetCells($name, $sheet_name, $offest = '0', $count = '0', $folder = null)
    {
        list($response) = $this->cellsGetWorksheetCellsWithHttpInfo($name, $sheet_name, $offest, $count, $folder);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetCellsWithHttpInfo
     *
     * Get cells info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $offest Begginig offset. (optional, default to 0)
     * @param  int $count Maximum amount of cells in the response. (optional, default to 0)
     * @param  string $folder Document&#39;s folder name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsGetWorksheetCellsWithHttpInfo($name, $sheet_name, $offest = '0', $count = '0', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsResponse';
        $request = $this->cellsGetWorksheetCellsRequest($name, $sheet_name, $offest, $count, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetCellsAsync
     *
     * Get cells info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $offest Begginig offset. (optional, default to 0)
     * @param  int $count Maximum amount of cells in the response. (optional, default to 0)
     * @param  string $folder Document&#39;s folder name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetCellsAsync($name, $sheet_name, $offest = '0', $count = '0', $folder = null)
    {
        return $this->cellsGetWorksheetCellsAsyncWithHttpInfo($name, $sheet_name, $offest, $count, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetCellsAsyncWithHttpInfo
     *
     * Get cells info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $offest Begginig offset. (optional, default to 0)
     * @param  int $count Maximum amount of cells in the response. (optional, default to 0)
     * @param  string $folder Document&#39;s folder name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetCellsAsyncWithHttpInfo($name, $sheet_name, $offest = '0', $count = '0', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsResponse';
        $request = $this->cellsGetWorksheetCellsRequest($name, $sheet_name, $offest, $count, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetCells'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $offest Begginig offset. (optional, default to 0)
     * @param  int $count Maximum amount of cells in the response. (optional, default to 0)
     * @param  string $folder Document&#39;s folder name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsGetWorksheetCellsRequest($name, $sheet_name, $offest = '0', $count = '0', $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetCells'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetCells'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offest !== null) {
            $queryParams['offest'] = ObjectSerializer::toQueryValue($offest);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetColumn
     *
     * Read worksheet column data by column's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ColumnResponse
     */
    public function cellsGetWorksheetColumn($name, $sheet_name, $column_index, $folder = null)
    {
        list($response) = $this->cellsGetWorksheetColumnWithHttpInfo($name, $sheet_name, $column_index, $folder);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetColumnWithHttpInfo
     *
     * Read worksheet column data by column's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ColumnResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsGetWorksheetColumnWithHttpInfo($name, $sheet_name, $column_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnResponse';
        $request = $this->cellsGetWorksheetColumnRequest($name, $sheet_name, $column_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ColumnResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetColumnAsync
     *
     * Read worksheet column data by column's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetColumnAsync($name, $sheet_name, $column_index, $folder = null)
    {
        return $this->cellsGetWorksheetColumnAsyncWithHttpInfo($name, $sheet_name, $column_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetColumnAsyncWithHttpInfo
     *
     * Read worksheet column data by column's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetColumnAsyncWithHttpInfo($name, $sheet_name, $column_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnResponse';
        $request = $this->cellsGetWorksheetColumnRequest($name, $sheet_name, $column_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetColumn'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsGetWorksheetColumnRequest($name, $sheet_name, $column_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetColumn'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetColumn'
            );
        }
        // verify the required parameter 'column_index' is set
        if ($column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_index when calling cellsGetWorksheetColumn'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($column_index !== null) {
            $resourcePath = str_replace(
                '{' . 'columnIndex' . '}',
                ObjectSerializer::toPathValue($column_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetColumns
     *
     * Read worksheet columns info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ColumnsResponse
     */
    public function cellsGetWorksheetColumns($name, $sheet_name, $folder = null)
    {
        list($response) = $this->cellsGetWorksheetColumnsWithHttpInfo($name, $sheet_name, $folder);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetColumnsWithHttpInfo
     *
     * Read worksheet columns info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ColumnsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsGetWorksheetColumnsWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnsResponse';
        $request = $this->cellsGetWorksheetColumnsRequest($name, $sheet_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ColumnsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetColumnsAsync
     *
     * Read worksheet columns info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetColumnsAsync($name, $sheet_name, $folder = null)
    {
        return $this->cellsGetWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetColumnsAsyncWithHttpInfo
     *
     * Read worksheet columns info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnsResponse';
        $request = $this->cellsGetWorksheetColumnsRequest($name, $sheet_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsGetWorksheetColumnsRequest($name, $sheet_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetRow
     *
     * Read worksheet row data by row's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\RowResponse
     */
    public function cellsGetWorksheetRow($name, $sheet_name, $row_index, $folder = null)
    {
        list($response) = $this->cellsGetWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $folder);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetRowWithHttpInfo
     *
     * Read worksheet row data by row's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\RowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsGetWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RowResponse';
        $request = $this->cellsGetWorksheetRowRequest($name, $sheet_name, $row_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\RowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetRowAsync
     *
     * Read worksheet row data by row's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetRowAsync($name, $sheet_name, $row_index, $folder = null)
    {
        return $this->cellsGetWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetRowAsyncWithHttpInfo
     *
     * Read worksheet row data by row's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RowResponse';
        $request = $this->cellsGetWorksheetRowRequest($name, $sheet_name, $row_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetRow'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsGetWorksheetRowRequest($name, $sheet_name, $row_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetRow'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetRow'
            );
        }
        // verify the required parameter 'row_index' is set
        if ($row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_index when calling cellsGetWorksheetRow'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($row_index !== null) {
            $resourcePath = str_replace(
                '{' . 'rowIndex' . '}',
                ObjectSerializer::toPathValue($row_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetRows
     *
     * Read worksheet rows info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\RowsResponse
     */
    public function cellsGetWorksheetRows($name, $sheet_name, $folder = null)
    {
        list($response) = $this->cellsGetWorksheetRowsWithHttpInfo($name, $sheet_name, $folder);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetRowsWithHttpInfo
     *
     * Read worksheet rows info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\RowsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsGetWorksheetRowsWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RowsResponse';
        $request = $this->cellsGetWorksheetRowsRequest($name, $sheet_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\RowsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetRowsAsync
     *
     * Read worksheet rows info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetRowsAsync($name, $sheet_name, $folder = null)
    {
        return $this->cellsGetWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetRowsAsyncWithHttpInfo
     *
     * Read worksheet rows info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsGetWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RowsResponse';
        $request = $this->cellsGetWorksheetRowsRequest($name, $sheet_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsGetWorksheetRowsRequest($name, $sheet_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostCellCalculate
     *
     * Cell calculate formula
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $cell_name cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options options (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostCellCalculate($name, $sheet_name, $cell_name, $options = null, $folder = null)
    {
        list($response) = $this->cellsPostCellCalculateWithHttpInfo($name, $sheet_name, $cell_name, $options, $folder);
        return $response;
    }

    /**
     * Operation cellsPostCellCalculateWithHttpInfo
     *
     * Cell calculate formula
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostCellCalculateWithHttpInfo($name, $sheet_name, $cell_name, $options = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostCellCalculateRequest($name, $sheet_name, $cell_name, $options, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostCellCalculateAsync
     *
     * Cell calculate formula
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostCellCalculateAsync($name, $sheet_name, $cell_name, $options = null, $folder = null)
    {
        return $this->cellsPostCellCalculateAsyncWithHttpInfo($name, $sheet_name, $cell_name, $options, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostCellCalculateAsyncWithHttpInfo
     *
     * Cell calculate formula
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostCellCalculateAsyncWithHttpInfo($name, $sheet_name, $cell_name, $options = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostCellCalculateRequest($name, $sheet_name, $cell_name, $options, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostCellCalculate'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostCellCalculateRequest($name, $sheet_name, $cell_name, $options = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostCellCalculate'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostCellCalculate'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsPostCellCalculate'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellName}/calculate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($options)) {
            $_tempBody = $options;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostCellCharacters
     *
     * Set cell characters
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $cell_name cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\FontSetting[] $options options (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostCellCharacters($name, $sheet_name, $cell_name, $options = null, $folder = null)
    {
        list($response) = $this->cellsPostCellCharactersWithHttpInfo($name, $sheet_name, $cell_name, $options, $folder);
        return $response;
    }

    /**
     * Operation cellsPostCellCharactersWithHttpInfo
     *
     * Set cell characters
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\FontSetting[] $options (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostCellCharactersWithHttpInfo($name, $sheet_name, $cell_name, $options = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostCellCharactersRequest($name, $sheet_name, $cell_name, $options, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostCellCharactersAsync
     *
     * Set cell characters
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\FontSetting[] $options (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostCellCharactersAsync($name, $sheet_name, $cell_name, $options = null, $folder = null)
    {
        return $this->cellsPostCellCharactersAsyncWithHttpInfo($name, $sheet_name, $cell_name, $options, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostCellCharactersAsyncWithHttpInfo
     *
     * Set cell characters
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\FontSetting[] $options (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostCellCharactersAsyncWithHttpInfo($name, $sheet_name, $cell_name, $options = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostCellCharactersRequest($name, $sheet_name, $cell_name, $options, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostCellCharacters'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\FontSetting[] $options (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostCellCharactersRequest($name, $sheet_name, $cell_name, $options = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostCellCharacters'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostCellCharacters'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsPostCellCharacters'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellName}/characters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($options)) {
            $_tempBody = $options;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostClearContents
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostClearContents($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null)
    {
        list($response) = $this->cellsPostClearContentsWithHttpInfo($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder);
        return $response;
    }

    /**
     * Operation cellsPostClearContentsWithHttpInfo
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostClearContentsWithHttpInfo($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostClearContentsRequest($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostClearContentsAsync
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostClearContentsAsync($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null)
    {
        return $this->cellsPostClearContentsAsyncWithHttpInfo($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostClearContentsAsyncWithHttpInfo
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostClearContentsAsyncWithHttpInfo($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostClearContentsRequest($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostClearContents'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostClearContentsRequest($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostClearContents'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostClearContents'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/clearcontents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($end_row !== null) {
            $queryParams['endRow'] = ObjectSerializer::toQueryValue($end_row);
        }
        // query params
        if ($end_column !== null) {
            $queryParams['endColumn'] = ObjectSerializer::toQueryValue($end_column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostClearFormats
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostClearFormats($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null)
    {
        list($response) = $this->cellsPostClearFormatsWithHttpInfo($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder);
        return $response;
    }

    /**
     * Operation cellsPostClearFormatsWithHttpInfo
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostClearFormatsWithHttpInfo($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostClearFormatsRequest($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostClearFormatsAsync
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostClearFormatsAsync($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null)
    {
        return $this->cellsPostClearFormatsAsyncWithHttpInfo($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostClearFormatsAsyncWithHttpInfo
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostClearFormatsAsyncWithHttpInfo($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostClearFormatsRequest($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostClearFormats'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostClearFormatsRequest($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostClearFormats'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostClearFormats'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/clearformats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($end_row !== null) {
            $queryParams['endRow'] = ObjectSerializer::toQueryValue($end_row);
        }
        // query params
        if ($end_column !== null) {
            $queryParams['endColumn'] = ObjectSerializer::toQueryValue($end_column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostColumnStyle
     *
     * Set column style
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostColumnStyle($name, $sheet_name, $column_index, $style = null, $folder = null)
    {
        list($response) = $this->cellsPostColumnStyleWithHttpInfo($name, $sheet_name, $column_index, $style, $folder);
        return $response;
    }

    /**
     * Operation cellsPostColumnStyleWithHttpInfo
     *
     * Set column style
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostColumnStyleWithHttpInfo($name, $sheet_name, $column_index, $style = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostColumnStyleRequest($name, $sheet_name, $column_index, $style, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostColumnStyleAsync
     *
     * Set column style
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostColumnStyleAsync($name, $sheet_name, $column_index, $style = null, $folder = null)
    {
        return $this->cellsPostColumnStyleAsyncWithHttpInfo($name, $sheet_name, $column_index, $style, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostColumnStyleAsyncWithHttpInfo
     *
     * Set column style
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostColumnStyleAsyncWithHttpInfo($name, $sheet_name, $column_index, $style = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostColumnStyleRequest($name, $sheet_name, $column_index, $style, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostColumnStyle'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostColumnStyleRequest($name, $sheet_name, $column_index, $style = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostColumnStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostColumnStyle'
            );
        }
        // verify the required parameter 'column_index' is set
        if ($column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_index when calling cellsPostColumnStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}/style';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($column_index !== null) {
            $resourcePath = str_replace(
                '{' . 'columnIndex' . '}',
                ObjectSerializer::toPathValue($column_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($style)) {
            $_tempBody = $style;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostCopyCellIntoCell
     *
     * Copy cell into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $dest_cell_name Destination cell name (required)
     * @param  string $sheet_name Destination worksheet name. (required)
     * @param  string $worksheet Source worksheet name. (required)
     * @param  string $cellname Source cell name (optional)
     * @param  int $row Source row (optional)
     * @param  int $column Source column (optional)
     * @param  string $folder Folder name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostCopyCellIntoCell($name, $dest_cell_name, $sheet_name, $worksheet, $cellname = null, $row = null, $column = null, $folder = null)
    {
        list($response) = $this->cellsPostCopyCellIntoCellWithHttpInfo($name, $dest_cell_name, $sheet_name, $worksheet, $cellname, $row, $column, $folder);
        return $response;
    }

    /**
     * Operation cellsPostCopyCellIntoCellWithHttpInfo
     *
     * Copy cell into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $dest_cell_name Destination cell name (required)
     * @param  string $sheet_name Destination worksheet name. (required)
     * @param  string $worksheet Source worksheet name. (required)
     * @param  string $cellname Source cell name (optional)
     * @param  int $row Source row (optional)
     * @param  int $column Source column (optional)
     * @param  string $folder Folder name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostCopyCellIntoCellWithHttpInfo($name, $dest_cell_name, $sheet_name, $worksheet, $cellname = null, $row = null, $column = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostCopyCellIntoCellRequest($name, $dest_cell_name, $sheet_name, $worksheet, $cellname, $row, $column, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostCopyCellIntoCellAsync
     *
     * Copy cell into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $dest_cell_name Destination cell name (required)
     * @param  string $sheet_name Destination worksheet name. (required)
     * @param  string $worksheet Source worksheet name. (required)
     * @param  string $cellname Source cell name (optional)
     * @param  int $row Source row (optional)
     * @param  int $column Source column (optional)
     * @param  string $folder Folder name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostCopyCellIntoCellAsync($name, $dest_cell_name, $sheet_name, $worksheet, $cellname = null, $row = null, $column = null, $folder = null)
    {
        return $this->cellsPostCopyCellIntoCellAsyncWithHttpInfo($name, $dest_cell_name, $sheet_name, $worksheet, $cellname, $row, $column, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostCopyCellIntoCellAsyncWithHttpInfo
     *
     * Copy cell into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $dest_cell_name Destination cell name (required)
     * @param  string $sheet_name Destination worksheet name. (required)
     * @param  string $worksheet Source worksheet name. (required)
     * @param  string $cellname Source cell name (optional)
     * @param  int $row Source row (optional)
     * @param  int $column Source column (optional)
     * @param  string $folder Folder name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostCopyCellIntoCellAsyncWithHttpInfo($name, $dest_cell_name, $sheet_name, $worksheet, $cellname = null, $row = null, $column = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostCopyCellIntoCellRequest($name, $dest_cell_name, $sheet_name, $worksheet, $cellname, $row, $column, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostCopyCellIntoCell'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $dest_cell_name Destination cell name (required)
     * @param  string $sheet_name Destination worksheet name. (required)
     * @param  string $worksheet Source worksheet name. (required)
     * @param  string $cellname Source cell name (optional)
     * @param  int $row Source row (optional)
     * @param  int $column Source column (optional)
     * @param  string $folder Folder name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostCopyCellIntoCellRequest($name, $dest_cell_name, $sheet_name, $worksheet, $cellname = null, $row = null, $column = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostCopyCellIntoCell'
            );
        }
        // verify the required parameter 'dest_cell_name' is set
        if ($dest_cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest_cell_name when calling cellsPostCopyCellIntoCell'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostCopyCellIntoCell'
            );
        }
        // verify the required parameter 'worksheet' is set
        if ($worksheet === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worksheet when calling cellsPostCopyCellIntoCell'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{destCellName}/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($worksheet !== null) {
            $queryParams['worksheet'] = ObjectSerializer::toQueryValue($worksheet);
        }
        // query params
        if ($cellname !== null) {
            $queryParams['cellname'] = ObjectSerializer::toQueryValue($cellname);
        }
        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($dest_cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'destCellName' . '}',
                ObjectSerializer::toPathValue($dest_cell_name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostCopyWorksheetColumns
     *
     * Copy worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_column_index Source column index (required)
     * @param  int $destination_column_index Destination column index (required)
     * @param  int $column_number The copied column number (required)
     * @param  string $worksheet The Worksheet (optional, default to )
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostCopyWorksheetColumns($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet = '', $folder = null)
    {
        list($response) = $this->cellsPostCopyWorksheetColumnsWithHttpInfo($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet, $folder);
        return $response;
    }

    /**
     * Operation cellsPostCopyWorksheetColumnsWithHttpInfo
     *
     * Copy worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_column_index Source column index (required)
     * @param  int $destination_column_index Destination column index (required)
     * @param  int $column_number The copied column number (required)
     * @param  string $worksheet The Worksheet (optional, default to )
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostCopyWorksheetColumnsWithHttpInfo($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet = '', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostCopyWorksheetColumnsRequest($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostCopyWorksheetColumnsAsync
     *
     * Copy worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_column_index Source column index (required)
     * @param  int $destination_column_index Destination column index (required)
     * @param  int $column_number The copied column number (required)
     * @param  string $worksheet The Worksheet (optional, default to )
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostCopyWorksheetColumnsAsync($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet = '', $folder = null)
    {
        return $this->cellsPostCopyWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostCopyWorksheetColumnsAsyncWithHttpInfo
     *
     * Copy worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_column_index Source column index (required)
     * @param  int $destination_column_index Destination column index (required)
     * @param  int $column_number The copied column number (required)
     * @param  string $worksheet The Worksheet (optional, default to )
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostCopyWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet = '', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostCopyWorksheetColumnsRequest($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostCopyWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_column_index Source column index (required)
     * @param  int $destination_column_index Destination column index (required)
     * @param  int $column_number The copied column number (required)
     * @param  string $worksheet The Worksheet (optional, default to )
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostCopyWorksheetColumnsRequest($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet = '', $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostCopyWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostCopyWorksheetColumns'
            );
        }
        // verify the required parameter 'source_column_index' is set
        if ($source_column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_column_index when calling cellsPostCopyWorksheetColumns'
            );
        }
        // verify the required parameter 'destination_column_index' is set
        if ($destination_column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_column_index when calling cellsPostCopyWorksheetColumns'
            );
        }
        // verify the required parameter 'column_number' is set
        if ($column_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_number when calling cellsPostCopyWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($source_column_index !== null) {
            $queryParams['sourceColumnIndex'] = ObjectSerializer::toQueryValue($source_column_index);
        }
        // query params
        if ($destination_column_index !== null) {
            $queryParams['destinationColumnIndex'] = ObjectSerializer::toQueryValue($destination_column_index);
        }
        // query params
        if ($column_number !== null) {
            $queryParams['columnNumber'] = ObjectSerializer::toQueryValue($column_number);
        }
        // query params
        if ($worksheet !== null) {
            $queryParams['worksheet'] = ObjectSerializer::toQueryValue($worksheet);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostCopyWorksheetRows
     *
     * Copy worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_row_index Source row index (required)
     * @param  int $destination_row_index Destination row index (required)
     * @param  int $row_number The copied row number (required)
     * @param  string $worksheet worksheet (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostCopyWorksheetRows($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet = null, $folder = null)
    {
        list($response) = $this->cellsPostCopyWorksheetRowsWithHttpInfo($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet, $folder);
        return $response;
    }

    /**
     * Operation cellsPostCopyWorksheetRowsWithHttpInfo
     *
     * Copy worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_row_index Source row index (required)
     * @param  int $destination_row_index Destination row index (required)
     * @param  int $row_number The copied row number (required)
     * @param  string $worksheet worksheet (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostCopyWorksheetRowsWithHttpInfo($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostCopyWorksheetRowsRequest($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostCopyWorksheetRowsAsync
     *
     * Copy worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_row_index Source row index (required)
     * @param  int $destination_row_index Destination row index (required)
     * @param  int $row_number The copied row number (required)
     * @param  string $worksheet worksheet (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostCopyWorksheetRowsAsync($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet = null, $folder = null)
    {
        return $this->cellsPostCopyWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostCopyWorksheetRowsAsyncWithHttpInfo
     *
     * Copy worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_row_index Source row index (required)
     * @param  int $destination_row_index Destination row index (required)
     * @param  int $row_number The copied row number (required)
     * @param  string $worksheet worksheet (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostCopyWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostCopyWorksheetRowsRequest($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostCopyWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_row_index Source row index (required)
     * @param  int $destination_row_index Destination row index (required)
     * @param  int $row_number The copied row number (required)
     * @param  string $worksheet worksheet (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostCopyWorksheetRowsRequest($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostCopyWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostCopyWorksheetRows'
            );
        }
        // verify the required parameter 'source_row_index' is set
        if ($source_row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_row_index when calling cellsPostCopyWorksheetRows'
            );
        }
        // verify the required parameter 'destination_row_index' is set
        if ($destination_row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_row_index when calling cellsPostCopyWorksheetRows'
            );
        }
        // verify the required parameter 'row_number' is set
        if ($row_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_number when calling cellsPostCopyWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($source_row_index !== null) {
            $queryParams['sourceRowIndex'] = ObjectSerializer::toQueryValue($source_row_index);
        }
        // query params
        if ($destination_row_index !== null) {
            $queryParams['destinationRowIndex'] = ObjectSerializer::toQueryValue($destination_row_index);
        }
        // query params
        if ($row_number !== null) {
            $queryParams['rowNumber'] = ObjectSerializer::toQueryValue($row_number);
        }
        // query params
        if ($worksheet !== null) {
            $queryParams['worksheet'] = ObjectSerializer::toQueryValue($worksheet);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostGroupWorksheetColumns
     *
     * Group worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  bool $hide columns visible state (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostGroupWorksheetColumns($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null)
    {
        list($response) = $this->cellsPostGroupWorksheetColumnsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide, $folder);
        return $response;
    }

    /**
     * Operation cellsPostGroupWorksheetColumnsWithHttpInfo
     *
     * Group worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  bool $hide columns visible state (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostGroupWorksheetColumnsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostGroupWorksheetColumnsRequest($name, $sheet_name, $first_index, $last_index, $hide, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostGroupWorksheetColumnsAsync
     *
     * Group worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  bool $hide columns visible state (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostGroupWorksheetColumnsAsync($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null)
    {
        return $this->cellsPostGroupWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostGroupWorksheetColumnsAsyncWithHttpInfo
     *
     * Group worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  bool $hide columns visible state (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostGroupWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostGroupWorksheetColumnsRequest($name, $sheet_name, $first_index, $last_index, $hide, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostGroupWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  bool $hide columns visible state (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostGroupWorksheetColumnsRequest($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostGroupWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostGroupWorksheetColumns'
            );
        }
        // verify the required parameter 'first_index' is set
        if ($first_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_index when calling cellsPostGroupWorksheetColumns'
            );
        }
        // verify the required parameter 'last_index' is set
        if ($last_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_index when calling cellsPostGroupWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_index !== null) {
            $queryParams['firstIndex'] = ObjectSerializer::toQueryValue($first_index);
        }
        // query params
        if ($last_index !== null) {
            $queryParams['lastIndex'] = ObjectSerializer::toQueryValue($last_index);
        }
        // query params
        if ($hide !== null) {
            $queryParams['hide'] = ObjectSerializer::toQueryValue($hide);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostGroupWorksheetRows
     *
     * Group worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $hide rows visible state (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostGroupWorksheetRows($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null)
    {
        list($response) = $this->cellsPostGroupWorksheetRowsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide, $folder);
        return $response;
    }

    /**
     * Operation cellsPostGroupWorksheetRowsWithHttpInfo
     *
     * Group worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $hide rows visible state (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostGroupWorksheetRowsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostGroupWorksheetRowsRequest($name, $sheet_name, $first_index, $last_index, $hide, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostGroupWorksheetRowsAsync
     *
     * Group worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $hide rows visible state (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostGroupWorksheetRowsAsync($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null)
    {
        return $this->cellsPostGroupWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostGroupWorksheetRowsAsyncWithHttpInfo
     *
     * Group worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $hide rows visible state (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostGroupWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostGroupWorksheetRowsRequest($name, $sheet_name, $first_index, $last_index, $hide, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostGroupWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $hide rows visible state (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostGroupWorksheetRowsRequest($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostGroupWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostGroupWorksheetRows'
            );
        }
        // verify the required parameter 'first_index' is set
        if ($first_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_index when calling cellsPostGroupWorksheetRows'
            );
        }
        // verify the required parameter 'last_index' is set
        if ($last_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_index when calling cellsPostGroupWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_index !== null) {
            $queryParams['firstIndex'] = ObjectSerializer::toQueryValue($first_index);
        }
        // query params
        if ($last_index !== null) {
            $queryParams['lastIndex'] = ObjectSerializer::toQueryValue($last_index);
        }
        // query params
        if ($hide !== null) {
            $queryParams['hide'] = ObjectSerializer::toQueryValue($hide);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostHideWorksheetColumns
     *
     * Hide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_column The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostHideWorksheetColumns($name, $sheet_name, $start_column, $total_columns, $folder = null)
    {
        list($response) = $this->cellsPostHideWorksheetColumnsWithHttpInfo($name, $sheet_name, $start_column, $total_columns, $folder);
        return $response;
    }

    /**
     * Operation cellsPostHideWorksheetColumnsWithHttpInfo
     *
     * Hide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_column The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostHideWorksheetColumnsWithHttpInfo($name, $sheet_name, $start_column, $total_columns, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostHideWorksheetColumnsRequest($name, $sheet_name, $start_column, $total_columns, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostHideWorksheetColumnsAsync
     *
     * Hide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_column The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostHideWorksheetColumnsAsync($name, $sheet_name, $start_column, $total_columns, $folder = null)
    {
        return $this->cellsPostHideWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $start_column, $total_columns, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostHideWorksheetColumnsAsyncWithHttpInfo
     *
     * Hide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_column The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostHideWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $start_column, $total_columns, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostHideWorksheetColumnsRequest($name, $sheet_name, $start_column, $total_columns, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostHideWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_column The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostHideWorksheetColumnsRequest($name, $sheet_name, $start_column, $total_columns, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostHideWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostHideWorksheetColumns'
            );
        }
        // verify the required parameter 'start_column' is set
        if ($start_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_column when calling cellsPostHideWorksheetColumns'
            );
        }
        // verify the required parameter 'total_columns' is set
        if ($total_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_columns when calling cellsPostHideWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/hide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($total_columns !== null) {
            $queryParams['totalColumns'] = ObjectSerializer::toQueryValue($total_columns);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostHideWorksheetRows
     *
     * Hide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostHideWorksheetRows($name, $sheet_name, $startrow, $total_rows, $folder = null)
    {
        list($response) = $this->cellsPostHideWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $folder);
        return $response;
    }

    /**
     * Operation cellsPostHideWorksheetRowsWithHttpInfo
     *
     * Hide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostHideWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostHideWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostHideWorksheetRowsAsync
     *
     * Hide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostHideWorksheetRowsAsync($name, $sheet_name, $startrow, $total_rows, $folder = null)
    {
        return $this->cellsPostHideWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostHideWorksheetRowsAsyncWithHttpInfo
     *
     * Hide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostHideWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostHideWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostHideWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostHideWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostHideWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostHideWorksheetRows'
            );
        }
        // verify the required parameter 'startrow' is set
        if ($startrow === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startrow when calling cellsPostHideWorksheetRows'
            );
        }
        // verify the required parameter 'total_rows' is set
        if ($total_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_rows when calling cellsPostHideWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/hide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startrow !== null) {
            $queryParams['startrow'] = ObjectSerializer::toQueryValue($startrow);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostRowStyle
     *
     * Set row style.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostRowStyle($name, $sheet_name, $row_index, $style = null, $folder = null)
    {
        list($response) = $this->cellsPostRowStyleWithHttpInfo($name, $sheet_name, $row_index, $style, $folder);
        return $response;
    }

    /**
     * Operation cellsPostRowStyleWithHttpInfo
     *
     * Set row style.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostRowStyleWithHttpInfo($name, $sheet_name, $row_index, $style = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostRowStyleRequest($name, $sheet_name, $row_index, $style, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostRowStyleAsync
     *
     * Set row style.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostRowStyleAsync($name, $sheet_name, $row_index, $style = null, $folder = null)
    {
        return $this->cellsPostRowStyleAsyncWithHttpInfo($name, $sheet_name, $row_index, $style, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostRowStyleAsyncWithHttpInfo
     *
     * Set row style.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostRowStyleAsyncWithHttpInfo($name, $sheet_name, $row_index, $style = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostRowStyleRequest($name, $sheet_name, $row_index, $style, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostRowStyle'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostRowStyleRequest($name, $sheet_name, $row_index, $style = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostRowStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostRowStyle'
            );
        }
        // verify the required parameter 'row_index' is set
        if ($row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_index when calling cellsPostRowStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}/style';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($row_index !== null) {
            $resourcePath = str_replace(
                '{' . 'rowIndex' . '}',
                ObjectSerializer::toPathValue($row_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($style)) {
            $_tempBody = $style;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostSetCellHtmlString
     *
     * Set htmlstring value into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellResponse
     */
    public function cellsPostSetCellHtmlString($name, $sheet_name, $cell_name, $folder = null)
    {
        list($response) = $this->cellsPostSetCellHtmlStringWithHttpInfo($name, $sheet_name, $cell_name, $folder);
        return $response;
    }

    /**
     * Operation cellsPostSetCellHtmlStringWithHttpInfo
     *
     * Set htmlstring value into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostSetCellHtmlStringWithHttpInfo($name, $sheet_name, $cell_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellResponse';
        $request = $this->cellsPostSetCellHtmlStringRequest($name, $sheet_name, $cell_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostSetCellHtmlStringAsync
     *
     * Set htmlstring value into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostSetCellHtmlStringAsync($name, $sheet_name, $cell_name, $folder = null)
    {
        return $this->cellsPostSetCellHtmlStringAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostSetCellHtmlStringAsyncWithHttpInfo
     *
     * Set htmlstring value into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostSetCellHtmlStringAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellResponse';
        $request = $this->cellsPostSetCellHtmlStringRequest($name, $sheet_name, $cell_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostSetCellHtmlString'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostSetCellHtmlStringRequest($name, $sheet_name, $cell_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostSetCellHtmlString'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostSetCellHtmlString'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsPostSetCellHtmlString'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostSetCellRangeValue
     *
     * Set cell range value
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param  string $value Range value (required)
     * @param  string $type Value data type (like \&quot;int\&quot;) (required)
     * @param  string $folder Folder name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostSetCellRangeValue($name, $sheet_name, $cellarea, $value, $type, $folder = null)
    {
        list($response) = $this->cellsPostSetCellRangeValueWithHttpInfo($name, $sheet_name, $cellarea, $value, $type, $folder);
        return $response;
    }

    /**
     * Operation cellsPostSetCellRangeValueWithHttpInfo
     *
     * Set cell range value
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param  string $value Range value (required)
     * @param  string $type Value data type (like \&quot;int\&quot;) (required)
     * @param  string $folder Folder name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostSetCellRangeValueWithHttpInfo($name, $sheet_name, $cellarea, $value, $type, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostSetCellRangeValueRequest($name, $sheet_name, $cellarea, $value, $type, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostSetCellRangeValueAsync
     *
     * Set cell range value
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param  string $value Range value (required)
     * @param  string $type Value data type (like \&quot;int\&quot;) (required)
     * @param  string $folder Folder name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostSetCellRangeValueAsync($name, $sheet_name, $cellarea, $value, $type, $folder = null)
    {
        return $this->cellsPostSetCellRangeValueAsyncWithHttpInfo($name, $sheet_name, $cellarea, $value, $type, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostSetCellRangeValueAsyncWithHttpInfo
     *
     * Set cell range value
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param  string $value Range value (required)
     * @param  string $type Value data type (like \&quot;int\&quot;) (required)
     * @param  string $folder Folder name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostSetCellRangeValueAsyncWithHttpInfo($name, $sheet_name, $cellarea, $value, $type, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostSetCellRangeValueRequest($name, $sheet_name, $cellarea, $value, $type, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostSetCellRangeValue'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param  string $value Range value (required)
     * @param  string $type Value data type (like \&quot;int\&quot;) (required)
     * @param  string $folder Folder name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostSetCellRangeValueRequest($name, $sheet_name, $cellarea, $value, $type, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostSetCellRangeValue'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostSetCellRangeValue'
            );
        }
        // verify the required parameter 'cellarea' is set
        if ($cellarea === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cellarea when calling cellsPostSetCellRangeValue'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling cellsPostSetCellRangeValue'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling cellsPostSetCellRangeValue'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cellarea !== null) {
            $queryParams['cellarea'] = ObjectSerializer::toQueryValue($cellarea);
        }
        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostSetWorksheetColumnWidth
     *
     * Set worksheet column width.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  double $width The width. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ColumnResponse
     */
    public function cellsPostSetWorksheetColumnWidth($name, $sheet_name, $column_index, $width, $folder = null)
    {
        list($response) = $this->cellsPostSetWorksheetColumnWidthWithHttpInfo($name, $sheet_name, $column_index, $width, $folder);
        return $response;
    }

    /**
     * Operation cellsPostSetWorksheetColumnWidthWithHttpInfo
     *
     * Set worksheet column width.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  double $width The width. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ColumnResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostSetWorksheetColumnWidthWithHttpInfo($name, $sheet_name, $column_index, $width, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnResponse';
        $request = $this->cellsPostSetWorksheetColumnWidthRequest($name, $sheet_name, $column_index, $width, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ColumnResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostSetWorksheetColumnWidthAsync
     *
     * Set worksheet column width.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  double $width The width. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostSetWorksheetColumnWidthAsync($name, $sheet_name, $column_index, $width, $folder = null)
    {
        return $this->cellsPostSetWorksheetColumnWidthAsyncWithHttpInfo($name, $sheet_name, $column_index, $width, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostSetWorksheetColumnWidthAsyncWithHttpInfo
     *
     * Set worksheet column width.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  double $width The width. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostSetWorksheetColumnWidthAsyncWithHttpInfo($name, $sheet_name, $column_index, $width, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnResponse';
        $request = $this->cellsPostSetWorksheetColumnWidthRequest($name, $sheet_name, $column_index, $width, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostSetWorksheetColumnWidth'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  double $width The width. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostSetWorksheetColumnWidthRequest($name, $sheet_name, $column_index, $width, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostSetWorksheetColumnWidth'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostSetWorksheetColumnWidth'
            );
        }
        // verify the required parameter 'column_index' is set
        if ($column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_index when calling cellsPostSetWorksheetColumnWidth'
            );
        }
        // verify the required parameter 'width' is set
        if ($width === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $width when calling cellsPostSetWorksheetColumnWidth'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($column_index !== null) {
            $resourcePath = str_replace(
                '{' . 'columnIndex' . '}',
                ObjectSerializer::toPathValue($column_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUngroupWorksheetColumns
     *
     * Ungroup worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostUngroupWorksheetColumns($name, $sheet_name, $first_index, $last_index, $folder = null)
    {
        list($response) = $this->cellsPostUngroupWorksheetColumnsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $folder);
        return $response;
    }

    /**
     * Operation cellsPostUngroupWorksheetColumnsWithHttpInfo
     *
     * Ungroup worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostUngroupWorksheetColumnsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostUngroupWorksheetColumnsRequest($name, $sheet_name, $first_index, $last_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUngroupWorksheetColumnsAsync
     *
     * Ungroup worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUngroupWorksheetColumnsAsync($name, $sheet_name, $first_index, $last_index, $folder = null)
    {
        return $this->cellsPostUngroupWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUngroupWorksheetColumnsAsyncWithHttpInfo
     *
     * Ungroup worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUngroupWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostUngroupWorksheetColumnsRequest($name, $sheet_name, $first_index, $last_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUngroupWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostUngroupWorksheetColumnsRequest($name, $sheet_name, $first_index, $last_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUngroupWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUngroupWorksheetColumns'
            );
        }
        // verify the required parameter 'first_index' is set
        if ($first_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_index when calling cellsPostUngroupWorksheetColumns'
            );
        }
        // verify the required parameter 'last_index' is set
        if ($last_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_index when calling cellsPostUngroupWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/ungroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_index !== null) {
            $queryParams['firstIndex'] = ObjectSerializer::toQueryValue($first_index);
        }
        // query params
        if ($last_index !== null) {
            $queryParams['lastIndex'] = ObjectSerializer::toQueryValue($last_index);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUngroupWorksheetRows
     *
     * Ungroup worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $is_all Is all row to be operated (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostUngroupWorksheetRows($name, $sheet_name, $first_index, $last_index, $is_all = null, $folder = null)
    {
        list($response) = $this->cellsPostUngroupWorksheetRowsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $is_all, $folder);
        return $response;
    }

    /**
     * Operation cellsPostUngroupWorksheetRowsWithHttpInfo
     *
     * Ungroup worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $is_all Is all row to be operated (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostUngroupWorksheetRowsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $is_all = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostUngroupWorksheetRowsRequest($name, $sheet_name, $first_index, $last_index, $is_all, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUngroupWorksheetRowsAsync
     *
     * Ungroup worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $is_all Is all row to be operated (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUngroupWorksheetRowsAsync($name, $sheet_name, $first_index, $last_index, $is_all = null, $folder = null)
    {
        return $this->cellsPostUngroupWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $is_all, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUngroupWorksheetRowsAsyncWithHttpInfo
     *
     * Ungroup worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $is_all Is all row to be operated (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUngroupWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $is_all = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostUngroupWorksheetRowsRequest($name, $sheet_name, $first_index, $last_index, $is_all, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUngroupWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $is_all Is all row to be operated (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostUngroupWorksheetRowsRequest($name, $sheet_name, $first_index, $last_index, $is_all = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUngroupWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUngroupWorksheetRows'
            );
        }
        // verify the required parameter 'first_index' is set
        if ($first_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_index when calling cellsPostUngroupWorksheetRows'
            );
        }
        // verify the required parameter 'last_index' is set
        if ($last_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_index when calling cellsPostUngroupWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/ungroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_index !== null) {
            $queryParams['firstIndex'] = ObjectSerializer::toQueryValue($first_index);
        }
        // query params
        if ($last_index !== null) {
            $queryParams['lastIndex'] = ObjectSerializer::toQueryValue($last_index);
        }
        // query params
        if ($is_all !== null) {
            $queryParams['isAll'] = ObjectSerializer::toQueryValue($is_all);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUnhideWorksheetColumns
     *
     * Unhide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startcolumn The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  double $width The new column width. (optional, default to 50.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostUnhideWorksheetColumns($name, $sheet_name, $startcolumn, $total_columns, $width = '50.0', $folder = null)
    {
        list($response) = $this->cellsPostUnhideWorksheetColumnsWithHttpInfo($name, $sheet_name, $startcolumn, $total_columns, $width, $folder);
        return $response;
    }

    /**
     * Operation cellsPostUnhideWorksheetColumnsWithHttpInfo
     *
     * Unhide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startcolumn The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  double $width The new column width. (optional, default to 50.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostUnhideWorksheetColumnsWithHttpInfo($name, $sheet_name, $startcolumn, $total_columns, $width = '50.0', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostUnhideWorksheetColumnsRequest($name, $sheet_name, $startcolumn, $total_columns, $width, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUnhideWorksheetColumnsAsync
     *
     * Unhide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startcolumn The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  double $width The new column width. (optional, default to 50.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUnhideWorksheetColumnsAsync($name, $sheet_name, $startcolumn, $total_columns, $width = '50.0', $folder = null)
    {
        return $this->cellsPostUnhideWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $startcolumn, $total_columns, $width, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUnhideWorksheetColumnsAsyncWithHttpInfo
     *
     * Unhide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startcolumn The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  double $width The new column width. (optional, default to 50.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUnhideWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $startcolumn, $total_columns, $width = '50.0', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostUnhideWorksheetColumnsRequest($name, $sheet_name, $startcolumn, $total_columns, $width, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUnhideWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startcolumn The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  double $width The new column width. (optional, default to 50.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostUnhideWorksheetColumnsRequest($name, $sheet_name, $startcolumn, $total_columns, $width = '50.0', $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUnhideWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUnhideWorksheetColumns'
            );
        }
        // verify the required parameter 'startcolumn' is set
        if ($startcolumn === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startcolumn when calling cellsPostUnhideWorksheetColumns'
            );
        }
        // verify the required parameter 'total_columns' is set
        if ($total_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_columns when calling cellsPostUnhideWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/unhide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startcolumn !== null) {
            $queryParams['startcolumn'] = ObjectSerializer::toQueryValue($startcolumn);
        }
        // query params
        if ($total_columns !== null) {
            $queryParams['totalColumns'] = ObjectSerializer::toQueryValue($total_columns);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUnhideWorksheetRows
     *
     * Unhide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  double $height The new row height. (optional, default to 15.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostUnhideWorksheetRows($name, $sheet_name, $startrow, $total_rows, $height = '15.0', $folder = null)
    {
        list($response) = $this->cellsPostUnhideWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $height, $folder);
        return $response;
    }

    /**
     * Operation cellsPostUnhideWorksheetRowsWithHttpInfo
     *
     * Unhide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  double $height The new row height. (optional, default to 15.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostUnhideWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $height = '15.0', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostUnhideWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $height, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUnhideWorksheetRowsAsync
     *
     * Unhide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  double $height The new row height. (optional, default to 15.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUnhideWorksheetRowsAsync($name, $sheet_name, $startrow, $total_rows, $height = '15.0', $folder = null)
    {
        return $this->cellsPostUnhideWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $height, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUnhideWorksheetRowsAsyncWithHttpInfo
     *
     * Unhide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  double $height The new row height. (optional, default to 15.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUnhideWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $height = '15.0', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostUnhideWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $height, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUnhideWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  double $height The new row height. (optional, default to 15.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostUnhideWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $height = '15.0', $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUnhideWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUnhideWorksheetRows'
            );
        }
        // verify the required parameter 'startrow' is set
        if ($startrow === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startrow when calling cellsPostUnhideWorksheetRows'
            );
        }
        // verify the required parameter 'total_rows' is set
        if ($total_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_rows when calling cellsPostUnhideWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/unhide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startrow !== null) {
            $queryParams['startrow'] = ObjectSerializer::toQueryValue($startrow);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUpdateWorksheetCellStyle
     *
     * Update cell's style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\StyleResponse
     */
    public function cellsPostUpdateWorksheetCellStyle($name, $sheet_name, $cell_name, $style = null, $folder = null)
    {
        list($response) = $this->cellsPostUpdateWorksheetCellStyleWithHttpInfo($name, $sheet_name, $cell_name, $style, $folder);
        return $response;
    }

    /**
     * Operation cellsPostUpdateWorksheetCellStyleWithHttpInfo
     *
     * Update cell's style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\StyleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostUpdateWorksheetCellStyleWithHttpInfo($name, $sheet_name, $cell_name, $style = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\StyleResponse';
        $request = $this->cellsPostUpdateWorksheetCellStyleRequest($name, $sheet_name, $cell_name, $style, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\StyleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUpdateWorksheetCellStyleAsync
     *
     * Update cell's style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUpdateWorksheetCellStyleAsync($name, $sheet_name, $cell_name, $style = null, $folder = null)
    {
        return $this->cellsPostUpdateWorksheetCellStyleAsyncWithHttpInfo($name, $sheet_name, $cell_name, $style, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUpdateWorksheetCellStyleAsyncWithHttpInfo
     *
     * Update cell's style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUpdateWorksheetCellStyleAsyncWithHttpInfo($name, $sheet_name, $cell_name, $style = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\StyleResponse';
        $request = $this->cellsPostUpdateWorksheetCellStyleRequest($name, $sheet_name, $cell_name, $style, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUpdateWorksheetCellStyle'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostUpdateWorksheetCellStyleRequest($name, $sheet_name, $cell_name, $style = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUpdateWorksheetCellStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUpdateWorksheetCellStyle'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsPostUpdateWorksheetCellStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($style)) {
            $_tempBody = $style;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUpdateWorksheetRangeStyle
     *
     * Update cell's range style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostUpdateWorksheetRangeStyle($name, $sheet_name, $range, $style = null, $folder = null)
    {
        list($response) = $this->cellsPostUpdateWorksheetRangeStyleWithHttpInfo($name, $sheet_name, $range, $style, $folder);
        return $response;
    }

    /**
     * Operation cellsPostUpdateWorksheetRangeStyleWithHttpInfo
     *
     * Update cell's range style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostUpdateWorksheetRangeStyleWithHttpInfo($name, $sheet_name, $range, $style = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostUpdateWorksheetRangeStyleRequest($name, $sheet_name, $range, $style, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUpdateWorksheetRangeStyleAsync
     *
     * Update cell's range style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUpdateWorksheetRangeStyleAsync($name, $sheet_name, $range, $style = null, $folder = null)
    {
        return $this->cellsPostUpdateWorksheetRangeStyleAsyncWithHttpInfo($name, $sheet_name, $range, $style, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUpdateWorksheetRangeStyleAsyncWithHttpInfo
     *
     * Update cell's range style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUpdateWorksheetRangeStyleAsyncWithHttpInfo($name, $sheet_name, $range, $style = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostUpdateWorksheetRangeStyleRequest($name, $sheet_name, $range, $style, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUpdateWorksheetRangeStyle'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostUpdateWorksheetRangeStyleRequest($name, $sheet_name, $range, $style = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUpdateWorksheetRangeStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUpdateWorksheetRangeStyle'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsPostUpdateWorksheetRangeStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/style';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($style)) {
            $_tempBody = $style;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUpdateWorksheetRow
     *
     * Update worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  double $height The new row height. (optional, default to 0.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\RowResponse
     */
    public function cellsPostUpdateWorksheetRow($name, $sheet_name, $row_index, $height = '0.0', $folder = null)
    {
        list($response) = $this->cellsPostUpdateWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $height, $folder);
        return $response;
    }

    /**
     * Operation cellsPostUpdateWorksheetRowWithHttpInfo
     *
     * Update worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  double $height The new row height. (optional, default to 0.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\RowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostUpdateWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $height = '0.0', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RowResponse';
        $request = $this->cellsPostUpdateWorksheetRowRequest($name, $sheet_name, $row_index, $height, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\RowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUpdateWorksheetRowAsync
     *
     * Update worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  double $height The new row height. (optional, default to 0.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUpdateWorksheetRowAsync($name, $sheet_name, $row_index, $height = '0.0', $folder = null)
    {
        return $this->cellsPostUpdateWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $height, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUpdateWorksheetRowAsyncWithHttpInfo
     *
     * Update worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  double $height The new row height. (optional, default to 0.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostUpdateWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $height = '0.0', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RowResponse';
        $request = $this->cellsPostUpdateWorksheetRowRequest($name, $sheet_name, $row_index, $height, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUpdateWorksheetRow'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  double $height The new row height. (optional, default to 0.0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostUpdateWorksheetRowRequest($name, $sheet_name, $row_index, $height = '0.0', $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUpdateWorksheetRow'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUpdateWorksheetRow'
            );
        }
        // verify the required parameter 'row_index' is set
        if ($row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_index when calling cellsPostUpdateWorksheetRow'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($row_index !== null) {
            $resourcePath = str_replace(
                '{' . 'rowIndex' . '}',
                ObjectSerializer::toPathValue($row_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostWorksheetCellSetValue
     *
     * Set cell value.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $value The cell value. (optional)
     * @param  string $type The value type. (optional)
     * @param  string $formula Formula for cell (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellResponse
     */
    public function cellsPostWorksheetCellSetValue($name, $sheet_name, $cell_name, $value = null, $type = null, $formula = null, $folder = null)
    {
        list($response) = $this->cellsPostWorksheetCellSetValueWithHttpInfo($name, $sheet_name, $cell_name, $value, $type, $formula, $folder);
        return $response;
    }

    /**
     * Operation cellsPostWorksheetCellSetValueWithHttpInfo
     *
     * Set cell value.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $value The cell value. (optional)
     * @param  string $type The value type. (optional)
     * @param  string $formula Formula for cell (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostWorksheetCellSetValueWithHttpInfo($name, $sheet_name, $cell_name, $value = null, $type = null, $formula = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellResponse';
        $request = $this->cellsPostWorksheetCellSetValueRequest($name, $sheet_name, $cell_name, $value, $type, $formula, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostWorksheetCellSetValueAsync
     *
     * Set cell value.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $value The cell value. (optional)
     * @param  string $type The value type. (optional)
     * @param  string $formula Formula for cell (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostWorksheetCellSetValueAsync($name, $sheet_name, $cell_name, $value = null, $type = null, $formula = null, $folder = null)
    {
        return $this->cellsPostWorksheetCellSetValueAsyncWithHttpInfo($name, $sheet_name, $cell_name, $value, $type, $formula, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostWorksheetCellSetValueAsyncWithHttpInfo
     *
     * Set cell value.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $value The cell value. (optional)
     * @param  string $type The value type. (optional)
     * @param  string $formula Formula for cell (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostWorksheetCellSetValueAsyncWithHttpInfo($name, $sheet_name, $cell_name, $value = null, $type = null, $formula = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellResponse';
        $request = $this->cellsPostWorksheetCellSetValueRequest($name, $sheet_name, $cell_name, $value, $type, $formula, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostWorksheetCellSetValue'
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $value The cell value. (optional)
     * @param  string $type The value type. (optional)
     * @param  string $formula Formula for cell (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostWorksheetCellSetValueRequest($name, $sheet_name, $cell_name, $value = null, $type = null, $formula = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostWorksheetCellSetValue'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostWorksheetCellSetValue'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsPostWorksheetCellSetValue'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($formula !== null) {
            $queryParams['formula'] = ObjectSerializer::toQueryValue($formula);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostWorksheetMerge
     *
     * Merge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostWorksheetMerge($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null)
    {
        list($response) = $this->cellsPostWorksheetMergeWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder);
        return $response;
    }

    /**
     * Operation cellsPostWorksheetMergeWithHttpInfo
     *
     * Merge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostWorksheetMergeWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostWorksheetMergeRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostWorksheetMergeAsync
     *
     * Merge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostWorksheetMergeAsync($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null)
    {
        return $this->cellsPostWorksheetMergeAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostWorksheetMergeAsyncWithHttpInfo
     *
     * Merge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostWorksheetMergeAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostWorksheetMergeRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostWorksheetMerge'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostWorksheetMergeRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostWorksheetMerge'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostWorksheetMerge'
            );
        }
        // verify the required parameter 'start_row' is set
        if ($start_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_row when calling cellsPostWorksheetMerge'
            );
        }
        // verify the required parameter 'start_column' is set
        if ($start_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_column when calling cellsPostWorksheetMerge'
            );
        }
        // verify the required parameter 'total_rows' is set
        if ($total_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_rows when calling cellsPostWorksheetMerge'
            );
        }
        // verify the required parameter 'total_columns' is set
        if ($total_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_columns when calling cellsPostWorksheetMerge'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($total_columns !== null) {
            $queryParams['totalColumns'] = ObjectSerializer::toQueryValue($total_columns);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostWorksheetUnmerge
     *
     * Unmerge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPostWorksheetUnmerge($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null)
    {
        list($response) = $this->cellsPostWorksheetUnmergeWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder);
        return $response;
    }

    /**
     * Operation cellsPostWorksheetUnmergeWithHttpInfo
     *
     * Unmerge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPostWorksheetUnmergeWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostWorksheetUnmergeRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostWorksheetUnmergeAsync
     *
     * Unmerge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostWorksheetUnmergeAsync($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null)
    {
        return $this->cellsPostWorksheetUnmergeAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostWorksheetUnmergeAsyncWithHttpInfo
     *
     * Unmerge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPostWorksheetUnmergeAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPostWorksheetUnmergeRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostWorksheetUnmerge'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPostWorksheetUnmergeRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostWorksheetUnmerge'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostWorksheetUnmerge'
            );
        }
        // verify the required parameter 'start_row' is set
        if ($start_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_row when calling cellsPostWorksheetUnmerge'
            );
        }
        // verify the required parameter 'start_column' is set
        if ($start_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_column when calling cellsPostWorksheetUnmerge'
            );
        }
        // verify the required parameter 'total_rows' is set
        if ($total_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_rows when calling cellsPostWorksheetUnmerge'
            );
        }
        // verify the required parameter 'total_columns' is set
        if ($total_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_columns when calling cellsPostWorksheetUnmerge'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/unmerge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($total_columns !== null) {
            $queryParams['totalColumns'] = ObjectSerializer::toQueryValue($total_columns);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPutInsertWorksheetColumns
     *
     * Insert worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (optional, default to true)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ColumnsResponse
     */
    public function cellsPutInsertWorksheetColumns($name, $sheet_name, $column_index, $columns, $update_reference = 'true', $folder = null)
    {
        list($response) = $this->cellsPutInsertWorksheetColumnsWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference, $folder);
        return $response;
    }

    /**
     * Operation cellsPutInsertWorksheetColumnsWithHttpInfo
     *
     * Insert worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (optional, default to true)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ColumnsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPutInsertWorksheetColumnsWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference = 'true', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnsResponse';
        $request = $this->cellsPutInsertWorksheetColumnsRequest($name, $sheet_name, $column_index, $columns, $update_reference, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ColumnsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPutInsertWorksheetColumnsAsync
     *
     * Insert worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (optional, default to true)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPutInsertWorksheetColumnsAsync($name, $sheet_name, $column_index, $columns, $update_reference = 'true', $folder = null)
    {
        return $this->cellsPutInsertWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPutInsertWorksheetColumnsAsyncWithHttpInfo
     *
     * Insert worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (optional, default to true)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPutInsertWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference = 'true', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnsResponse';
        $request = $this->cellsPutInsertWorksheetColumnsRequest($name, $sheet_name, $column_index, $columns, $update_reference, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPutInsertWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (optional, default to true)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPutInsertWorksheetColumnsRequest($name, $sheet_name, $column_index, $columns, $update_reference = 'true', $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPutInsertWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPutInsertWorksheetColumns'
            );
        }
        // verify the required parameter 'column_index' is set
        if ($column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_index when calling cellsPutInsertWorksheetColumns'
            );
        }
        // verify the required parameter 'columns' is set
        if ($columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $columns when calling cellsPutInsertWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }
        // query params
        if ($update_reference !== null) {
            $queryParams['updateReference'] = ObjectSerializer::toQueryValue($update_reference);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($column_index !== null) {
            $resourcePath = str_replace(
                '{' . 'columnIndex' . '}',
                ObjectSerializer::toPathValue($column_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPutInsertWorksheetRow
     *
     * Insert new worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The new row index. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\RowResponse
     */
    public function cellsPutInsertWorksheetRow($name, $sheet_name, $row_index, $folder = null)
    {
        list($response) = $this->cellsPutInsertWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $folder);
        return $response;
    }

    /**
     * Operation cellsPutInsertWorksheetRowWithHttpInfo
     *
     * Insert new worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The new row index. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\RowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPutInsertWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RowResponse';
        $request = $this->cellsPutInsertWorksheetRowRequest($name, $sheet_name, $row_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\RowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPutInsertWorksheetRowAsync
     *
     * Insert new worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The new row index. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPutInsertWorksheetRowAsync($name, $sheet_name, $row_index, $folder = null)
    {
        return $this->cellsPutInsertWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPutInsertWorksheetRowAsyncWithHttpInfo
     *
     * Insert new worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The new row index. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPutInsertWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RowResponse';
        $request = $this->cellsPutInsertWorksheetRowRequest($name, $sheet_name, $row_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPutInsertWorksheetRow'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The new row index. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPutInsertWorksheetRowRequest($name, $sheet_name, $row_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPutInsertWorksheetRow'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPutInsertWorksheetRow'
            );
        }
        // verify the required parameter 'row_index' is set
        if ($row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_index when calling cellsPutInsertWorksheetRow'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($row_index !== null) {
            $resourcePath = str_replace(
                '{' . 'rowIndex' . '}',
                ObjectSerializer::toPathValue($row_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPutInsertWorksheetRows
     *
     * Insert several new worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPutInsertWorksheetRows($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null)
    {
        list($response) = $this->cellsPutInsertWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder);
        return $response;
    }

    /**
     * Operation cellsPutInsertWorksheetRowsWithHttpInfo
     *
     * Insert several new worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPutInsertWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPutInsertWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPutInsertWorksheetRowsAsync
     *
     * Insert several new worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPutInsertWorksheetRowsAsync($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null)
    {
        return $this->cellsPutInsertWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPutInsertWorksheetRowsAsyncWithHttpInfo
     *
     * Insert several new worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPutInsertWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPutInsertWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPutInsertWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPutInsertWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPutInsertWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPutInsertWorksheetRows'
            );
        }
        // verify the required parameter 'startrow' is set
        if ($startrow === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startrow when calling cellsPutInsertWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startrow !== null) {
            $queryParams['startrow'] = ObjectSerializer::toQueryValue($startrow);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($update_reference !== null) {
            $queryParams['updateReference'] = ObjectSerializer::toQueryValue($update_reference);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
