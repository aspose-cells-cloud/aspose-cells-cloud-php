<?php
/* 
 * <summary>
 *  Copyright (c) 2022 Aspose.Cells Cloud
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all 
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 */


namespace Aspose\Cells\Cloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aspose\Cells\Cloud\ApiException;
use Aspose\Cells\Cloud\Configuration;
use Aspose\Cells\Cloud\HeaderSelector;
use Aspose\Cells\Cloud\ObjectSerializer;
use Aspose\Cells\Cloud\Request\GetWorksheetAutoFilterRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetDateFilterRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetFilterRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetIconFilterRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetCustomFilterRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetDynamicFilterRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetFilterTop10Request;
use Aspose\Cells\Cloud\Request\PutWorksheetColorFilterRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetMatchBlanksRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetMatchNonBlanksRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetAutoFilterRefreshRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetDateFilterRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetFilterRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetAutoshapesRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetAutoshapeWithFormatRequest;
use Aspose\Cells\Cloud\Request\PostBatchConvertRequest;
use Aspose\Cells\Cloud\Request\GetExtractBarcodesRequest;
use Aspose\Cells\Cloud\Request\PostClearContentsRequest;
use Aspose\Cells\Cloud\Request\PostClearFormatsRequest;
use Aspose\Cells\Cloud\Request\PostUpdateWorksheetRangeStyleRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetMergeRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetUnmergeRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetCellsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetCellRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetCellStyleRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetCellSetValueRequest;
use Aspose\Cells\Cloud\Request\PostUpdateWorksheetCellStyleRequest;
use Aspose\Cells\Cloud\Request\PostSetCellRangeValueRequest;
use Aspose\Cells\Cloud\Request\PostCopyCellIntoCellRequest;
use Aspose\Cells\Cloud\Request\GetCellHtmlStringRequest;
use Aspose\Cells\Cloud\Request\PostSetCellHtmlStringRequest;
use Aspose\Cells\Cloud\Request\PostCellCalculateRequest;
use Aspose\Cells\Cloud\Request\PostCellCharactersRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetColumnsRequest;
use Aspose\Cells\Cloud\Request\PostSetWorksheetColumnWidthRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetColumnRequest;
use Aspose\Cells\Cloud\Request\PutInsertWorksheetColumnsRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetColumnsRequest;
use Aspose\Cells\Cloud\Request\PostHideWorksheetColumnsRequest;
use Aspose\Cells\Cloud\Request\PostUnhideWorksheetColumnsRequest;
use Aspose\Cells\Cloud\Request\PostGroupWorksheetColumnsRequest;
use Aspose\Cells\Cloud\Request\PostUngroupWorksheetColumnsRequest;
use Aspose\Cells\Cloud\Request\PostCopyWorksheetColumnsRequest;
use Aspose\Cells\Cloud\Request\PostColumnStyleRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetRowsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetRowRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetRowRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetRowsRequest;
use Aspose\Cells\Cloud\Request\PutInsertWorksheetRowsRequest;
use Aspose\Cells\Cloud\Request\PutInsertWorksheetRowRequest;
use Aspose\Cells\Cloud\Request\PostUpdateWorksheetRowRequest;
use Aspose\Cells\Cloud\Request\PostHideWorksheetRowsRequest;
use Aspose\Cells\Cloud\Request\PostUnhideWorksheetRowsRequest;
use Aspose\Cells\Cloud\Request\PostGroupWorksheetRowsRequest;
use Aspose\Cells\Cloud\Request\PostUngroupWorksheetRowsRequest;
use Aspose\Cells\Cloud\Request\PostCopyWorksheetRowsRequest;
use Aspose\Cells\Cloud\Request\PostRowStyleRequest;
use Aspose\Cells\Cloud\Request\GetCellsCloudServicesHealthCheckRequest;
use Aspose\Cells\Cloud\Request\GetCellsCloudServiceStatusRequest;
use Aspose\Cells\Cloud\Request\GetChartAreaRequest;
use Aspose\Cells\Cloud\Request\GetChartAreaFillFormatRequest;
use Aspose\Cells\Cloud\Request\GetChartAreaBorderRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetChartsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetChartRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetAddChartRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetDeleteChartRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetChartRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetChartLegendRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetChartLegendRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetChartLegendRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetChartLegendRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetClearChartsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetChartTitleRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetChartTitleRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetChartTitleRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetChartTitleRequest;
use Aspose\Cells\Cloud\Request\GetChartSeriesAxisRequest;
use Aspose\Cells\Cloud\Request\GetChartCategoryAxisRequest;
use Aspose\Cells\Cloud\Request\GetChartValueAxisRequest;
use Aspose\Cells\Cloud\Request\GetChartSecondCategoryAxisRequest;
use Aspose\Cells\Cloud\Request\GetChartSecondValueAxisRequest;
use Aspose\Cells\Cloud\Request\PostChartSeriesAxisRequest;
use Aspose\Cells\Cloud\Request\PostChartCategoryAxisRequest;
use Aspose\Cells\Cloud\Request\PostChartValueAxisRequest;
use Aspose\Cells\Cloud\Request\PostChartSecondCategoryAxisRequest;
use Aspose\Cells\Cloud\Request\PostChartSecondValueAxisRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetConditionalFormattingsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetConditionalFormattingRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetConditionalFormattingRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetFormatConditionRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetFormatConditionAreaRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetFormatConditionConditionRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetConditionalFormattingsRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetConditionalFormattingRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetConditionalFormattingAreaRequest;
use Aspose\Cells\Cloud\Request\GetWorkbookRequest;
use Aspose\Cells\Cloud\Request\PutConvertWorkbookRequest;
use Aspose\Cells\Cloud\Request\PostWorkbookSaveAsRequest;
use Aspose\Cells\Cloud\Request\PostConvertWorkbookToPDFRequest;
use Aspose\Cells\Cloud\Request\PostConvertWorkbookToPNGRequest;
use Aspose\Cells\Cloud\Request\PostConvertWorkbookToDocxRequest;
use Aspose\Cells\Cloud\Request\PostConvertWorkbookToPptxRequest;
use Aspose\Cells\Cloud\Request\PostConvertWorkbookToHtmlRequest;
use Aspose\Cells\Cloud\Request\PostConvertWorkbookToMarkdownRequest;
use Aspose\Cells\Cloud\Request\PostConvertWorkbookToJsonRequest;
use Aspose\Cells\Cloud\Request\PostConvertWorkbookToSQLRequest;
use Aspose\Cells\Cloud\Request\PostConvertWorkbookToCSVRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetHyperlinksRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetHyperlinkRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetHyperlinkRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetHyperlinkRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetHyperlinkRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetHyperlinksRequest;
use Aspose\Cells\Cloud\Request\PostAssembleRequest;
use Aspose\Cells\Cloud\Request\PostCompressRequest;
use Aspose\Cells\Cloud\Request\PostExportRequest;
use Aspose\Cells\Cloud\Request\PostMergeRequest;
use Aspose\Cells\Cloud\Request\PostUnlockRequest;
use Aspose\Cells\Cloud\Request\PostProtectRequest;
use Aspose\Cells\Cloud\Request\PostSplitRequest;
use Aspose\Cells\Cloud\Request\PostSearchRequest;
use Aspose\Cells\Cloud\Request\PostReplaceRequest;
use Aspose\Cells\Cloud\Request\PostImportRequest;
use Aspose\Cells\Cloud\Request\PostWatermarkRequest;
use Aspose\Cells\Cloud\Request\PostClearObjectsRequest;
use Aspose\Cells\Cloud\Request\PostReverseRequest;
use Aspose\Cells\Cloud\Request\PostRotateRequest;
use Aspose\Cells\Cloud\Request\PostMetadataRequest;
use Aspose\Cells\Cloud\Request\GetMetadataRequest;
use Aspose\Cells\Cloud\Request\DeleteMetadataRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetListObjectsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetListObjectRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetListObjectRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetListObjectsRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetListObjectRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetListObjectRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetListObjectConvertToRangeRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetListObjectSummarizeWithPivotTableRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetListObjectSortTableRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetListColumnRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetListColumnsTotalRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetOleObjectsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetOleObjectRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetOleObjectsRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetOleObjectRequest;
use Aspose\Cells\Cloud\Request\PostUpdateWorksheetOleObjectRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetOleObjectRequest;
use Aspose\Cells\Cloud\Request\GetVerticalPageBreaksRequest;
use Aspose\Cells\Cloud\Request\GetHorizontalPageBreaksRequest;
use Aspose\Cells\Cloud\Request\GetVerticalPageBreakRequest;
use Aspose\Cells\Cloud\Request\GetHorizontalPageBreakRequest;
use Aspose\Cells\Cloud\Request\PutVerticalPageBreakRequest;
use Aspose\Cells\Cloud\Request\PutHorizontalPageBreakRequest;
use Aspose\Cells\Cloud\Request\DeleteVerticalPageBreaksRequest;
use Aspose\Cells\Cloud\Request\DeleteHorizontalPageBreaksRequest;
use Aspose\Cells\Cloud\Request\DeleteVerticalPageBreakRequest;
use Aspose\Cells\Cloud\Request\DeleteHorizontalPageBreakRequest;
use Aspose\Cells\Cloud\Request\GetPageSetupRequest;
use Aspose\Cells\Cloud\Request\PostPageSetupRequest;
use Aspose\Cells\Cloud\Request\DeleteHeaderFooterRequest;
use Aspose\Cells\Cloud\Request\GetHeaderRequest;
use Aspose\Cells\Cloud\Request\PostHeaderRequest;
use Aspose\Cells\Cloud\Request\GetFooterRequest;
use Aspose\Cells\Cloud\Request\PostFooterRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetPicturesRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetPictureWithFormatRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetAddPictureRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetPictureRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetPictureRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetPicturesRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetPivotTablesRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetPivotTableRequest;
use Aspose\Cells\Cloud\Request\GetPivotTableFieldRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetPivotTableFiltersRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetPivotTableFilterRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetPivotTableRequest;
use Aspose\Cells\Cloud\Request\PutPivotTableFieldRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetPivotTableFilterRequest;
use Aspose\Cells\Cloud\Request\PostPivotTableFieldHideItemRequest;
use Aspose\Cells\Cloud\Request\PostPivotTableFieldMoveToRequest;
use Aspose\Cells\Cloud\Request\PostPivotTableCellStyleRequest;
use Aspose\Cells\Cloud\Request\PostPivotTableStyleRequest;
use Aspose\Cells\Cloud\Request\PostPivotTableUpdatePivotFieldsRequest;
use Aspose\Cells\Cloud\Request\PostPivotTableUpdatePivotFieldRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetPivotTableCalculateRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetPivotTableMoveRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetPivotTablesRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetPivotTableRequest;
use Aspose\Cells\Cloud\Request\DeletePivotTableFieldRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetPivotTableFiltersRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetPivotTableFilterRequest;
use Aspose\Cells\Cloud\Request\GetDocumentPropertiesRequest;
use Aspose\Cells\Cloud\Request\GetDocumentPropertyRequest;
use Aspose\Cells\Cloud\Request\PutDocumentPropertyRequest;
use Aspose\Cells\Cloud\Request\DeleteDocumentPropertyRequest;
use Aspose\Cells\Cloud\Request\DeleteDocumentPropertiesRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetCellsRangesRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetCellsRangeMergeRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetCellsRangeUnMergeRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetCellsRangeStyleRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetCellsRangeValueRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetCellsRangeValueRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetCellsRangeMoveToRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetCellsRangeOutlineBorderRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetCellsRangeColumnWidthRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetCellsRangeRowHeightRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetCellsRangeRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetCellsRangeRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetShapesRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetShapeRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetShapeRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetShapesRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetShapeRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetShapeRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetGroupShapeRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetUngroupShapeRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetSparklineGroupsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetSparklineGroupRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetSparklineGroupsRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetSparklineGroupRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetSparklineGroupRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetSparklineGroupRequest;
use Aspose\Cells\Cloud\Request\PostRunTaskRequest;
use Aspose\Cells\Cloud\Request\PostDigitalSignatureRequest;
use Aspose\Cells\Cloud\Request\PostEncryptWorkbookRequest;
use Aspose\Cells\Cloud\Request\DeleteDecryptWorkbookRequest;
use Aspose\Cells\Cloud\Request\PostProtectWorkbookRequest;
use Aspose\Cells\Cloud\Request\DeleteUnProtectWorkbookRequest;
use Aspose\Cells\Cloud\Request\GetWorkbookDefaultStyleRequest;
use Aspose\Cells\Cloud\Request\GetWorkbookTextItemsRequest;
use Aspose\Cells\Cloud\Request\GetWorkbookNamesRequest;
use Aspose\Cells\Cloud\Request\PutWorkbookNameRequest;
use Aspose\Cells\Cloud\Request\GetWorkbookNameRequest;
use Aspose\Cells\Cloud\Request\PostWorkbookNameRequest;
use Aspose\Cells\Cloud\Request\GetWorkbookNameValueRequest;
use Aspose\Cells\Cloud\Request\DeleteWorkbookNamesRequest;
use Aspose\Cells\Cloud\Request\DeleteWorkbookNameRequest;
use Aspose\Cells\Cloud\Request\PutDocumentProtectFromChangesRequest;
use Aspose\Cells\Cloud\Request\DeleteDocumentUnProtectFromChangesRequest;
use Aspose\Cells\Cloud\Request\PostWorkbooksMergeRequest;
use Aspose\Cells\Cloud\Request\PostWorkbooksTextSearchRequest;
use Aspose\Cells\Cloud\Request\PostWorkbookTextReplaceRequest;
use Aspose\Cells\Cloud\Request\PostWorkbookGetSmartMarkerResultRequest;
use Aspose\Cells\Cloud\Request\PutWorkbookCreateRequest;
use Aspose\Cells\Cloud\Request\PostWorkbookSplitRequest;
use Aspose\Cells\Cloud\Request\PostImportDataRequest;
use Aspose\Cells\Cloud\Request\PostWorkbookCalculateFormulaRequest;
use Aspose\Cells\Cloud\Request\PostAutofitWorkbookRowsRequest;
use Aspose\Cells\Cloud\Request\PostAutofitWorkbookColumnsRequest;
use Aspose\Cells\Cloud\Request\GetWorkbookSettingsRequest;
use Aspose\Cells\Cloud\Request\PostWorkbookSettingsRequest;
use Aspose\Cells\Cloud\Request\PutWorkbookBackgroundRequest;
use Aspose\Cells\Cloud\Request\DeleteWorkbookBackgroundRequest;
use Aspose\Cells\Cloud\Request\PutWorkbookWaterMarkerRequest;
use Aspose\Cells\Cloud\Request\GetPageCountRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetWithFormatRequest;
use Aspose\Cells\Cloud\Request\PutChangeVisibilityWorksheetRequest;
use Aspose\Cells\Cloud\Request\PutActiveWorksheetRequest;
use Aspose\Cells\Cloud\Request\PutInsertNewWorksheetRequest;
use Aspose\Cells\Cloud\Request\PutAddNewWorksheetRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetsRequest;
use Aspose\Cells\Cloud\Request\PostMoveWorksheetRequest;
use Aspose\Cells\Cloud\Request\PutProtectWorksheetRequest;
use Aspose\Cells\Cloud\Request\DeleteUnprotectWorksheetRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetTextItemsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetCommentsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetCommentRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetCommentRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetCommentRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetCommentRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetCommentsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetMergedCellsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetMergedCellRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetCalculateFormulaRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetCalculateFormulaRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetTextSearchRequest;
use Aspose\Cells\Cloud\Request\PostWorsheetTextReplaceRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetRangeSortRequest;
use Aspose\Cells\Cloud\Request\PostAutofitWorksheetRowRequest;
use Aspose\Cells\Cloud\Request\PostAutofitWorksheetRowsRequest;
use Aspose\Cells\Cloud\Request\PostAutofitWorksheetColumnsRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetBackgroundRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetBackgroundRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetFreezePanesRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetFreezePanesRequest;
use Aspose\Cells\Cloud\Request\PostCopyWorksheetRequest;
use Aspose\Cells\Cloud\Request\PostRenameWorksheetRequest;
use Aspose\Cells\Cloud\Request\PostUpdateWorksheetPropertyRequest;
use Aspose\Cells\Cloud\Request\GetNamedRangesRequest;
use Aspose\Cells\Cloud\Request\GetNamedRangeValueRequest;
use Aspose\Cells\Cloud\Request\PostUpdateWorksheetZoomRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetPageCountRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetValidationsRequest;
use Aspose\Cells\Cloud\Request\GetWorksheetValidationRequest;
use Aspose\Cells\Cloud\Request\PutWorksheetValidationRequest;
use Aspose\Cells\Cloud\Request\PostWorksheetValidationRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetValidationRequest;
use Aspose\Cells\Cloud\Request\DeleteWorksheetValidationsRequest;
use Aspose\Cells\Cloud\Request\DownloadFileRequest;
use Aspose\Cells\Cloud\Request\UploadFileRequest;
use Aspose\Cells\Cloud\Request\CopyFileRequest;
use Aspose\Cells\Cloud\Request\MoveFileRequest;
use Aspose\Cells\Cloud\Request\DeleteFileRequest;
use Aspose\Cells\Cloud\Request\GetFilesListRequest;
use Aspose\Cells\Cloud\Request\CreateFolderRequest;
use Aspose\Cells\Cloud\Request\CopyFolderRequest;
use Aspose\Cells\Cloud\Request\MoveFolderRequest;
use Aspose\Cells\Cloud\Request\DeleteFolderRequest;
use Aspose\Cells\Cloud\Request\StorageExistsRequest;
use Aspose\Cells\Cloud\Request\ObjectExistsRequest;
use Aspose\Cells\Cloud\Request\GetDiscUsageRequest;
use Aspose\Cells\Cloud\Request\GetFileVersionsRequest;
use Aspose\Cells\Cloud\Model\DiscUsage;
use Aspose\Cells\Cloud\Model\ObjectExist;
use Aspose\Cells\Cloud\Model\ObjectExistsExtensions;
use Aspose\Cells\Cloud\Model\FileVersion;
use Aspose\Cells\Cloud\Model\StorageExist;
use Aspose\Cells\Cloud\Model\FileVersions;
use Aspose\Cells\Cloud\Model\FilesList;
use Aspose\Cells\Cloud\Model\FilesUploadResult;
use Aspose\Cells\Cloud\Model\StorageFile;
use Aspose\Cells\Cloud\Model\GoogleDriveStorageFile;
use Aspose\Cells\Cloud\Model\AboveAverage;
use Aspose\Cells\Cloud\Model\AutoFilter;
use Aspose\Cells\Cloud\Model\AutoFitterOptions;
use Aspose\Cells\Cloud\Model\Border;
use Aspose\Cells\Cloud\Model\CalculationOptions;
use Aspose\Cells\Cloud\Model\Cell;
use Aspose\Cells\Cloud\Model\CellArea;
use Aspose\Cells\Cloud\Model\Cells;
use Aspose\Cells\Cloud\Model\CellsCloudFileInfo;
use Aspose\Cells\Cloud\Model\CellsColor;
use Aspose\Cells\Cloud\Model\CellsDocumentProperties;
use Aspose\Cells\Cloud\Model\CellsDocumentProperty;
use Aspose\Cells\Cloud\Model\Color;
use Aspose\Cells\Cloud\Model\ColorFilter;
use Aspose\Cells\Cloud\Model\ColorScale;
use Aspose\Cells\Cloud\Model\Column;
use Aspose\Cells\Cloud\Model\Columns;
use Aspose\Cells\Cloud\Model\Comment;
use Aspose\Cells\Cloud\Model\Comments;
use Aspose\Cells\Cloud\Model\ConditionalFormatting;
use Aspose\Cells\Cloud\Model\ConditionalFormattingIcon;
use Aspose\Cells\Cloud\Model\ConditionalFormattings;
use Aspose\Cells\Cloud\Model\ConditionalFormattingValue;
use Aspose\Cells\Cloud\Model\CopyOptions;
use Aspose\Cells\Cloud\Model\CriteriaMultipleFilter;
use Aspose\Cells\Cloud\Model\CustomFilter;
use Aspose\Cells\Cloud\Model\DataBar;
use Aspose\Cells\Cloud\Model\DataBarBorder;
use Aspose\Cells\Cloud\Model\DataSorter;
use Aspose\Cells\Cloud\Model\DateTimeGroupItem;
use Aspose\Cells\Cloud\Model\DynamicFilter;
use Aspose\Cells\Cloud\Model\FileInfo;
use Aspose\Cells\Cloud\Model\FilesResult;
use Aspose\Cells\Cloud\Model\FilterColumn;
use Aspose\Cells\Cloud\Model\Font;
use Aspose\Cells\Cloud\Model\FontSetting;
use Aspose\Cells\Cloud\Model\FormatCondition;
use Aspose\Cells\Cloud\Model\FormulaFormatCondition;
use Aspose\Cells\Cloud\Model\HorizontalPageBreak;
use Aspose\Cells\Cloud\Model\HorizontalPageBreaks;
use Aspose\Cells\Cloud\Model\Hyperlink;
use Aspose\Cells\Cloud\Model\Hyperlinks;
use Aspose\Cells\Cloud\Model\IconFilter;
use Aspose\Cells\Cloud\Model\IconSet;
use Aspose\Cells\Cloud\Model\Link;
use Aspose\Cells\Cloud\Model\LinkElement;
use Aspose\Cells\Cloud\Model\LoadOptions;
use Aspose\Cells\Cloud\Model\MergedCell;
use Aspose\Cells\Cloud\Model\MergedCells;
use Aspose\Cells\Cloud\Model\MultipleFilter;
use Aspose\Cells\Cloud\Model\MultipleFilters;
use Aspose\Cells\Cloud\Model\Name;
use Aspose\Cells\Cloud\Model\Names;
use Aspose\Cells\Cloud\Model\NegativeBarFormat;
use Aspose\Cells\Cloud\Model\PageSection;
use Aspose\Cells\Cloud\Model\PageSetup;
use Aspose\Cells\Cloud\Model\PasteOptions;
use Aspose\Cells\Cloud\Model\PdfSecurityOptions;
use Aspose\Cells\Cloud\Model\ProtectSheetParameter;
use Aspose\Cells\Cloud\Model\Range;
use Aspose\Cells\Cloud\Model\Ranges;
use Aspose\Cells\Cloud\Model\Row;
use Aspose\Cells\Cloud\Model\Rows;
use Aspose\Cells\Cloud\Model\SaveResult;
use Aspose\Cells\Cloud\Model\SingleValue;
use Aspose\Cells\Cloud\Model\SortKey;
use Aspose\Cells\Cloud\Model\SplitResult;
use Aspose\Cells\Cloud\Model\SplitResultDocument;
use Aspose\Cells\Cloud\Model\Style;
use Aspose\Cells\Cloud\Model\StyleFormatCondition;
use Aspose\Cells\Cloud\Model\Styles;
use Aspose\Cells\Cloud\Model\TextFormatCondition;
use Aspose\Cells\Cloud\Model\TextItem;
use Aspose\Cells\Cloud\Model\TextItems;
use Aspose\Cells\Cloud\Model\TextOptions;
use Aspose\Cells\Cloud\Model\ThemeColor;
use Aspose\Cells\Cloud\Model\TimePeriodFormatCondition;
use Aspose\Cells\Cloud\Model\Top10;
use Aspose\Cells\Cloud\Model\Top10Filter;
use Aspose\Cells\Cloud\Model\Validation;
use Aspose\Cells\Cloud\Model\Validations;
use Aspose\Cells\Cloud\Model\VerticalPageBreak;
use Aspose\Cells\Cloud\Model\VerticalPageBreaks;
use Aspose\Cells\Cloud\Model\Workbook;
use Aspose\Cells\Cloud\Model\WorkbookSettings;
use Aspose\Cells\Cloud\Model\Worksheet;
use Aspose\Cells\Cloud\Model\Worksheets;
use Aspose\Cells\Cloud\Model\CellsObjectOperateTaskParameter;
use Aspose\Cells\Cloud\Model\ConvertTaskParameter;
use Aspose\Cells\Cloud\Model\ConvertWorksheetTaskParameter;
use Aspose\Cells\Cloud\Model\FileSource;
use Aspose\Cells\Cloud\Model\ImportDataTaskParameter;
use Aspose\Cells\Cloud\Model\ResultDestination;
use Aspose\Cells\Cloud\Model\SaveFilesToCloudResult;
use Aspose\Cells\Cloud\Model\SaveResultTaskParameter;
use Aspose\Cells\Cloud\Model\SmartMarkerTaskParameter;
use Aspose\Cells\Cloud\Model\SplitWorkbookTaskParameter;
use Aspose\Cells\Cloud\Model\TaskData;
use Aspose\Cells\Cloud\Model\TaskDescription;
use Aspose\Cells\Cloud\Model\TaskParameter;
use Aspose\Cells\Cloud\Model\TaskResultParameter;
use Aspose\Cells\Cloud\Model\TaskRunResult;
use Aspose\Cells\Cloud\Model\ChartOperateParameter;
use Aspose\Cells\Cloud\Model\ListObjectOperateParameter;
use Aspose\Cells\Cloud\Model\OperateObject;
use Aspose\Cells\Cloud\Model\OperateObjectPosition;
use Aspose\Cells\Cloud\Model\OperateParameter;
use Aspose\Cells\Cloud\Model\PageBreakOperateParameter;
use Aspose\Cells\Cloud\Model\PageSetupOperateParameter;
use Aspose\Cells\Cloud\Model\PivotTableOperateParameter;
use Aspose\Cells\Cloud\Model\ShapeOperateParameter;
use Aspose\Cells\Cloud\Model\WorkbookOperateParameter;
use Aspose\Cells\Cloud\Model\WorkbookSettingsOperateParameter;
use Aspose\Cells\Cloud\Model\WorksheetOperateParameter;
use Aspose\Cells\Cloud\Model\ListColumn;
use Aspose\Cells\Cloud\Model\ListObject;
use Aspose\Cells\Cloud\Model\ListObjects;
use Aspose\Cells\Cloud\Model\DifSaveOptions;
use Aspose\Cells\Cloud\Model\DocxSaveOptions;
use Aspose\Cells\Cloud\Model\HtmlSaveOptions;
use Aspose\Cells\Cloud\Model\ImageSaveOptions;
use Aspose\Cells\Cloud\Model\JsonSaveOptions;
use Aspose\Cells\Cloud\Model\MarkdownSaveOptions;
use Aspose\Cells\Cloud\Model\MHtmlSaveOptions;
use Aspose\Cells\Cloud\Model\OdsSaveOptions;
use Aspose\Cells\Cloud\Model\OoxmlSaveOptions;
use Aspose\Cells\Cloud\Model\PdfSaveOptions;
use Aspose\Cells\Cloud\Model\PptxSaveOptions;
use Aspose\Cells\Cloud\Model\SaveOptions;
use Aspose\Cells\Cloud\Model\SpreadsheetML2003SaveOptions;
use Aspose\Cells\Cloud\Model\SqlScriptSaveOptions;
use Aspose\Cells\Cloud\Model\SvgSaveOptions;
use Aspose\Cells\Cloud\Model\TxtSaveOptions;
use Aspose\Cells\Cloud\Model\XlsbSaveOptions;
use Aspose\Cells\Cloud\Model\XlsSaveOptions;
use Aspose\Cells\Cloud\Model\XpsSaveOptions;
use Aspose\Cells\Cloud\Model\ArcShapeResponse;
use Aspose\Cells\Cloud\Model\AutoFilterResponse;
use Aspose\Cells\Cloud\Model\AutoShapeResponse;
use Aspose\Cells\Cloud\Model\AutoShapesResponse;
use Aspose\Cells\Cloud\Model\AxisResponse;
use Aspose\Cells\Cloud\Model\BarcodeResponse;
use Aspose\Cells\Cloud\Model\BarcodeResponseList;
use Aspose\Cells\Cloud\Model\BorderResponse;
use Aspose\Cells\Cloud\Model\ButtonResponse;
use Aspose\Cells\Cloud\Model\CalculateFormulaResponse;
use Aspose\Cells\Cloud\Model\CellResponse;
use Aspose\Cells\Cloud\Model\CellsCloudFileInfoResponse;
use Aspose\Cells\Cloud\Model\CellsCloudResponse;
use Aspose\Cells\Cloud\Model\CellsDocumentPropertiesResponse;
use Aspose\Cells\Cloud\Model\CellsDocumentPropertyResponse;
use Aspose\Cells\Cloud\Model\CellsDrawingResponse;
use Aspose\Cells\Cloud\Model\CellsResponse;
use Aspose\Cells\Cloud\Model\ChartAreaResponse;
use Aspose\Cells\Cloud\Model\ChartDataTableResponse;
use Aspose\Cells\Cloud\Model\ChartPointResponse;
use Aspose\Cells\Cloud\Model\ChartPointsResponse;
use Aspose\Cells\Cloud\Model\ChartResponse;
use Aspose\Cells\Cloud\Model\ChartsResponse;
use Aspose\Cells\Cloud\Model\CheckBoxResponse;
use Aspose\Cells\Cloud\Model\ColumnResponse;
use Aspose\Cells\Cloud\Model\ColumnsResponse;
use Aspose\Cells\Cloud\Model\ComboBoxResponse;
use Aspose\Cells\Cloud\Model\CommentResponse;
use Aspose\Cells\Cloud\Model\CommentShapeResponse;
use Aspose\Cells\Cloud\Model\CommentsResponse;
use Aspose\Cells\Cloud\Model\ConditionalFormattingResponse;
use Aspose\Cells\Cloud\Model\ConditionalFormattingsResponse;
use Aspose\Cells\Cloud\Model\DataLabelsResponse;
use Aspose\Cells\Cloud\Model\DisplayUnitLabelResponse;
use Aspose\Cells\Cloud\Model\DropBarsResponse;
use Aspose\Cells\Cloud\Model\ErrorBarResponse;
use Aspose\Cells\Cloud\Model\FillFormatResponse;
use Aspose\Cells\Cloud\Model\FindResponse;
use Aspose\Cells\Cloud\Model\FloorResponse;
use Aspose\Cells\Cloud\Model\FormResponse;
use Aspose\Cells\Cloud\Model\FormsResponse;
use Aspose\Cells\Cloud\Model\GroupBoxResponse;
use Aspose\Cells\Cloud\Model\HorizontalPageBreakResponse;
use Aspose\Cells\Cloud\Model\HorizontalPageBreaksResponse;
use Aspose\Cells\Cloud\Model\HyperlinkResponse;
use Aspose\Cells\Cloud\Model\HyperlinksResponse;
use Aspose\Cells\Cloud\Model\LabelResponse;
use Aspose\Cells\Cloud\Model\LegendEntriesResponse;
use Aspose\Cells\Cloud\Model\LegendEntryResponse;
use Aspose\Cells\Cloud\Model\LegendResponse;
use Aspose\Cells\Cloud\Model\LineResponse;
use Aspose\Cells\Cloud\Model\LineShapeResponse;
use Aspose\Cells\Cloud\Model\ListBoxResponse;
use Aspose\Cells\Cloud\Model\ListObjectResponse;
use Aspose\Cells\Cloud\Model\ListObjectsResponse;
use Aspose\Cells\Cloud\Model\MergedCellResponse;
use Aspose\Cells\Cloud\Model\MergedCellsResponse;
use Aspose\Cells\Cloud\Model\NameResponse;
use Aspose\Cells\Cloud\Model\NamesResponse;
use Aspose\Cells\Cloud\Model\OleObjectResponse;
use Aspose\Cells\Cloud\Model\OleObjectsResponse;
use Aspose\Cells\Cloud\Model\OvalResponse;
use Aspose\Cells\Cloud\Model\PageSectionsResponse;
use Aspose\Cells\Cloud\Model\PageSetupResponse;
use Aspose\Cells\Cloud\Model\PictureResponse;
use Aspose\Cells\Cloud\Model\PicturesResponse;
use Aspose\Cells\Cloud\Model\PivotFieldResponse;
use Aspose\Cells\Cloud\Model\PivotFilterResponse;
use Aspose\Cells\Cloud\Model\PivotFiltersResponse;
use Aspose\Cells\Cloud\Model\PivotTableResponse;
use Aspose\Cells\Cloud\Model\PivotTablesResponse;
use Aspose\Cells\Cloud\Model\PlotAreaResponse;
use Aspose\Cells\Cloud\Model\RadioButtonResponse;
use Aspose\Cells\Cloud\Model\RangeResponse;
use Aspose\Cells\Cloud\Model\RangesResponse;
use Aspose\Cells\Cloud\Model\RangeValueResponse;
use Aspose\Cells\Cloud\Model\RectangleShapeResponse;
use Aspose\Cells\Cloud\Model\RowResponse;
use Aspose\Cells\Cloud\Model\RowsResponse;
use Aspose\Cells\Cloud\Model\SaveFilesToCloudResultResponse;
use Aspose\Cells\Cloud\Model\SaveResponse;
use Aspose\Cells\Cloud\Model\ScrollBarResponse;
use Aspose\Cells\Cloud\Model\SeriesesResponse;
use Aspose\Cells\Cloud\Model\SeriesResponse;
use Aspose\Cells\Cloud\Model\ShapeResponse;
use Aspose\Cells\Cloud\Model\ShapesResponse;
use Aspose\Cells\Cloud\Model\SingleValueResponse;
use Aspose\Cells\Cloud\Model\SparklineGroupResponse;
use Aspose\Cells\Cloud\Model\SparklineGroupsResponse;
use Aspose\Cells\Cloud\Model\SpinnerResponse;
use Aspose\Cells\Cloud\Model\SplitResultResponse;
use Aspose\Cells\Cloud\Model\StyleResponse;
use Aspose\Cells\Cloud\Model\TaskRunResultResponse;
use Aspose\Cells\Cloud\Model\TextBoxResponse;
use Aspose\Cells\Cloud\Model\TextItemResponse;
use Aspose\Cells\Cloud\Model\TextItemsResponse;
use Aspose\Cells\Cloud\Model\TickLabelsResponse;
use Aspose\Cells\Cloud\Model\TitleResponse;
use Aspose\Cells\Cloud\Model\TrendlineResponse;
use Aspose\Cells\Cloud\Model\TrendlinesResponse;
use Aspose\Cells\Cloud\Model\ValidationResponse;
use Aspose\Cells\Cloud\Model\ValidationsResponse;
use Aspose\Cells\Cloud\Model\VerticalPageBreakResponse;
use Aspose\Cells\Cloud\Model\VerticalPageBreaksResponse;
use Aspose\Cells\Cloud\Model\WallsResponse;
use Aspose\Cells\Cloud\Model\WorkbookReplaceResponse;
use Aspose\Cells\Cloud\Model\WorkbookResponse;
use Aspose\Cells\Cloud\Model\WorkbookSettingsResponse;
use Aspose\Cells\Cloud\Model\WorkbooksResponse;
use Aspose\Cells\Cloud\Model\WorksheetReplaceResponse;
use Aspose\Cells\Cloud\Model\WorksheetResponse;
use Aspose\Cells\Cloud\Model\WorksheetsResponse;
use Aspose\Cells\Cloud\Model\BatchConvertRequest;
use Aspose\Cells\Cloud\Model\ColorFilterRequest;
use Aspose\Cells\Cloud\Model\ConvertParameter;
use Aspose\Cells\Cloud\Model\CreatePivotTableRequest;
use Aspose\Cells\Cloud\Model\MatchConditionRequest;
use Aspose\Cells\Cloud\Model\PasswordRequest;
use Aspose\Cells\Cloud\Model\PivotTableFieldRequest;
use Aspose\Cells\Cloud\Model\RangeCopyRequest;
use Aspose\Cells\Cloud\Model\RangeSetOutlineBorderRequest;
use Aspose\Cells\Cloud\Model\RangeSetStyleRequest;
use Aspose\Cells\Cloud\Model\TableTotalRequest;
use Aspose\Cells\Cloud\Model\TextWaterMarkerRequest;
use Aspose\Cells\Cloud\Model\TotalRequest;
use Aspose\Cells\Cloud\Model\WorkbookEncryptionRequest;
use Aspose\Cells\Cloud\Model\WorkbookProtectionRequest;
use Aspose\Cells\Cloud\Model\WorksheetMovingRequest;
use Aspose\Cells\Cloud\Model\PivotField;
use Aspose\Cells\Cloud\Model\PivotFilter;
use Aspose\Cells\Cloud\Model\PivotItem;
use Aspose\Cells\Cloud\Model\PivotTable;
use Aspose\Cells\Cloud\Model\PivotTables;
use Aspose\Cells\Cloud\Model\CustomParserConfig;
use Aspose\Cells\Cloud\Model\Import2DimensionDoubleArrayOption;
use Aspose\Cells\Cloud\Model\Import2DimensionIntArrayOption;
use Aspose\Cells\Cloud\Model\Import2DimensionStringArrayOption;
use Aspose\Cells\Cloud\Model\CellValue;
use Aspose\Cells\Cloud\Model\ImportBatchDataOption;
use Aspose\Cells\Cloud\Model\ImportCSVDataOption;
use Aspose\Cells\Cloud\Model\ImportDoubleArrayOption;
use Aspose\Cells\Cloud\Model\ImportIntArrayOption;
use Aspose\Cells\Cloud\Model\ImportOption;
use Aspose\Cells\Cloud\Model\ImportPictureOption;
use Aspose\Cells\Cloud\Model\ImportStringArrayOption;
use Aspose\Cells\Cloud\Model\ArcShape;
use Aspose\Cells\Cloud\Model\Area;
use Aspose\Cells\Cloud\Model\AutoShape;
use Aspose\Cells\Cloud\Model\AutoShapes;
use Aspose\Cells\Cloud\Model\Button;
use Aspose\Cells\Cloud\Model\CellsDrawing;
use Aspose\Cells\Cloud\Model\CheckBox;
use Aspose\Cells\Cloud\Model\ComboBox;
use Aspose\Cells\Cloud\Model\CommentShape;
use Aspose\Cells\Cloud\Model\FillFormat;
use Aspose\Cells\Cloud\Model\Form;
use Aspose\Cells\Cloud\Model\Forms;
use Aspose\Cells\Cloud\Model\GradientFill;
use Aspose\Cells\Cloud\Model\GradientFillStop;
use Aspose\Cells\Cloud\Model\GroupBox;
use Aspose\Cells\Cloud\Model\GroupShape;
use Aspose\Cells\Cloud\Model\Label;
use Aspose\Cells\Cloud\Model\Line;
use Aspose\Cells\Cloud\Model\LineFormat;
use Aspose\Cells\Cloud\Model\LineShape;
use Aspose\Cells\Cloud\Model\ListBox;
use Aspose\Cells\Cloud\Model\OleObject;
use Aspose\Cells\Cloud\Model\OleObjects;
use Aspose\Cells\Cloud\Model\Oval;
use Aspose\Cells\Cloud\Model\PatternFill;
use Aspose\Cells\Cloud\Model\PicFormatOption;
use Aspose\Cells\Cloud\Model\Picture;
use Aspose\Cells\Cloud\Model\Pictures;
use Aspose\Cells\Cloud\Model\RadioButton;
use Aspose\Cells\Cloud\Model\RectangleShape;
use Aspose\Cells\Cloud\Model\ScrollBar;
use Aspose\Cells\Cloud\Model\ShadowEffect;
use Aspose\Cells\Cloud\Model\Shape;
use Aspose\Cells\Cloud\Model\Shapes;
use Aspose\Cells\Cloud\Model\SolidFill;
use Aspose\Cells\Cloud\Model\Spinner;
use Aspose\Cells\Cloud\Model\TextBox;
use Aspose\Cells\Cloud\Model\TextureFill;
use Aspose\Cells\Cloud\Model\TilePicOption;
use Aspose\Cells\Cloud\Model\Axis;
use Aspose\Cells\Cloud\Model\Chart;
use Aspose\Cells\Cloud\Model\ChartArea;
use Aspose\Cells\Cloud\Model\ChartDataTable;
use Aspose\Cells\Cloud\Model\ChartFrame;
use Aspose\Cells\Cloud\Model\ChartPoint;
use Aspose\Cells\Cloud\Model\ChartPoints;
use Aspose\Cells\Cloud\Model\Charts;
use Aspose\Cells\Cloud\Model\ChartShape;
use Aspose\Cells\Cloud\Model\DataLabels;
use Aspose\Cells\Cloud\Model\DisplayUnitLabel;
use Aspose\Cells\Cloud\Model\DropBars;
use Aspose\Cells\Cloud\Model\ErrorBar;
use Aspose\Cells\Cloud\Model\Floor;
use Aspose\Cells\Cloud\Model\Legend;
use Aspose\Cells\Cloud\Model\LegendEntries;
use Aspose\Cells\Cloud\Model\LegendEntry;
use Aspose\Cells\Cloud\Model\Marker;
use Aspose\Cells\Cloud\Model\PlotArea;
use Aspose\Cells\Cloud\Model\Series;
use Aspose\Cells\Cloud\Model\SeriesItems;
use Aspose\Cells\Cloud\Model\Sparkline;
use Aspose\Cells\Cloud\Model\SparklineGroup;
use Aspose\Cells\Cloud\Model\SparklineGroups;
use Aspose\Cells\Cloud\Model\TickLabels;
use Aspose\Cells\Cloud\Model\Title;
use Aspose\Cells\Cloud\Model\Trendline;
use Aspose\Cells\Cloud\Model\Trendlines;
use Aspose\Cells\Cloud\Model\Walls;
use Aspose\Cells\Cloud\Model\Error;
use Aspose\Cells\Cloud\Model\ErrorDetails;
/**
 * CellsApi Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;
    protected $headerSelector;

    protected $_clientId;
    protected $_clientSecret;
    protected $_appVersion;
    protected $_getAccessTokenTime;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
     /**
     * @deprecated 
     */
    public function __construct(
        $clientId,$clientSecret,$version ="v3.0",$baseUrl="https://api.aspose.cloud"
    ) {
        $this->_clientId = $clientId;
        $this->_clientSecret = $clientSecret;
        $this->_appVersion = $version;
        $this->_baseUrl = substr($baseUrl,-1)=="/"?substr($baseUrl,0,strlen($baseUrl)-1):$baseUrl;
        
        $this->client =  new Client();
        $this->config =  new Configuration();
        $this->headerSelector =  new HeaderSelector();
        $grantType = "client_credentials";
        $this->config->setHost($this->_baseUrl."/".$this->_appVersion);
        $defaultHost =  $this->config->getHost();
        $this->config->setHost($this->_baseUrl);
        if(  empty( $clientId)  || empty( $clientId) ) {
            $this->_needAuth = false;
        }else{
            $this->config ->setAccessToken ( $this->getAccessToken($grantType, $clientId, $clientSecret,$version));
        }
        $this->_getAccessTokenTime = date('y-m-d h:i:s');
        $this->config->setHost( $defaultHost );
    }

    public function checkAccessToken(){
        if((strtotime(date('y-m-d h:i:s'))-strtotime($this->_getAccessTokenTime))>86400){
            $defaultHost =  $this->config->getHost();
            $this->config->setHost('https://api.aspose.cloud');
            $this->config ->setAccessToken ( $this->getAccessToken( "client_credentials",$this->_appSid, $this->_appKey, $this->_appVersion));
            $this->_getAccessTokenTime = date('y-m-d h:i:s');
            $this->config->setHost( $defaultHost );
        }
    }


    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetDateFilter
     *
     * Removes a date filter.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $field_index field_index (required)
     * @param  string $date_time_grouping_type date_time_grouping_type (required)
     * @param  int $year year (optional, default to 0)
     * @param  int $month month (optional, default to 0)
     * @param  int $day day (optional, default to 0)
     * @param  int $hour hour (optional, default to 0)
     * @param  int $minute minute (optional, default to 0)
     * @param  int $second second (optional, default to 0)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterDeleteWorksheetDateFilter($name, $sheet_name, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo($name, $sheet_name, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo
     *
     * Removes a date filter.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo($name, $sheet_name, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterDeleteWorksheetDateFilterRequest($name, $sheet_name, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetDateFilterAsync
     *
     * Removes a date filter.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterDeleteWorksheetDateFilterAsync($name, $sheet_name, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $folder = null, $storage_name = null)
    {
        return $this->cellsAutoFilterDeleteWorksheetDateFilterAsyncWithHttpInfo($name, $sheet_name, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetDateFilterAsyncWithHttpInfo
     *
     * Removes a date filter.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterDeleteWorksheetDateFilterAsyncWithHttpInfo($name, $sheet_name, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterDeleteWorksheetDateFilterRequest($name, $sheet_name, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterDeleteWorksheetDateFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoFilterDeleteWorksheetDateFilterRequest($name, $sheet_name, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterDeleteWorksheetDateFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterDeleteWorksheetDateFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterDeleteWorksheetDateFilter'
            );
        }
        // verify the required parameter 'date_time_grouping_type' is set
        if ($date_time_grouping_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_time_grouping_type when calling cellsAutoFilterDeleteWorksheetDateFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($date_time_grouping_type !== null) {
            $queryParams['dateTimeGroupingType'] = ObjectSerializer::toQueryValue($date_time_grouping_type);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }
        // query params
        if ($month !== null) {
            $queryParams['month'] = ObjectSerializer::toQueryValue($month);
        }
        // query params
        if ($day !== null) {
            $queryParams['day'] = ObjectSerializer::toQueryValue($day);
        }
        // query params
        if ($hour !== null) {
            $queryParams['hour'] = ObjectSerializer::toQueryValue($hour);
        }
        // query params
        if ($minute !== null) {
            $queryParams['minute'] = ObjectSerializer::toQueryValue($minute);
        }
        // query params
        if ($second !== null) {
            $queryParams['second'] = ObjectSerializer::toQueryValue($second);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoFilterDeleteWorksheetDateFilter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetFilter
     *
     * Delete a filter for a filter column.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $field_index field_index (required)
     * @param  string $criteria criteria (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterDeleteWorksheetFilter($name, $sheet_name, $field_index, $criteria = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoFilterDeleteWorksheetFilterWithHttpInfo($name, $sheet_name, $field_index, $criteria, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetFilterWithHttpInfo
     *
     * Delete a filter for a filter column.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $criteria (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterDeleteWorksheetFilterWithHttpInfo($name, $sheet_name, $field_index, $criteria = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterDeleteWorksheetFilterRequest($name, $sheet_name, $field_index, $criteria, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetFilterAsync
     *
     * Delete a filter for a filter column.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $criteria (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterDeleteWorksheetFilterAsync($name, $sheet_name, $field_index, $criteria = null, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoFilterDeleteWorksheetFilterAsyncWithHttpInfo($name, $sheet_name, $field_index, $criteria, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterDeleteWorksheetFilterAsyncWithHttpInfo
     *
     * Delete a filter for a filter column.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $criteria (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterDeleteWorksheetFilterAsyncWithHttpInfo($name, $sheet_name, $field_index, $criteria = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterDeleteWorksheetFilterRequest($name, $sheet_name, $field_index, $criteria, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterDeleteWorksheetFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $criteria (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoFilterDeleteWorksheetFilterRequest($name, $sheet_name, $field_index, $criteria = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterDeleteWorksheetFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterDeleteWorksheetFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterDeleteWorksheetFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/filter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($criteria !== null) {
            $queryParams['criteria'] = ObjectSerializer::toQueryValue($criteria);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoFilterDeleteWorksheetFilter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterGetWorksheetAutoFilter
     *
     * Get Auto filter Description
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\AutoFilterResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterGetWorksheetAutoFilter($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoFilterGetWorksheetAutoFilterWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoFilterGetWorksheetAutoFilterWithHttpInfo
     *
     * Get Auto filter Description
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\AutoFilterResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterGetWorksheetAutoFilterWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AutoFilterResponse';
        $request = $this->cellsAutoFilterGetWorksheetAutoFilterRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\AutoFilterResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterGetWorksheetAutoFilterAsync
     *
     * Get Auto filter Description
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterGetWorksheetAutoFilterAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoFilterGetWorksheetAutoFilterAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterGetWorksheetAutoFilterAsyncWithHttpInfo
     *
     * Get Auto filter Description
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterGetWorksheetAutoFilterAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AutoFilterResponse';
        $request = $this->cellsAutoFilterGetWorksheetAutoFilterRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterGetWorksheetAutoFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoFilterGetWorksheetAutoFilterRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterGetWorksheetAutoFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterGetWorksheetAutoFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoFilterGetWorksheetAutoFilter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPostWorksheetAutoFilterRefresh
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPostWorksheetAutoFilterRefresh($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPostWorksheetAutoFilterRefreshRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPostWorksheetAutoFilterRefreshAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPostWorksheetAutoFilterRefreshAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoFilterPostWorksheetAutoFilterRefreshAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPostWorksheetAutoFilterRefreshAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPostWorksheetAutoFilterRefreshAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPostWorksheetAutoFilterRefreshRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPostWorksheetAutoFilterRefresh'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoFilterPostWorksheetAutoFilterRefreshRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPostWorksheetAutoFilterRefresh'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPostWorksheetAutoFilterRefresh'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/refresh';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoFilterPostWorksheetAutoFilterRefresh'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchBlanks
     *
     * Match all blank cell in the list.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $field_index field_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPostWorksheetMatchBlanks($name, $sheet_name, $field_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo($name, $sheet_name, $field_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo
     *
     * Match all blank cell in the list.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo($name, $sheet_name, $field_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPostWorksheetMatchBlanksRequest($name, $sheet_name, $field_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchBlanksAsync
     *
     * Match all blank cell in the list.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPostWorksheetMatchBlanksAsync($name, $sheet_name, $field_index, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoFilterPostWorksheetMatchBlanksAsyncWithHttpInfo($name, $sheet_name, $field_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchBlanksAsyncWithHttpInfo
     *
     * Match all blank cell in the list.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPostWorksheetMatchBlanksAsyncWithHttpInfo($name, $sheet_name, $field_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPostWorksheetMatchBlanksRequest($name, $sheet_name, $field_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPostWorksheetMatchBlanks'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoFilterPostWorksheetMatchBlanksRequest($name, $sheet_name, $field_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPostWorksheetMatchBlanks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPostWorksheetMatchBlanks'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPostWorksheetMatchBlanks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/matchBlanks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoFilterPostWorksheetMatchBlanks'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchNonBlanks
     *
     * Match all not blank cell in the list.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $field_index field_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPostWorksheetMatchNonBlanks($name, $sheet_name, $field_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo($name, $sheet_name, $field_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo
     *
     * Match all not blank cell in the list.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo($name, $sheet_name, $field_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPostWorksheetMatchNonBlanksRequest($name, $sheet_name, $field_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchNonBlanksAsync
     *
     * Match all not blank cell in the list.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPostWorksheetMatchNonBlanksAsync($name, $sheet_name, $field_index, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoFilterPostWorksheetMatchNonBlanksAsyncWithHttpInfo($name, $sheet_name, $field_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPostWorksheetMatchNonBlanksAsyncWithHttpInfo
     *
     * Match all not blank cell in the list.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPostWorksheetMatchNonBlanksAsyncWithHttpInfo($name, $sheet_name, $field_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPostWorksheetMatchNonBlanksRequest($name, $sheet_name, $field_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPostWorksheetMatchNonBlanks'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $field_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoFilterPostWorksheetMatchNonBlanksRequest($name, $sheet_name, $field_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPostWorksheetMatchNonBlanks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPostWorksheetMatchNonBlanks'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPostWorksheetMatchNonBlanks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/matchNonBlanks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoFilterPostWorksheetMatchNonBlanks'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetColorFilter
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ColorFilterRequest $color_filter color_filter (optional)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetColorFilter($name, $sheet_name, $range, $field_index, $color_filter = null, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoFilterPutWorksheetColorFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $color_filter, $match_blanks, $refresh, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetColorFilterWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ColorFilterRequest $color_filter (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetColorFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $color_filter = null, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetColorFilterRequest($name, $sheet_name, $range, $field_index, $color_filter, $match_blanks, $refresh, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetColorFilterAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ColorFilterRequest $color_filter (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetColorFilterAsync($name, $sheet_name, $range, $field_index, $color_filter = null, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoFilterPutWorksheetColorFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $color_filter, $match_blanks, $refresh, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetColorFilterAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ColorFilterRequest $color_filter (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetColorFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $color_filter = null, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetColorFilterRequest($name, $sheet_name, $range, $field_index, $color_filter, $match_blanks, $refresh, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetColorFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ColorFilterRequest $color_filter (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoFilterPutWorksheetColorFilterRequest($name, $sheet_name, $range, $field_index, $color_filter = null, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetColorFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetColorFilter'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetColorFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetColorFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/colorFilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($color_filter)) {
            $_tempBody = $color_filter;
            $_tempBodyName =str_replace('_','', 'color_filter');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoFilterPutWorksheetColorFilter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetCustomFilter
     *
     * Filters a list with a custom criteria.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  string $operator_type1 operator_type1 (required)
     * @param  string $criteria1 criteria1 (required)
     * @param  bool $is_and is_and (optional)
     * @param  string $operator_type2 operator_type2 (optional)
     * @param  string $criteria2 criteria2 (optional)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetCustomFilter($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and = null, $operator_type2 = null, $criteria2 = null, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoFilterPutWorksheetCustomFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and, $operator_type2, $criteria2, $match_blanks, $refresh, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetCustomFilterWithHttpInfo
     *
     * Filters a list with a custom criteria.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $operator_type1 (required)
     * @param  string $criteria1 (required)
     * @param  bool $is_and (optional)
     * @param  string $operator_type2 (optional)
     * @param  string $criteria2 (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetCustomFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and = null, $operator_type2 = null, $criteria2 = null, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetCustomFilterRequest($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and, $operator_type2, $criteria2, $match_blanks, $refresh, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetCustomFilterAsync
     *
     * Filters a list with a custom criteria.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $operator_type1 (required)
     * @param  string $criteria1 (required)
     * @param  bool $is_and (optional)
     * @param  string $operator_type2 (optional)
     * @param  string $criteria2 (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetCustomFilterAsync($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and = null, $operator_type2 = null, $criteria2 = null, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoFilterPutWorksheetCustomFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and, $operator_type2, $criteria2, $match_blanks, $refresh, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetCustomFilterAsyncWithHttpInfo
     *
     * Filters a list with a custom criteria.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $operator_type1 (required)
     * @param  string $criteria1 (required)
     * @param  bool $is_and (optional)
     * @param  string $operator_type2 (optional)
     * @param  string $criteria2 (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetCustomFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and = null, $operator_type2 = null, $criteria2 = null, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetCustomFilterRequest($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and, $operator_type2, $criteria2, $match_blanks, $refresh, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetCustomFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $operator_type1 (required)
     * @param  string $criteria1 (required)
     * @param  bool $is_and (optional)
     * @param  string $operator_type2 (optional)
     * @param  string $criteria2 (optional)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoFilterPutWorksheetCustomFilterRequest($name, $sheet_name, $range, $field_index, $operator_type1, $criteria1, $is_and = null, $operator_type2 = null, $criteria2 = null, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetCustomFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetCustomFilter'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetCustomFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetCustomFilter'
            );
        }
        // verify the required parameter 'operator_type1' is set
        if ($operator_type1 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_type1 when calling cellsAutoFilterPutWorksheetCustomFilter'
            );
        }
        // verify the required parameter 'criteria1' is set
        if ($criteria1 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $criteria1 when calling cellsAutoFilterPutWorksheetCustomFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($operator_type1 !== null) {
            $queryParams['operatorType1'] = ObjectSerializer::toQueryValue($operator_type1);
        }
        // query params
        if ($criteria1 !== null) {
            $queryParams['criteria1'] = ObjectSerializer::toQueryValue($criteria1);
        }
        // query params
        if ($is_and !== null) {
            $queryParams['isAnd'] = ObjectSerializer::toQueryValue($is_and);
        }
        // query params
        if ($operator_type2 !== null) {
            $queryParams['operatorType2'] = ObjectSerializer::toQueryValue($operator_type2);
        }
        // query params
        if ($criteria2 !== null) {
            $queryParams['criteria2'] = ObjectSerializer::toQueryValue($criteria2);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoFilterPutWorksheetCustomFilter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDateFilter
     *
     * add date filter in worksheet
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  string $date_time_grouping_type date_time_grouping_type (required)
     * @param  int $year year (optional, default to 0)
     * @param  int $month month (optional, default to 0)
     * @param  int $day day (optional, default to 0)
     * @param  int $hour hour (optional, default to 0)
     * @param  int $minute minute (optional, default to 0)
     * @param  int $second second (optional, default to 0)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetDateFilter($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoFilterPutWorksheetDateFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $match_blanks, $refresh, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDateFilterWithHttpInfo
     *
     * add date filter in worksheet
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetDateFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetDateFilterRequest($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $match_blanks, $refresh, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDateFilterAsync
     *
     * add date filter in worksheet
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetDateFilterAsync($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoFilterPutWorksheetDateFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $match_blanks, $refresh, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDateFilterAsyncWithHttpInfo
     *
     * add date filter in worksheet
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetDateFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetDateFilterRequest($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year, $month, $day, $hour, $minute, $second, $match_blanks, $refresh, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetDateFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $date_time_grouping_type (required)
     * @param  int $year (optional, default to 0)
     * @param  int $month (optional, default to 0)
     * @param  int $day (optional, default to 0)
     * @param  int $hour (optional, default to 0)
     * @param  int $minute (optional, default to 0)
     * @param  int $second (optional, default to 0)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoFilterPutWorksheetDateFilterRequest($name, $sheet_name, $range, $field_index, $date_time_grouping_type, $year = '0', $month = '0', $day = '0', $hour = '0', $minute = '0', $second = '0', $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetDateFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetDateFilter'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetDateFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetDateFilter'
            );
        }
        // verify the required parameter 'date_time_grouping_type' is set
        if ($date_time_grouping_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_time_grouping_type when calling cellsAutoFilterPutWorksheetDateFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($date_time_grouping_type !== null) {
            $queryParams['dateTimeGroupingType'] = ObjectSerializer::toQueryValue($date_time_grouping_type);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }
        // query params
        if ($month !== null) {
            $queryParams['month'] = ObjectSerializer::toQueryValue($month);
        }
        // query params
        if ($day !== null) {
            $queryParams['day'] = ObjectSerializer::toQueryValue($day);
        }
        // query params
        if ($hour !== null) {
            $queryParams['hour'] = ObjectSerializer::toQueryValue($hour);
        }
        // query params
        if ($minute !== null) {
            $queryParams['minute'] = ObjectSerializer::toQueryValue($minute);
        }
        // query params
        if ($second !== null) {
            $queryParams['second'] = ObjectSerializer::toQueryValue($second);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoFilterPutWorksheetDateFilter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDynamicFilter
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  string $dynamic_filter_type dynamic_filter_type (required)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetDynamicFilter($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks, $refresh, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $dynamic_filter_type (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetDynamicFilterRequest($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks, $refresh, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDynamicFilterAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $dynamic_filter_type (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetDynamicFilterAsync($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoFilterPutWorksheetDynamicFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks, $refresh, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetDynamicFilterAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $dynamic_filter_type (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetDynamicFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetDynamicFilterRequest($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks, $refresh, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetDynamicFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $dynamic_filter_type (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoFilterPutWorksheetDynamicFilterRequest($name, $sheet_name, $range, $field_index, $dynamic_filter_type, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetDynamicFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetDynamicFilter'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetDynamicFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetDynamicFilter'
            );
        }
        // verify the required parameter 'dynamic_filter_type' is set
        if ($dynamic_filter_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dynamic_filter_type when calling cellsAutoFilterPutWorksheetDynamicFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/dynamicFilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($dynamic_filter_type !== null) {
            $queryParams['dynamicFilterType'] = ObjectSerializer::toQueryValue($dynamic_filter_type);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoFilterPutWorksheetDynamicFilter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilter
     *
     * Adds a filter for a filter column.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  string $criteria criteria (required)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetFilter($name, $sheet_name, $range, $field_index, $criteria, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoFilterPutWorksheetFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $criteria, $match_blanks, $refresh, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterWithHttpInfo
     *
     * Adds a filter for a filter column.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $criteria (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $criteria, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetFilterRequest($name, $sheet_name, $range, $field_index, $criteria, $match_blanks, $refresh, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterAsync
     *
     * Adds a filter for a filter column.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $criteria (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetFilterAsync($name, $sheet_name, $range, $field_index, $criteria, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoFilterPutWorksheetFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $criteria, $match_blanks, $refresh, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterAsyncWithHttpInfo
     *
     * Adds a filter for a filter column.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $criteria (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $criteria, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetFilterRequest($name, $sheet_name, $range, $field_index, $criteria, $match_blanks, $refresh, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $criteria (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoFilterPutWorksheetFilterRequest($name, $sheet_name, $range, $field_index, $criteria, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetFilter'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetFilter'
            );
        }
        // verify the required parameter 'criteria' is set
        if ($criteria === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $criteria when calling cellsAutoFilterPutWorksheetFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/filter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($criteria !== null) {
            $queryParams['criteria'] = ObjectSerializer::toQueryValue($criteria);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoFilterPutWorksheetFilter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterTop10
     *
     * Filter the top 10 item in the list
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  bool $is_top is_top (required)
     * @param  bool $is_percent is_percent (required)
     * @param  int $item_count item_count (required)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetFilterTop10($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoFilterPutWorksheetFilterTop10WithHttpInfo($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks, $refresh, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterTop10WithHttpInfo
     *
     * Filter the top 10 item in the list
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  bool $is_top (required)
     * @param  bool $is_percent (required)
     * @param  int $item_count (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetFilterTop10WithHttpInfo($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetFilterTop10Request($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks, $refresh, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterTop10Async
     *
     * Filter the top 10 item in the list
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  bool $is_top (required)
     * @param  bool $is_percent (required)
     * @param  int $item_count (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetFilterTop10Async($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoFilterPutWorksheetFilterTop10AsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks, $refresh, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetFilterTop10AsyncWithHttpInfo
     *
     * Filter the top 10 item in the list
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  bool $is_top (required)
     * @param  bool $is_percent (required)
     * @param  int $item_count (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetFilterTop10AsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetFilterTop10Request($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks, $refresh, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetFilterTop10'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  bool $is_top (required)
     * @param  bool $is_percent (required)
     * @param  int $item_count (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoFilterPutWorksheetFilterTop10Request($name, $sheet_name, $range, $field_index, $is_top, $is_percent, $item_count, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }
        // verify the required parameter 'is_top' is set
        if ($is_top === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_top when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }
        // verify the required parameter 'is_percent' is set
        if ($is_percent === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_percent when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }
        // verify the required parameter 'item_count' is set
        if ($item_count === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_count when calling cellsAutoFilterPutWorksheetFilterTop10'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/filterTop10';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($is_top !== null) {
            $queryParams['isTop'] = ObjectSerializer::toQueryValue($is_top);
        }
        // query params
        if ($is_percent !== null) {
            $queryParams['isPercent'] = ObjectSerializer::toQueryValue($is_percent);
        }
        // query params
        if ($item_count !== null) {
            $queryParams['itemCount'] = ObjectSerializer::toQueryValue($item_count);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoFilterPutWorksheetFilterTop10'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetIconFilter
     *
     * Adds an icon filter.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $range range (required)
     * @param  int $field_index field_index (required)
     * @param  string $icon_set_type icon_set_type (required)
     * @param  int $icon_id icon_id (required)
     * @param  bool $match_blanks match_blanks (optional)
     * @param  bool $refresh refresh (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetIconFilter($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoFilterPutWorksheetIconFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks, $refresh, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoFilterPutWorksheetIconFilterWithHttpInfo
     *
     * Adds an icon filter.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $icon_set_type (required)
     * @param  int $icon_id (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetIconFilterWithHttpInfo($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetIconFilterRequest($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks, $refresh, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoFilterPutWorksheetIconFilterAsync
     *
     * Adds an icon filter.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $icon_set_type (required)
     * @param  int $icon_id (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetIconFilterAsync($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoFilterPutWorksheetIconFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks, $refresh, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoFilterPutWorksheetIconFilterAsyncWithHttpInfo
     *
     * Adds an icon filter.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $icon_set_type (required)
     * @param  int $icon_id (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoFilterPutWorksheetIconFilterAsyncWithHttpInfo($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsAutoFilterPutWorksheetIconFilterRequest($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks, $refresh, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoFilterPutWorksheetIconFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $range (required)
     * @param  int $field_index (required)
     * @param  string $icon_set_type (required)
     * @param  int $icon_id (required)
     * @param  bool $match_blanks (optional)
     * @param  bool $refresh (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoFilterPutWorksheetIconFilterRequest($name, $sheet_name, $range, $field_index, $icon_set_type, $icon_id, $match_blanks = null, $refresh = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoFilterPutWorksheetIconFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoFilterPutWorksheetIconFilter'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsAutoFilterPutWorksheetIconFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsAutoFilterPutWorksheetIconFilter'
            );
        }
        // verify the required parameter 'icon_set_type' is set
        if ($icon_set_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $icon_set_type when calling cellsAutoFilterPutWorksheetIconFilter'
            );
        }
        // verify the required parameter 'icon_id' is set
        if ($icon_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $icon_id when calling cellsAutoFilterPutWorksheetIconFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoFilter/iconFilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($icon_set_type !== null) {
            $queryParams['iconSetType'] = ObjectSerializer::toQueryValue($icon_set_type);
        }
        // query params
        if ($icon_id !== null) {
            $queryParams['iconId'] = ObjectSerializer::toQueryValue($icon_id);
        }
        // query params
        if ($match_blanks !== null) {
            $queryParams['matchBlanks'] = ObjectSerializer::toQueryValue($match_blanks);
        }
        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = ObjectSerializer::toQueryValue($refresh);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoFilterPutWorksheetIconFilter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoshapesGetWorksheetAutoshape
     *
     * Get autoshape info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $autoshape_number The autoshape number. (required)
     * @param  string $format Exported format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
     /**
     * @deprecated 
     */
    public function cellsAutoshapesGetWorksheetAutoshape($name, $sheet_name, $autoshape_number, $format = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoshapesGetWorksheetAutoshapeWithHttpInfo($name, $sheet_name, $autoshape_number, $format, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoshapesGetWorksheetAutoshapeWithHttpInfo
     *
     * Get autoshape info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $autoshape_number The autoshape number. (required)
     * @param  string $format Exported format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoshapesGetWorksheetAutoshapeWithHttpInfo($name, $sheet_name, $autoshape_number, $format = null, $folder = null, $storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsAutoshapesGetWorksheetAutoshapeRequest($name, $sheet_name, $autoshape_number, $format, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoshapesGetWorksheetAutoshapeAsync
     *
     * Get autoshape info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $autoshape_number The autoshape number. (required)
     * @param  string $format Exported format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoshapesGetWorksheetAutoshapeAsync($name, $sheet_name, $autoshape_number, $format = null, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoshapesGetWorksheetAutoshapeAsyncWithHttpInfo($name, $sheet_name, $autoshape_number, $format, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoshapesGetWorksheetAutoshapeAsyncWithHttpInfo
     *
     * Get autoshape info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $autoshape_number The autoshape number. (required)
     * @param  string $format Exported format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoshapesGetWorksheetAutoshapeAsyncWithHttpInfo($name, $sheet_name, $autoshape_number, $format = null, $folder = null, $storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsAutoshapesGetWorksheetAutoshapeRequest($name, $sheet_name, $autoshape_number, $format, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoshapesGetWorksheetAutoshape'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $autoshape_number The autoshape number. (required)
     * @param  string $format Exported format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoshapesGetWorksheetAutoshapeRequest($name, $sheet_name, $autoshape_number, $format = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoshapesGetWorksheetAutoshape'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoshapesGetWorksheetAutoshape'
            );
        }
        // verify the required parameter 'autoshape_number' is set
        if ($autoshape_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $autoshape_number when calling cellsAutoshapesGetWorksheetAutoshape'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoshapes/{autoshapeNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($autoshape_number !== null) {
            $resourcePath = str_replace(
                '{' . 'autoshapeNumber' . '}',
                ObjectSerializer::toPathValue($autoshape_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoshapesGetWorksheetAutoshape'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsAutoshapesGetWorksheetAutoshapes
     *
     * Get worksheet autoshapes info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\AutoShapesResponse
     */
     /**
     * @deprecated 
     */
    public function cellsAutoshapesGetWorksheetAutoshapes($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsAutoshapesGetWorksheetAutoshapesWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsAutoshapesGetWorksheetAutoshapesWithHttpInfo
     *
     * Get worksheet autoshapes info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\AutoShapesResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsAutoshapesGetWorksheetAutoshapesWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AutoShapesResponse';
        $request = $this->cellsAutoshapesGetWorksheetAutoshapesRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\AutoShapesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsAutoshapesGetWorksheetAutoshapesAsync
     *
     * Get worksheet autoshapes info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoshapesGetWorksheetAutoshapesAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsAutoshapesGetWorksheetAutoshapesAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsAutoshapesGetWorksheetAutoshapesAsyncWithHttpInfo
     *
     * Get worksheet autoshapes info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsAutoshapesGetWorksheetAutoshapesAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AutoShapesResponse';
        $request = $this->cellsAutoshapesGetWorksheetAutoshapesRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsAutoshapesGetWorksheetAutoshapes'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsAutoshapesGetWorksheetAutoshapesRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsAutoshapesGetWorksheetAutoshapes'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsAutoshapesGetWorksheetAutoshapes'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autoshapes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsAutoshapesGetWorksheetAutoshapes'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartAreaGetChartArea
     *
     * Get chart area info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ChartAreaResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartAreaGetChartArea($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartAreaGetChartAreaWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartAreaGetChartAreaWithHttpInfo
     *
     * Get chart area info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ChartAreaResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartAreaGetChartAreaWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ChartAreaResponse';
        $request = $this->cellsChartAreaGetChartAreaRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ChartAreaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartAreaGetChartAreaAsync
     *
     * Get chart area info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartAreaGetChartAreaAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartAreaGetChartAreaAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartAreaGetChartAreaAsyncWithHttpInfo
     *
     * Get chart area info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartAreaGetChartAreaAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ChartAreaResponse';
        $request = $this->cellsChartAreaGetChartAreaRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartAreaGetChartArea'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartAreaGetChartAreaRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartAreaGetChartArea'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartAreaGetChartArea'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartAreaGetChartArea'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartAreaGetChartArea'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartAreaGetChartAreaBorder
     *
     * Get chart area border info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\LineResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartAreaGetChartAreaBorder($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartAreaGetChartAreaBorderWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartAreaGetChartAreaBorderWithHttpInfo
     *
     * Get chart area border info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\LineResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartAreaGetChartAreaBorderWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\LineResponse';
        $request = $this->cellsChartAreaGetChartAreaBorderRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\LineResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartAreaGetChartAreaBorderAsync
     *
     * Get chart area border info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartAreaGetChartAreaBorderAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartAreaGetChartAreaBorderAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartAreaGetChartAreaBorderAsyncWithHttpInfo
     *
     * Get chart area border info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartAreaGetChartAreaBorderAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\LineResponse';
        $request = $this->cellsChartAreaGetChartAreaBorderRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartAreaGetChartAreaBorder'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartAreaGetChartAreaBorderRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartAreaGetChartAreaBorder'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartAreaGetChartAreaBorder'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartAreaGetChartAreaBorder'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/border';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartAreaGetChartAreaBorder'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartAreaGetChartAreaFillFormat
     *
     * Get chart area fill format info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\FillFormatResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartAreaGetChartAreaFillFormat($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartAreaGetChartAreaFillFormatWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartAreaGetChartAreaFillFormatWithHttpInfo
     *
     * Get chart area fill format info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\FillFormatResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartAreaGetChartAreaFillFormatWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FillFormatResponse';
        $request = $this->cellsChartAreaGetChartAreaFillFormatRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\FillFormatResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartAreaGetChartAreaFillFormatAsync
     *
     * Get chart area fill format info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartAreaGetChartAreaFillFormatAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartAreaGetChartAreaFillFormatAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartAreaGetChartAreaFillFormatAsyncWithHttpInfo
     *
     * Get chart area fill format info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartAreaGetChartAreaFillFormatAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FillFormatResponse';
        $request = $this->cellsChartAreaGetChartAreaFillFormatRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartAreaGetChartAreaFillFormat'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartAreaGetChartAreaFillFormatRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartAreaGetChartAreaFillFormat'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartAreaGetChartAreaFillFormat'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartAreaGetChartAreaFillFormat'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/fillFormat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartAreaGetChartAreaFillFormat'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartLegend
     *
     * Hide legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetChartLegend($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsDeleteWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartLegendWithHttpInfo
     *
     * Hide legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsDeleteWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartLegendAsync
     *
     * Hide legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetChartLegendAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsDeleteWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartLegendAsyncWithHttpInfo
     *
     * Hide legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsDeleteWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsDeleteWorksheetChartLegend'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsDeleteWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsDeleteWorksheetChartLegend'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsDeleteWorksheetChartLegend'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsDeleteWorksheetChartLegend'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsDeleteWorksheetChartLegend'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartTitle
     *
     * Hide title in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetChartTitle($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsDeleteWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartTitleWithHttpInfo
     *
     * Hide title in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsDeleteWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartTitleAsync
     *
     * Hide title in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetChartTitleAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsDeleteWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsDeleteWorksheetChartTitleAsyncWithHttpInfo
     *
     * Hide title in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsDeleteWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsDeleteWorksheetChartTitle'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsDeleteWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsDeleteWorksheetChartTitle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsDeleteWorksheetChartTitle'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsDeleteWorksheetChartTitle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsDeleteWorksheetChartTitle'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsDeleteWorksheetClearCharts
     *
     * Clear the charts.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetClearCharts($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsDeleteWorksheetClearChartsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsDeleteWorksheetClearChartsWithHttpInfo
     *
     * Clear the charts.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetClearChartsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsDeleteWorksheetClearChartsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsDeleteWorksheetClearChartsAsync
     *
     * Clear the charts.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetClearChartsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsDeleteWorksheetClearChartsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsDeleteWorksheetClearChartsAsyncWithHttpInfo
     *
     * Clear the charts.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetClearChartsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsDeleteWorksheetClearChartsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsDeleteWorksheetClearCharts'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsDeleteWorksheetClearChartsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsDeleteWorksheetClearCharts'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsDeleteWorksheetClearCharts'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsDeleteWorksheetClearCharts'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsDeleteWorksheetDeleteChart
     *
     * Delete worksheet chart by index.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetDeleteChart($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsDeleteWorksheetDeleteChartWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsDeleteWorksheetDeleteChartWithHttpInfo
     *
     * Delete worksheet chart by index.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetDeleteChartWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsDeleteWorksheetDeleteChartRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsDeleteWorksheetDeleteChartAsync
     *
     * Delete worksheet chart by index.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetDeleteChartAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsDeleteWorksheetDeleteChartAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsDeleteWorksheetDeleteChartAsyncWithHttpInfo
     *
     * Delete worksheet chart by index.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsDeleteWorksheetDeleteChartAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsDeleteWorksheetDeleteChartRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsDeleteWorksheetDeleteChart'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsDeleteWorksheetDeleteChartRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsDeleteWorksheetDeleteChart'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsDeleteWorksheetDeleteChart'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsDeleteWorksheetDeleteChart'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsDeleteWorksheetDeleteChart'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    /**
     * Operation cellsChartsGetChartCategoryAxis
     *
     * Get chart Category Axis
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $chart_index chart_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\AxisResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartCategoryAxis($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsGetChartCategoryAxisWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsGetChartCategoryAxisWithHttpInfo
     *
     * Get chart Category Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\AxisResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartCategoryAxisWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $request = $this->cellsChartsGetChartCategoryAxisRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\AxisResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsGetChartCategoryAxisAsync
     *
     * Get chart Category Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartCategoryAxisAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsGetChartCategoryAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsGetChartCategoryAxisAsyncWithHttpInfo
     *
     * Get chart Category Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartCategoryAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $request = $this->cellsChartsGetChartCategoryAxisRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsGetChartCategoryAxis'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsGetChartCategoryAxisRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsGetChartCategoryAxis'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsGetChartCategoryAxis'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsGetChartCategoryAxis'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/categoryaxis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsGetChartCategoryAxis'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query =  \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsGetChartSecondCategoryAxis
     *
     * Get chart second category axis
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $chart_index chart_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\AxisResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartSecondCategoryAxis($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsGetChartSecondCategoryAxisWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsGetChartSecondCategoryAxisWithHttpInfo
     *
     * Get chart second category axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\AxisResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartSecondCategoryAxisWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $request = $this->cellsChartsGetChartSecondCategoryAxisRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\AxisResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsGetChartSecondCategoryAxisAsync
     *
     * Get chart second category axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartSecondCategoryAxisAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsGetChartSecondCategoryAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsGetChartSecondCategoryAxisAsyncWithHttpInfo
     *
     * Get chart second category axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartSecondCategoryAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $request = $this->cellsChartsGetChartSecondCategoryAxisRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsGetChartSecondCategoryAxis'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsGetChartSecondCategoryAxisRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsGetChartSecondCategoryAxis'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsGetChartSecondCategoryAxis'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsGetChartSecondCategoryAxis'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/secondcategoryaxis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsGetChartSecondCategoryAxis'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query =  \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsGetChartSecondValueAxis
     *
     * Get chart second value axis
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $chart_index chart_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\AxisResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartSecondValueAxis($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsGetChartSecondValueAxisWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsGetChartSecondValueAxisWithHttpInfo
     *
     * Get chart second value axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\AxisResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartSecondValueAxisWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $request = $this->cellsChartsGetChartSecondValueAxisRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\AxisResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsGetChartSecondValueAxisAsync
     *
     * Get chart second value axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartSecondValueAxisAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsGetChartSecondValueAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsGetChartSecondValueAxisAsyncWithHttpInfo
     *
     * Get chart second value axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartSecondValueAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $request = $this->cellsChartsGetChartSecondValueAxisRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsGetChartSecondValueAxis'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsGetChartSecondValueAxisRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsGetChartSecondValueAxis'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsGetChartSecondValueAxis'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsGetChartSecondValueAxis'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/secondvalueaxis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsGetChartSecondValueAxis'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query =  \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsGetChartSeriesAxis
     *
     * Get chart Series Axis
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $chart_index chart_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\AxisResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartSeriesAxis($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsGetChartSeriesAxisWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsGetChartSeriesAxisWithHttpInfo
     *
     * Get chart Series Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\AxisResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartSeriesAxisWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $request = $this->cellsChartsGetChartSeriesAxisRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\AxisResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsGetChartSeriesAxisAsync
     *
     * Get chart Series Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartSeriesAxisAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsGetChartSeriesAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsGetChartSeriesAxisAsyncWithHttpInfo
     *
     * Get chart Series Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartSeriesAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $request = $this->cellsChartsGetChartSeriesAxisRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsGetChartSeriesAxis'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsGetChartSeriesAxisRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsGetChartSeriesAxis'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsGetChartSeriesAxis'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsGetChartSeriesAxis'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/seriesaxis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsGetChartSeriesAxis'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query =  \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsGetChartValueAxis
     *
     * Get chart Value Axis
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $chart_index chart_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\AxisResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartValueAxis($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsGetChartValueAxisWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsGetChartValueAxisWithHttpInfo
     *
     * Get chart Value Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\AxisResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartValueAxisWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $request = $this->cellsChartsGetChartValueAxisRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\AxisResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsGetChartValueAxisAsync
     *
     * Get chart Value Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartValueAxisAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsGetChartValueAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsGetChartValueAxisAsyncWithHttpInfo
     *
     * Get chart Value Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetChartValueAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $request = $this->cellsChartsGetChartValueAxisRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsGetChartValueAxis'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsGetChartValueAxisRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsGetChartValueAxis'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsGetChartValueAxis'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsGetChartValueAxis'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/valueaxis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsGetChartValueAxis'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query =  \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsGetWorksheetChart
     *
     * Get chart info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_number The chart number. (required)
     * @param  string $format The exported file format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChart($name, $sheet_name, $chart_number, $format = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsGetWorksheetChartWithHttpInfo($name, $sheet_name, $chart_number, $format, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsGetWorksheetChartWithHttpInfo
     *
     * Get chart info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_number The chart number. (required)
     * @param  string $format The exported file format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartWithHttpInfo($name, $sheet_name, $chart_number, $format = null, $folder = null, $storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsChartsGetWorksheetChartRequest($name, $sheet_name, $chart_number, $format, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsGetWorksheetChartAsync
     *
     * Get chart info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_number The chart number. (required)
     * @param  string $format The exported file format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartAsync($name, $sheet_name, $chart_number, $format = null, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsGetWorksheetChartAsyncWithHttpInfo($name, $sheet_name, $chart_number, $format, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsGetWorksheetChartAsyncWithHttpInfo
     *
     * Get chart info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_number The chart number. (required)
     * @param  string $format The exported file format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartAsyncWithHttpInfo($name, $sheet_name, $chart_number, $format = null, $folder = null, $storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsChartsGetWorksheetChartRequest($name, $sheet_name, $chart_number, $format, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsGetWorksheetChart'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_number The chart number. (required)
     * @param  string $format The exported file format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsGetWorksheetChartRequest($name, $sheet_name, $chart_number, $format = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsGetWorksheetChart'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsGetWorksheetChart'
            );
        }
        // verify the required parameter 'chart_number' is set
        if ($chart_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_number when calling cellsChartsGetWorksheetChart'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_number !== null) {
            $resourcePath = str_replace(
                '{' . 'chartNumber' . '}',
                ObjectSerializer::toPathValue($chart_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsGetWorksheetChart'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsGetWorksheetChartLegend
     *
     * Get chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\LegendResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartLegend($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsGetWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsGetWorksheetChartLegendWithHttpInfo
     *
     * Get chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\LegendResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\LegendResponse';
        $request = $this->cellsChartsGetWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\LegendResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsGetWorksheetChartLegendAsync
     *
     * Get chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartLegendAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsGetWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsGetWorksheetChartLegendAsyncWithHttpInfo
     *
     * Get chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\LegendResponse';
        $request = $this->cellsChartsGetWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsGetWorksheetChartLegend'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsGetWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsGetWorksheetChartLegend'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsGetWorksheetChartLegend'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsGetWorksheetChartLegend'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsGetWorksheetChartLegend'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsGetWorksheetChartTitle
     *
     * Get chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\TitleResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartTitle($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsGetWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsGetWorksheetChartTitleWithHttpInfo
     *
     * Get chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\TitleResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TitleResponse';
        $request = $this->cellsChartsGetWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\TitleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsGetWorksheetChartTitleAsync
     *
     * Get chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartTitleAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsGetWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsGetWorksheetChartTitleAsyncWithHttpInfo
     *
     * Get chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TitleResponse';
        $request = $this->cellsChartsGetWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsGetWorksheetChartTitle'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsGetWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsGetWorksheetChartTitle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsGetWorksheetChartTitle'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsGetWorksheetChartTitle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsGetWorksheetChartTitle'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsGetWorksheetCharts
     *
     * Get worksheet charts info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ChartsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetCharts($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsGetWorksheetChartsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsGetWorksheetChartsWithHttpInfo
     *
     * Get worksheet charts info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ChartsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ChartsResponse';
        $request = $this->cellsChartsGetWorksheetChartsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ChartsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsGetWorksheetChartsAsync
     *
     * Get worksheet charts info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsGetWorksheetChartsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsGetWorksheetChartsAsyncWithHttpInfo
     *
     * Get worksheet charts info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsGetWorksheetChartsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ChartsResponse';
        $request = $this->cellsChartsGetWorksheetChartsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsGetWorksheetCharts'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsGetWorksheetChartsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsGetWorksheetCharts'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsGetWorksheetCharts'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsGetWorksheetCharts'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

       /**
     * Operation cellsChartsPostChartCategoryAxis
     *
     * Update chart Category Axis
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $chart_index chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis axis (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartCategoryAxis($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsPostChartCategoryAxisWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsPostChartCategoryAxisWithHttpInfo
     *
     * Update chart Category Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartCategoryAxisWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostChartCategoryAxisRequest($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPostChartCategoryAxisAsync
     *
     * Update chart Category Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartCategoryAxisAsync($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsPostChartCategoryAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPostChartCategoryAxisAsyncWithHttpInfo
     *
     * Update chart Category Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartCategoryAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostChartCategoryAxisRequest($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPostChartCategoryAxis'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsPostChartCategoryAxisRequest($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPostChartCategoryAxis'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPostChartCategoryAxis'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPostChartCategoryAxis'
            );
        }
        // verify the required parameter 'axis' is set
        if ($axis === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $axis when calling cellsChartsPostChartCategoryAxis'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/categoryaxis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($axis)) {
            $_tempBody = $axis;
            $_tempBodyName =str_replace('_','', 'axis');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsPostChartCategoryAxis'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query =  \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPostChartSecondCategoryAxis
     *
     * Update chart second category axis
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $chart_index chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis axis (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartSecondCategoryAxis($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsPostChartSecondCategoryAxisWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsPostChartSecondCategoryAxisWithHttpInfo
     *
     * Update chart second category axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartSecondCategoryAxisWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostChartSecondCategoryAxisRequest($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPostChartSecondCategoryAxisAsync
     *
     * Update chart second category axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartSecondCategoryAxisAsync($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsPostChartSecondCategoryAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPostChartSecondCategoryAxisAsyncWithHttpInfo
     *
     * Update chart second category axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartSecondCategoryAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostChartSecondCategoryAxisRequest($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPostChartSecondCategoryAxis'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsPostChartSecondCategoryAxisRequest($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPostChartSecondCategoryAxis'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPostChartSecondCategoryAxis'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPostChartSecondCategoryAxis'
            );
        }
        // verify the required parameter 'axis' is set
        if ($axis === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $axis when calling cellsChartsPostChartSecondCategoryAxis'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/secondcategoryaxis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($axis)) {
            $_tempBody = $axis;
            $_tempBodyName =str_replace('_','', 'axis');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsPostChartSecondCategoryAxis'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query =  \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPostChartSecondValueAxis
     *
     * Update chart second value axis
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $chart_index chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis axis (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartSecondValueAxis($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsPostChartSecondValueAxisWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsPostChartSecondValueAxisWithHttpInfo
     *
     * Update chart second value axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartSecondValueAxisWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostChartSecondValueAxisRequest($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPostChartSecondValueAxisAsync
     *
     * Update chart second value axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartSecondValueAxisAsync($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsPostChartSecondValueAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPostChartSecondValueAxisAsyncWithHttpInfo
     *
     * Update chart second value axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartSecondValueAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostChartSecondValueAxisRequest($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPostChartSecondValueAxis'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsPostChartSecondValueAxisRequest($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPostChartSecondValueAxis'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPostChartSecondValueAxis'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPostChartSecondValueAxis'
            );
        }
        // verify the required parameter 'axis' is set
        if ($axis === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $axis when calling cellsChartsPostChartSecondValueAxis'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/secondvalueaxis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($axis)) {
            $_tempBody = $axis;
            $_tempBodyName =str_replace('_','', 'axis');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsPostChartSecondValueAxis'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query =  \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPostChartSeriesAxis
     *
     * Update chart Series Axis
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $chart_index chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis axis (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartSeriesAxis($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsPostChartSeriesAxisWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsPostChartSeriesAxisWithHttpInfo
     *
     * Update chart Series Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartSeriesAxisWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostChartSeriesAxisRequest($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPostChartSeriesAxisAsync
     *
     * Update chart Series Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartSeriesAxisAsync($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsPostChartSeriesAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPostChartSeriesAxisAsyncWithHttpInfo
     *
     * Update chart Series Axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartSeriesAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostChartSeriesAxisRequest($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPostChartSeriesAxis'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsPostChartSeriesAxisRequest($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPostChartSeriesAxis'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPostChartSeriesAxis'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPostChartSeriesAxis'
            );
        }
        // verify the required parameter 'axis' is set
        if ($axis === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $axis when calling cellsChartsPostChartSeriesAxis'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/seriesaxis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($axis)) {
            $_tempBody = $axis;
            $_tempBodyName =str_replace('_','', 'axis');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsPostChartSeriesAxis'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query =  \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPostChartValueAxis
     *
     * Update chart value axis
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $chart_index chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis axis (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartValueAxis($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsPostChartValueAxisWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsPostChartValueAxisWithHttpInfo
     *
     * Update chart value axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartValueAxisWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostChartValueAxisRequest($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPostChartValueAxisAsync
     *
     * Update chart value axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartValueAxisAsync($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsPostChartValueAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPostChartValueAxisAsyncWithHttpInfo
     *
     * Update chart value axis
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostChartValueAxisAsyncWithHttpInfo($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostChartValueAxisRequest($name, $sheet_name, $chart_index, $axis, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPostChartValueAxis'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Axis $axis (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsPostChartValueAxisRequest($name, $sheet_name, $chart_index, $axis, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPostChartValueAxis'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPostChartValueAxis'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPostChartValueAxis'
            );
        }
        // verify the required parameter 'axis' is set
        if ($axis === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $axis when calling cellsChartsPostChartValueAxis'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/valueaxis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($axis)) {
            $_tempBody = $axis;
            $_tempBodyName =str_replace('_','', 'axis');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsPostChartValueAxis'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query =  \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPostWorksheetChart
     *
     * Update chart propreties
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $chart_index chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Chart $chart chart (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostWorksheetChart($name, $sheet_name, $chart_index, $chart = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsPostWorksheetChartWithHttpInfo($name, $sheet_name, $chart_index, $chart, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsPostWorksheetChartWithHttpInfo
     *
     * Update chart propreties
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Chart $chart (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostWorksheetChartWithHttpInfo($name, $sheet_name, $chart_index, $chart = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostWorksheetChartRequest($name, $sheet_name, $chart_index, $chart, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPostWorksheetChartAsync
     *
     * Update chart propreties
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Chart $chart (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostWorksheetChartAsync($name, $sheet_name, $chart_index, $chart = null, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsPostWorksheetChartAsyncWithHttpInfo($name, $sheet_name, $chart_index, $chart, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPostWorksheetChartAsyncWithHttpInfo
     *
     * Update chart propreties
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Chart $chart (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostWorksheetChartAsyncWithHttpInfo($name, $sheet_name, $chart_index, $chart = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostWorksheetChartRequest($name, $sheet_name, $chart_index, $chart, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPostWorksheetChart'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $chart_index (required)
     * @param  \Aspose\Cells\Cloud\Model\Chart $chart (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsPostWorksheetChartRequest($name, $sheet_name, $chart_index, $chart = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPostWorksheetChart'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPostWorksheetChart'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPostWorksheetChart'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($chart)) {
            $_tempBody = $chart;
            $_tempBodyName =str_replace('_','', 'chart');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsPostWorksheetChart'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPostWorksheetChartLegend
     *
     * Update chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Legend $legend legend (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostWorksheetChartLegend($name, $sheet_name, $chart_index, $legend = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsPostWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $legend, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsPostWorksheetChartLegendWithHttpInfo
     *
     * Update chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Legend $legend (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $legend = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $legend, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPostWorksheetChartLegendAsync
     *
     * Update chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Legend $legend (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostWorksheetChartLegendAsync($name, $sheet_name, $chart_index, $legend = null, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsPostWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $legend, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPostWorksheetChartLegendAsyncWithHttpInfo
     *
     * Update chart legend
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Legend $legend (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $legend = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $legend, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPostWorksheetChartLegend'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Legend $legend (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsPostWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $legend = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPostWorksheetChartLegend'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPostWorksheetChartLegend'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPostWorksheetChartLegend'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($legend)) {
            $_tempBody = $legend;
            $_tempBodyName =str_replace('_','', 'legend');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsPostWorksheetChartLegend'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPostWorksheetChartTitle
     *
     * Update chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostWorksheetChartTitle($name, $sheet_name, $chart_index, $title = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsPostWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $title, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsPostWorksheetChartTitleWithHttpInfo
     *
     * Update chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $title = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $title, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPostWorksheetChartTitleAsync
     *
     * Update chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostWorksheetChartTitleAsync($name, $sheet_name, $chart_index, $title = null, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsPostWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $title, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPostWorksheetChartTitleAsyncWithHttpInfo
     *
     * Update chart title
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPostWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $title = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPostWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $title, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPostWorksheetChartTitle'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsPostWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $title = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPostWorksheetChartTitle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPostWorksheetChartTitle'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPostWorksheetChartTitle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($title)) {
            $_tempBody = $title;
            $_tempBodyName =str_replace('_','', 'title');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsPostWorksheetChartTitle'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPutWorksheetAddChart
     *
     * Add new chart to worksheet.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $chart_type Chart type, please refer property Type in chart resource. (required)
     * @param  int $upper_left_row New chart upper left row. (optional, default to 0)
     * @param  int $upper_left_column New chart upperleft column. (optional, default to 0)
     * @param  int $lower_right_row New chart lower right row. (optional, default to 0)
     * @param  int $lower_right_column New chart lower right column. (optional, default to 0)
     * @param  string $area Specifies values from which to plot the data series. (optional)
     * @param  bool $is_vertical Specifies whether to plot the series from a range of cell values by row or by column. (optional, default to true)
     * @param  string $category_data Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). (optional)
     * @param  bool $is_auto_get_serial_name Specifies whether auto update serial name. (optional, default to true)
     * @param  string $title Specifies chart title name. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  bool $data_labels data_labels (optional, default to true)
     * @param  string $data_labels_position data_labels_position (optional, default to Above)
     * @param  string $pivot_table_sheet pivot_table_sheet (optional)
     * @param  string $pivot_table_name pivot_table_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPutWorksheetAddChart($name, $sheet_name, $chart_type, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $area = null, $is_vertical = 'true', $category_data = null, $is_auto_get_serial_name = 'true', $title = null, $folder = null, $storage_name = null, $data_labels = 'true', $data_labels_position = 'Above', $pivot_table_sheet = null, $pivot_table_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsPutWorksheetAddChartWithHttpInfo($name, $sheet_name, $chart_type, $upper_left_row, $upper_left_column, $lower_right_row, $lower_right_column, $area, $is_vertical, $category_data, $is_auto_get_serial_name, $title, $folder, $storage_name, $data_labels, $data_labels_position, $pivot_table_sheet, $pivot_table_name);
        return $response;
    }

    /**
     * Operation cellsChartsPutWorksheetAddChartWithHttpInfo
     *
     * Add new chart to worksheet.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $chart_type Chart type, please refer property Type in chart resource. (required)
     * @param  int $upper_left_row New chart upper left row. (optional, default to 0)
     * @param  int $upper_left_column New chart upperleft column. (optional, default to 0)
     * @param  int $lower_right_row New chart lower right row. (optional, default to 0)
     * @param  int $lower_right_column New chart lower right column. (optional, default to 0)
     * @param  string $area Specifies values from which to plot the data series. (optional)
     * @param  bool $is_vertical Specifies whether to plot the series from a range of cell values by row or by column. (optional, default to true)
     * @param  string $category_data Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). (optional)
     * @param  bool $is_auto_get_serial_name Specifies whether auto update serial name. (optional, default to true)
     * @param  string $title Specifies chart title name. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  bool $data_labels (optional, default to true)
     * @param  string $data_labels_position (optional, default to Above)
     * @param  string $pivot_table_sheet (optional)
     * @param  string $pivot_table_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPutWorksheetAddChartWithHttpInfo($name, $sheet_name, $chart_type, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $area = null, $is_vertical = 'true', $category_data = null, $is_auto_get_serial_name = 'true', $title = null, $folder = null, $storage_name = null, $data_labels = 'true', $data_labels_position = 'Above', $pivot_table_sheet = null, $pivot_table_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPutWorksheetAddChartRequest($name, $sheet_name, $chart_type, $upper_left_row, $upper_left_column, $lower_right_row, $lower_right_column, $area, $is_vertical, $category_data, $is_auto_get_serial_name, $title, $folder, $storage_name, $data_labels, $data_labels_position, $pivot_table_sheet, $pivot_table_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPutWorksheetAddChartAsync
     *
     * Add new chart to worksheet.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $chart_type Chart type, please refer property Type in chart resource. (required)
     * @param  int $upper_left_row New chart upper left row. (optional, default to 0)
     * @param  int $upper_left_column New chart upperleft column. (optional, default to 0)
     * @param  int $lower_right_row New chart lower right row. (optional, default to 0)
     * @param  int $lower_right_column New chart lower right column. (optional, default to 0)
     * @param  string $area Specifies values from which to plot the data series. (optional)
     * @param  bool $is_vertical Specifies whether to plot the series from a range of cell values by row or by column. (optional, default to true)
     * @param  string $category_data Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). (optional)
     * @param  bool $is_auto_get_serial_name Specifies whether auto update serial name. (optional, default to true)
     * @param  string $title Specifies chart title name. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  bool $data_labels (optional, default to true)
     * @param  string $data_labels_position (optional, default to Above)
     * @param  string $pivot_table_sheet (optional)
     * @param  string $pivot_table_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPutWorksheetAddChartAsync($name, $sheet_name, $chart_type, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $area = null, $is_vertical = 'true', $category_data = null, $is_auto_get_serial_name = 'true', $title = null, $folder = null, $storage_name = null, $data_labels = 'true', $data_labels_position = 'Above', $pivot_table_sheet = null, $pivot_table_name = null)
    {
        return $this->cellsChartsPutWorksheetAddChartAsyncWithHttpInfo($name, $sheet_name, $chart_type, $upper_left_row, $upper_left_column, $lower_right_row, $lower_right_column, $area, $is_vertical, $category_data, $is_auto_get_serial_name, $title, $folder, $storage_name, $data_labels, $data_labels_position, $pivot_table_sheet, $pivot_table_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPutWorksheetAddChartAsyncWithHttpInfo
     *
     * Add new chart to worksheet.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $chart_type Chart type, please refer property Type in chart resource. (required)
     * @param  int $upper_left_row New chart upper left row. (optional, default to 0)
     * @param  int $upper_left_column New chart upperleft column. (optional, default to 0)
     * @param  int $lower_right_row New chart lower right row. (optional, default to 0)
     * @param  int $lower_right_column New chart lower right column. (optional, default to 0)
     * @param  string $area Specifies values from which to plot the data series. (optional)
     * @param  bool $is_vertical Specifies whether to plot the series from a range of cell values by row or by column. (optional, default to true)
     * @param  string $category_data Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). (optional)
     * @param  bool $is_auto_get_serial_name Specifies whether auto update serial name. (optional, default to true)
     * @param  string $title Specifies chart title name. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  bool $data_labels (optional, default to true)
     * @param  string $data_labels_position (optional, default to Above)
     * @param  string $pivot_table_sheet (optional)
     * @param  string $pivot_table_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPutWorksheetAddChartAsyncWithHttpInfo($name, $sheet_name, $chart_type, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $area = null, $is_vertical = 'true', $category_data = null, $is_auto_get_serial_name = 'true', $title = null, $folder = null, $storage_name = null, $data_labels = 'true', $data_labels_position = 'Above', $pivot_table_sheet = null, $pivot_table_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPutWorksheetAddChartRequest($name, $sheet_name, $chart_type, $upper_left_row, $upper_left_column, $lower_right_row, $lower_right_column, $area, $is_vertical, $category_data, $is_auto_get_serial_name, $title, $folder, $storage_name, $data_labels, $data_labels_position, $pivot_table_sheet, $pivot_table_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPutWorksheetAddChart'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $chart_type Chart type, please refer property Type in chart resource. (required)
     * @param  int $upper_left_row New chart upper left row. (optional, default to 0)
     * @param  int $upper_left_column New chart upperleft column. (optional, default to 0)
     * @param  int $lower_right_row New chart lower right row. (optional, default to 0)
     * @param  int $lower_right_column New chart lower right column. (optional, default to 0)
     * @param  string $area Specifies values from which to plot the data series. (optional)
     * @param  bool $is_vertical Specifies whether to plot the series from a range of cell values by row or by column. (optional, default to true)
     * @param  string $category_data Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). (optional)
     * @param  bool $is_auto_get_serial_name Specifies whether auto update serial name. (optional, default to true)
     * @param  string $title Specifies chart title name. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  bool $data_labels (optional, default to true)
     * @param  string $data_labels_position (optional, default to Above)
     * @param  string $pivot_table_sheet (optional)
     * @param  string $pivot_table_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsPutWorksheetAddChartRequest($name, $sheet_name, $chart_type, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $area = null, $is_vertical = 'true', $category_data = null, $is_auto_get_serial_name = 'true', $title = null, $folder = null, $storage_name = null, $data_labels = 'true', $data_labels_position = 'Above', $pivot_table_sheet = null, $pivot_table_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPutWorksheetAddChart'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPutWorksheetAddChart'
            );
        }
        // verify the required parameter 'chart_type' is set
        if ($chart_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_type when calling cellsChartsPutWorksheetAddChart'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($chart_type !== null) {
            $queryParams['chartType'] = ObjectSerializer::toQueryValue($chart_type);
        }
        // query params
        if ($upper_left_row !== null) {
            $queryParams['upperLeftRow'] = ObjectSerializer::toQueryValue($upper_left_row);
        }
        // query params
        if ($upper_left_column !== null) {
            $queryParams['upperLeftColumn'] = ObjectSerializer::toQueryValue($upper_left_column);
        }
        // query params
        if ($lower_right_row !== null) {
            $queryParams['lowerRightRow'] = ObjectSerializer::toQueryValue($lower_right_row);
        }
        // query params
        if ($lower_right_column !== null) {
            $queryParams['lowerRightColumn'] = ObjectSerializer::toQueryValue($lower_right_column);
        }
        // query params
        if ($area !== null) {
            $queryParams['area'] = ObjectSerializer::toQueryValue($area);
        }
        // query params
        if ($is_vertical !== null) {
            $queryParams['isVertical'] = ObjectSerializer::toQueryValue($is_vertical);
        }
        // query params
        if ($category_data !== null) {
            $queryParams['categoryData'] = ObjectSerializer::toQueryValue($category_data);
        }
        // query params
        if ($is_auto_get_serial_name !== null) {
            $queryParams['isAutoGetSerialName'] = ObjectSerializer::toQueryValue($is_auto_get_serial_name);
        }
        // query params
        if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }
        // query params
        if ($data_labels !== null) {
            $queryParams['dataLabels'] = ObjectSerializer::toQueryValue($data_labels);
        }
        // query params
        if ($data_labels_position !== null) {
            $queryParams['dataLabelsPosition'] = ObjectSerializer::toQueryValue($data_labels_position);
        }
        // query params
        if ($pivot_table_sheet !== null) {
            $queryParams['pivotTableSheet'] = ObjectSerializer::toQueryValue($pivot_table_sheet);
        }
        // query params
        if ($pivot_table_name !== null) {
            $queryParams['pivotTableName'] = ObjectSerializer::toQueryValue($pivot_table_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsPutWorksheetAddChart'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPutWorksheetChartLegend
     *
     * Show legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPutWorksheetChartLegend($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsPutWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsPutWorksheetChartLegendWithHttpInfo
     *
     * Show legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPutWorksheetChartLegendWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPutWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPutWorksheetChartLegendAsync
     *
     * Show legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPutWorksheetChartLegendAsync($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsPutWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPutWorksheetChartLegendAsyncWithHttpInfo
     *
     * Show legend in chart
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPutWorksheetChartLegendAsyncWithHttpInfo($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPutWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPutWorksheetChartLegend'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsPutWorksheetChartLegendRequest($name, $sheet_name, $chart_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPutWorksheetChartLegend'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPutWorksheetChartLegend'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPutWorksheetChartLegend'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsPutWorksheetChartLegend'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsChartsPutWorksheetChartTitle
     *
     * Add chart title / Set chart title visible
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPutWorksheetChartTitle($name, $sheet_name, $chart_index, $title = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsChartsPutWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $title, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsChartsPutWorksheetChartTitleWithHttpInfo
     *
     * Add chart title / Set chart title visible
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPutWorksheetChartTitleWithHttpInfo($name, $sheet_name, $chart_index, $title = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPutWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $title, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsChartsPutWorksheetChartTitleAsync
     *
     * Add chart title / Set chart title visible
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPutWorksheetChartTitleAsync($name, $sheet_name, $chart_index, $title = null, $folder = null, $storage_name = null)
    {
        return $this->cellsChartsPutWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $title, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsChartsPutWorksheetChartTitleAsyncWithHttpInfo
     *
     * Add chart title / Set chart title visible
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsChartsPutWorksheetChartTitleAsyncWithHttpInfo($name, $sheet_name, $chart_index, $title = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsChartsPutWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $title, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsChartsPutWorksheetChartTitle'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $chart_index The chart index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Title $title Chart title. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsChartsPutWorksheetChartTitleRequest($name, $sheet_name, $chart_index, $title = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsChartsPutWorksheetChartTitle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsChartsPutWorksheetChartTitle'
            );
        }
        // verify the required parameter 'chart_index' is set
        if ($chart_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chart_index when calling cellsChartsPutWorksheetChartTitle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($chart_index !== null) {
            $resourcePath = str_replace(
                '{' . 'chartIndex' . '}',
                ObjectSerializer::toPathValue($chart_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($title)) {
            $_tempBody = $title;
            $_tempBodyName =str_replace('_','', 'title');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsChartsPutWorksheetChartTitle'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormatting
     *
     * Remove conditional formatting
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormatting($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo($name, $sheet_name, $index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo
     *
     * Remove conditional formatting
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingRequest($name, $sheet_name, $index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsync
     *
     * Remove conditional formatting
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsync($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        return $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsyncWithHttpInfo($name, $sheet_name, $index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsyncWithHttpInfo
     *
     * Remove conditional formatting
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsyncWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingRequest($name, $sheet_name, $index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsDeleteWorksheetConditionalFormatting'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingRequest($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormatting'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormatting'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormatting'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsConditionalFormattingsDeleteWorksheetConditionalFormatting'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea
     *
     * Remove cell area from conditional formatting.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $start_row start_row (required)
     * @param  int $start_column start_column (required)
     * @param  int $total_rows total_rows (required)
     * @param  int $total_columns total_columns (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo
     *
     * Remove cell area from conditional formatting.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $start_row (required)
     * @param  int $start_column (required)
     * @param  int $total_rows (required)
     * @param  int $total_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsync
     *
     * Remove cell area from conditional formatting.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $start_row (required)
     * @param  int $start_column (required)
     * @param  int $total_rows (required)
     * @param  int $total_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsync($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        return $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsyncWithHttpInfo
     *
     * Remove cell area from conditional formatting.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $start_row (required)
     * @param  int $start_column (required)
     * @param  int $total_rows (required)
     * @param  int $total_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $start_row (required)
     * @param  int $start_column (required)
     * @param  int $total_rows (required)
     * @param  int $total_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
            );
        }
        // verify the required parameter 'start_row' is set
        if ($start_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_row when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
            );
        }
        // verify the required parameter 'start_column' is set
        if ($start_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_column when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
            );
        }
        // verify the required parameter 'total_rows' is set
        if ($total_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_rows when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
            );
        }
        // verify the required parameter 'total_columns' is set
        if ($total_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_columns when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings/area';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($total_columns !== null) {
            $queryParams['totalColumns'] = ObjectSerializer::toQueryValue($total_columns);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattings
     *
     * Clear all condition formattings
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattings($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo
     *
     * Clear all condition formattings
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsync
     *
     * Clear all condition formattings
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsyncWithHttpInfo
     *
     * Clear all condition formattings
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsDeleteWorksheetConditionalFormattings'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattings'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattings'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsConditionalFormattingsDeleteWorksheetConditionalFormattings'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormatting
     *
     * Get conditional formatting
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ConditionalFormattingResponse
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormatting($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo($name, $sheet_name, $index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo
     *
     * Get conditional formatting
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ConditionalFormattingResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ConditionalFormattingResponse';
        $request = $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingRequest($name, $sheet_name, $index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ConditionalFormattingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattingAsync
     *
     * Get conditional formatting
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattingAsync($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        return $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingAsyncWithHttpInfo($name, $sheet_name, $index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattingAsyncWithHttpInfo
     *
     * Get conditional formatting
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattingAsyncWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ConditionalFormattingResponse';
        $request = $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingRequest($name, $sheet_name, $index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsGetWorksheetConditionalFormatting'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsConditionalFormattingsGetWorksheetConditionalFormattingRequest($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsGetWorksheetConditionalFormatting'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsGetWorksheetConditionalFormatting'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsConditionalFormattingsGetWorksheetConditionalFormatting'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsConditionalFormattingsGetWorksheetConditionalFormatting'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattings
     *
     * Get conditional formattings
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ConditionalFormattingsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattings($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo
     *
     * Get conditional formattings
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ConditionalFormattingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ConditionalFormattingsResponse';
        $request = $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ConditionalFormattingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattingsAsync
     *
     * Get conditional formattings
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattingsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattingsAsyncWithHttpInfo
     *
     * Get conditional formattings
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattingsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ConditionalFormattingsResponse';
        $request = $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsGetWorksheetConditionalFormattings'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsConditionalFormattingsGetWorksheetConditionalFormattingsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsGetWorksheetConditionalFormattings'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsGetWorksheetConditionalFormattings'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsConditionalFormattingsGetWorksheetConditionalFormattings'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetConditionalFormatting
     *
     * Add a condition formatting.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $cell_area cell_area (required)
     * @param  \Aspose\Cells\Cloud\Model\FormatCondition $format_condition format_condition (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetConditionalFormatting($name, $sheet_name, $cell_area, $format_condition = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo($name, $sheet_name, $cell_area, $format_condition, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo
     *
     * Add a condition formatting.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_area (required)
     * @param  \Aspose\Cells\Cloud\Model\FormatCondition $format_condition (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo($name, $sheet_name, $cell_area, $format_condition = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetConditionalFormattingRequest($name, $sheet_name, $cell_area, $format_condition, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetConditionalFormattingAsync
     *
     * Add a condition formatting.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_area (required)
     * @param  \Aspose\Cells\Cloud\Model\FormatCondition $format_condition (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetConditionalFormattingAsync($name, $sheet_name, $cell_area, $format_condition = null, $folder = null, $storage_name = null)
    {
        return $this->cellsConditionalFormattingsPutWorksheetConditionalFormattingAsyncWithHttpInfo($name, $sheet_name, $cell_area, $format_condition, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetConditionalFormattingAsyncWithHttpInfo
     *
     * Add a condition formatting.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_area (required)
     * @param  \Aspose\Cells\Cloud\Model\FormatCondition $format_condition (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetConditionalFormattingAsyncWithHttpInfo($name, $sheet_name, $cell_area, $format_condition = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetConditionalFormattingRequest($name, $sheet_name, $cell_area, $format_condition, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsPutWorksheetConditionalFormatting'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_area (required)
     * @param  \Aspose\Cells\Cloud\Model\FormatCondition $format_condition (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsConditionalFormattingsPutWorksheetConditionalFormattingRequest($name, $sheet_name, $cell_area, $format_condition = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsPutWorksheetConditionalFormatting'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsPutWorksheetConditionalFormatting'
            );
        }
        // verify the required parameter 'cell_area' is set
        if ($cell_area === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_area when calling cellsConditionalFormattingsPutWorksheetConditionalFormatting'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cell_area !== null) {
            $queryParams['cellArea'] = ObjectSerializer::toQueryValue($cell_area);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($format_condition)) {
            $_tempBody = $format_condition;
            $_tempBodyName =str_replace('_','', 'format_condition');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsConditionalFormattingsPutWorksheetConditionalFormatting'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatCondition
     *
     * Add a format condition.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $cell_area cell_area (required)
     * @param  string $type type (required)
     * @param  string $operator_type operator_type (required)
     * @param  string $formula1 formula1 (required)
     * @param  string $formula2 formula2 (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetFormatCondition($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo
     *
     * Add a format condition.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetFormatConditionRequest($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionAsync
     *
     * Add a format condition.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionAsync($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder = null, $storage_name = null)
    {
        return $this->cellsConditionalFormattingsPutWorksheetFormatConditionAsyncWithHttpInfo($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionAsyncWithHttpInfo
     *
     * Add a format condition.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionAsyncWithHttpInfo($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetFormatConditionRequest($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsPutWorksheetFormatCondition'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsConditionalFormattingsPutWorksheetFormatConditionRequest($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'cell_area' is set
        if ($cell_area === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_area when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'operator_type' is set
        if ($operator_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_type when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'formula1' is set
        if ($formula1 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formula1 when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'formula2' is set
        if ($formula2 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formula2 when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cell_area !== null) {
            $queryParams['cellArea'] = ObjectSerializer::toQueryValue($cell_area);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($operator_type !== null) {
            $queryParams['operatorType'] = ObjectSerializer::toQueryValue($operator_type);
        }
        // query params
        if ($formula1 !== null) {
            $queryParams['formula1'] = ObjectSerializer::toQueryValue($formula1);
        }
        // query params
        if ($formula2 !== null) {
            $queryParams['formula2'] = ObjectSerializer::toQueryValue($formula2);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsConditionalFormattingsPutWorksheetFormatCondition'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionArea
     *
     * add a cell area for format condition
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $cell_area cell_area (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionArea($name, $sheet_name, $index, $cell_area, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo($name, $sheet_name, $index, $cell_area, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo
     *
     * add a cell area for format condition
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo($name, $sheet_name, $index, $cell_area, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetFormatConditionAreaRequest($name, $sheet_name, $index, $cell_area, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionAreaAsync
     *
     * add a cell area for format condition
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionAreaAsync($name, $sheet_name, $index, $cell_area, $folder = null, $storage_name = null)
    {
        return $this->cellsConditionalFormattingsPutWorksheetFormatConditionAreaAsyncWithHttpInfo($name, $sheet_name, $index, $cell_area, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionAreaAsyncWithHttpInfo
     *
     * add a cell area for format condition
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionAreaAsyncWithHttpInfo($name, $sheet_name, $index, $cell_area, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetFormatConditionAreaRequest($name, $sheet_name, $index, $cell_area, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsPutWorksheetFormatConditionArea'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsConditionalFormattingsPutWorksheetFormatConditionAreaRequest($name, $sheet_name, $index, $cell_area, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea'
            );
        }
        // verify the required parameter 'cell_area' is set
        if ($cell_area === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_area when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/area';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cell_area !== null) {
            $queryParams['cellArea'] = ObjectSerializer::toQueryValue($cell_area);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsConditionalFormattingsPutWorksheetFormatConditionArea'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionCondition
     *
     * Add a condition for format condition.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $type type (required)
     * @param  string $operator_type operator_type (required)
     * @param  string $formula1 formula1 (required)
     * @param  string $formula2 formula2 (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionCondition($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo
     *
     * Add a condition for format condition.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetFormatConditionConditionRequest($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionConditionAsync
     *
     * Add a condition for format condition.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionConditionAsync($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder = null, $storage_name = null)
    {
        return $this->cellsConditionalFormattingsPutWorksheetFormatConditionConditionAsyncWithHttpInfo($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionConditionAsyncWithHttpInfo
     *
     * Add a condition for format condition.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionConditionAsyncWithHttpInfo($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetFormatConditionConditionRequest($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsConditionalFormattingsPutWorksheetFormatConditionConditionRequest($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }
        // verify the required parameter 'operator_type' is set
        if ($operator_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_type when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }
        // verify the required parameter 'formula1' is set
        if ($formula1 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formula1 when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }
        // verify the required parameter 'formula2' is set
        if ($formula2 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formula2 when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/condition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($operator_type !== null) {
            $queryParams['operatorType'] = ObjectSerializer::toQueryValue($operator_type);
        }
        // query params
        if ($formula1 !== null) {
            $queryParams['formula1'] = ObjectSerializer::toQueryValue($formula1);
        }
        // query params
        if ($formula2 !== null) {
            $queryParams['formula2'] = ObjectSerializer::toQueryValue($formula2);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsConditionalFormattingsPutWorksheetFormatConditionCondition'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsDeleteWorksheetColumns
     *
     * Delete worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsDeleteWorksheetColumns($name, $sheet_name, $column_index, $columns, $update_reference, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsDeleteWorksheetColumnsWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsDeleteWorksheetColumnsWithHttpInfo
     *
     * Delete worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsDeleteWorksheetColumnsWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsDeleteWorksheetColumnsRequest($name, $sheet_name, $column_index, $columns, $update_reference, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsDeleteWorksheetColumnsAsync
     *
     * Delete worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsDeleteWorksheetColumnsAsync($name, $sheet_name, $column_index, $columns, $update_reference, $folder = null, $storage_name = null)
    {
        return $this->cellsDeleteWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsDeleteWorksheetColumnsAsyncWithHttpInfo
     *
     * Delete worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsDeleteWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsDeleteWorksheetColumnsRequest($name, $sheet_name, $column_index, $columns, $update_reference, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsDeleteWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsDeleteWorksheetColumnsRequest($name, $sheet_name, $column_index, $columns, $update_reference, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsDeleteWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsDeleteWorksheetColumns'
            );
        }
        // verify the required parameter 'column_index' is set
        if ($column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_index when calling cellsDeleteWorksheetColumns'
            );
        }
        // verify the required parameter 'columns' is set
        if ($columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $columns when calling cellsDeleteWorksheetColumns'
            );
        }
        // verify the required parameter 'update_reference' is set
        if ($update_reference === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_reference when calling cellsDeleteWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }
        // query params
        if ($update_reference !== null) {
            $queryParams['updateReference'] = ObjectSerializer::toQueryValue($update_reference);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($column_index !== null) {
            $resourcePath = str_replace(
                '{' . 'columnIndex' . '}',
                ObjectSerializer::toPathValue($column_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsDeleteWorksheetColumns'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsDeleteWorksheetRow
     *
     * Delete worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsDeleteWorksheetRow($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsDeleteWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsDeleteWorksheetRowWithHttpInfo
     *
     * Delete worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsDeleteWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsDeleteWorksheetRowRequest($name, $sheet_name, $row_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsDeleteWorksheetRowAsync
     *
     * Delete worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsDeleteWorksheetRowAsync($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        return $this->cellsDeleteWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsDeleteWorksheetRowAsyncWithHttpInfo
     *
     * Delete worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsDeleteWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsDeleteWorksheetRowRequest($name, $sheet_name, $row_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsDeleteWorksheetRow'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsDeleteWorksheetRowRequest($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsDeleteWorksheetRow'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsDeleteWorksheetRow'
            );
        }
        // verify the required parameter 'row_index' is set
        if ($row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_index when calling cellsDeleteWorksheetRow'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($row_index !== null) {
            $resourcePath = str_replace(
                '{' . 'rowIndex' . '}',
                ObjectSerializer::toPathValue($row_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsDeleteWorksheetRow'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsDeleteWorksheetRows
     *
     * Delete several worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsDeleteWorksheetRows($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsDeleteWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsDeleteWorksheetRowsWithHttpInfo
     *
     * Delete several worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsDeleteWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsDeleteWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsDeleteWorksheetRowsAsync
     *
     * Delete several worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsDeleteWorksheetRowsAsync($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null, $storage_name = null)
    {
        return $this->cellsDeleteWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsDeleteWorksheetRowsAsyncWithHttpInfo
     *
     * Delete several worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsDeleteWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsDeleteWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsDeleteWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet bame. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsDeleteWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsDeleteWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsDeleteWorksheetRows'
            );
        }
        // verify the required parameter 'startrow' is set
        if ($startrow === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startrow when calling cellsDeleteWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startrow !== null) {
            $queryParams['startrow'] = ObjectSerializer::toQueryValue($startrow);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($update_reference !== null) {
            $queryParams['updateReference'] = ObjectSerializer::toQueryValue($update_reference);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsDeleteWorksheetRows'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetCellHtmlString
     *
     * Read cell data by cell's name.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell&#39;s  name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
     /**
     * @deprecated 
     */
    public function cellsGetCellHtmlString($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsGetCellHtmlStringWithHttpInfo($name, $sheet_name, $cell_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsGetCellHtmlStringWithHttpInfo
     *
     * Read cell data by cell's name.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell&#39;s  name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsGetCellHtmlStringWithHttpInfo($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        $returnType = 'object';
        $request = $this->cellsGetCellHtmlStringRequest($name, $sheet_name, $cell_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetCellHtmlStringAsync
     *
     * Read cell data by cell's name.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell&#39;s  name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetCellHtmlStringAsync($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        return $this->cellsGetCellHtmlStringAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetCellHtmlStringAsyncWithHttpInfo
     *
     * Read cell data by cell's name.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell&#39;s  name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetCellHtmlStringAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        $returnType = 'object';
        $request = $this->cellsGetCellHtmlStringRequest($name, $sheet_name, $cell_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetCellHtmlString'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell&#39;s  name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsGetCellHtmlStringRequest($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetCellHtmlString'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetCellHtmlString'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsGetCellHtmlString'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsGetCellHtmlString'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetCell
     *
     * Read cell data by cell's name.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_or_method_name The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetCell($name, $sheet_name, $cell_or_method_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsGetWorksheetCellWithHttpInfo($name, $sheet_name, $cell_or_method_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetCellWithHttpInfo
     *
     * Read cell data by cell's name.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_or_method_name The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetCellWithHttpInfo($name, $sheet_name, $cell_or_method_name, $folder = null, $storage_name = null)
    {
        $returnType = 'object';
        $request = $this->cellsGetWorksheetCellRequest($name, $sheet_name, $cell_or_method_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetCellAsync
     *
     * Read cell data by cell's name.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_or_method_name The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetCellAsync($name, $sheet_name, $cell_or_method_name, $folder = null, $storage_name = null)
    {
        return $this->cellsGetWorksheetCellAsyncWithHttpInfo($name, $sheet_name, $cell_or_method_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetCellAsyncWithHttpInfo
     *
     * Read cell data by cell's name.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_or_method_name The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetCellAsyncWithHttpInfo($name, $sheet_name, $cell_or_method_name, $folder = null, $storage_name = null)
    {
        $returnType = 'object';
        $request = $this->cellsGetWorksheetCellRequest($name, $sheet_name, $cell_or_method_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetCell'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_or_method_name The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsGetWorksheetCellRequest($name, $sheet_name, $cell_or_method_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetCell'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetCell'
            );
        }
        // verify the required parameter 'cell_or_method_name' is set
        if ($cell_or_method_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_or_method_name when calling cellsGetWorksheetCell'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellOrMethodName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_or_method_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellOrMethodName' . '}',
                ObjectSerializer::toPathValue($cell_or_method_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsGetWorksheetCell'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetCellStyle
     *
     * Read cell's style info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name Cell&#39;s name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\StyleResponse
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetCellStyle($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsGetWorksheetCellStyleWithHttpInfo($name, $sheet_name, $cell_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetCellStyleWithHttpInfo
     *
     * Read cell's style info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name Cell&#39;s name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\StyleResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetCellStyleWithHttpInfo($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\StyleResponse';
        $request = $this->cellsGetWorksheetCellStyleRequest($name, $sheet_name, $cell_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\StyleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetCellStyleAsync
     *
     * Read cell's style info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name Cell&#39;s name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetCellStyleAsync($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        return $this->cellsGetWorksheetCellStyleAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetCellStyleAsyncWithHttpInfo
     *
     * Read cell's style info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name Cell&#39;s name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetCellStyleAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\StyleResponse';
        $request = $this->cellsGetWorksheetCellStyleRequest($name, $sheet_name, $cell_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetCellStyle'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name Cell&#39;s name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsGetWorksheetCellStyleRequest($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetCellStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetCellStyle'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsGetWorksheetCellStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsGetWorksheetCellStyle'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetCells
     *
     * Get cells info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $offest Begginig offset. (optional, default to 0)
     * @param  int $count Maximum amount of cells in the response. (optional, default to 0)
     * @param  string $folder Document&#39;s folder name. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetCells($name, $sheet_name, $offest = '0', $count = '0', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsGetWorksheetCellsWithHttpInfo($name, $sheet_name, $offest, $count, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetCellsWithHttpInfo
     *
     * Get cells info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $offest Begginig offset. (optional, default to 0)
     * @param  int $count Maximum amount of cells in the response. (optional, default to 0)
     * @param  string $folder Document&#39;s folder name. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetCellsWithHttpInfo($name, $sheet_name, $offest = '0', $count = '0', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsResponse';
        $request = $this->cellsGetWorksheetCellsRequest($name, $sheet_name, $offest, $count, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetCellsAsync
     *
     * Get cells info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $offest Begginig offset. (optional, default to 0)
     * @param  int $count Maximum amount of cells in the response. (optional, default to 0)
     * @param  string $folder Document&#39;s folder name. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetCellsAsync($name, $sheet_name, $offest = '0', $count = '0', $folder = null, $storage_name = null)
    {
        return $this->cellsGetWorksheetCellsAsyncWithHttpInfo($name, $sheet_name, $offest, $count, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetCellsAsyncWithHttpInfo
     *
     * Get cells info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $offest Begginig offset. (optional, default to 0)
     * @param  int $count Maximum amount of cells in the response. (optional, default to 0)
     * @param  string $folder Document&#39;s folder name. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetCellsAsyncWithHttpInfo($name, $sheet_name, $offest = '0', $count = '0', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsResponse';
        $request = $this->cellsGetWorksheetCellsRequest($name, $sheet_name, $offest, $count, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetCells'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $offest Begginig offset. (optional, default to 0)
     * @param  int $count Maximum amount of cells in the response. (optional, default to 0)
     * @param  string $folder Document&#39;s folder name. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsGetWorksheetCellsRequest($name, $sheet_name, $offest = '0', $count = '0', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetCells'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetCells'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offest !== null) {
            $queryParams['offest'] = ObjectSerializer::toQueryValue($offest);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsGetWorksheetCells'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetColumn
     *
     * Read worksheet column data by column's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ColumnResponse
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetColumn($name, $sheet_name, $column_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsGetWorksheetColumnWithHttpInfo($name, $sheet_name, $column_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetColumnWithHttpInfo
     *
     * Read worksheet column data by column's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ColumnResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetColumnWithHttpInfo($name, $sheet_name, $column_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnResponse';
        $request = $this->cellsGetWorksheetColumnRequest($name, $sheet_name, $column_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ColumnResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetColumnAsync
     *
     * Read worksheet column data by column's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetColumnAsync($name, $sheet_name, $column_index, $folder = null, $storage_name = null)
    {
        return $this->cellsGetWorksheetColumnAsyncWithHttpInfo($name, $sheet_name, $column_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetColumnAsyncWithHttpInfo
     *
     * Read worksheet column data by column's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetColumnAsyncWithHttpInfo($name, $sheet_name, $column_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnResponse';
        $request = $this->cellsGetWorksheetColumnRequest($name, $sheet_name, $column_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetColumn'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsGetWorksheetColumnRequest($name, $sheet_name, $column_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetColumn'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetColumn'
            );
        }
        // verify the required parameter 'column_index' is set
        if ($column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_index when calling cellsGetWorksheetColumn'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($column_index !== null) {
            $resourcePath = str_replace(
                '{' . 'columnIndex' . '}',
                ObjectSerializer::toPathValue($column_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsGetWorksheetColumn'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetColumns
     *
     * Read worksheet columns info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ColumnsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetColumns($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsGetWorksheetColumnsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetColumnsWithHttpInfo
     *
     * Read worksheet columns info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ColumnsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetColumnsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnsResponse';
        $request = $this->cellsGetWorksheetColumnsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ColumnsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetColumnsAsync
     *
     * Read worksheet columns info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetColumnsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsGetWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetColumnsAsyncWithHttpInfo
     *
     * Read worksheet columns info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnsResponse';
        $request = $this->cellsGetWorksheetColumnsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsGetWorksheetColumnsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsGetWorksheetColumns'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetRow
     *
     * Read worksheet row data by row's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\RowResponse
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetRow($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsGetWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetRowWithHttpInfo
     *
     * Read worksheet row data by row's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\RowResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RowResponse';
        $request = $this->cellsGetWorksheetRowRequest($name, $sheet_name, $row_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\RowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetRowAsync
     *
     * Read worksheet row data by row's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetRowAsync($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        return $this->cellsGetWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetRowAsyncWithHttpInfo
     *
     * Read worksheet row data by row's index.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RowResponse';
        $request = $this->cellsGetWorksheetRowRequest($name, $sheet_name, $row_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetRow'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsGetWorksheetRowRequest($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetRow'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetRow'
            );
        }
        // verify the required parameter 'row_index' is set
        if ($row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_index when calling cellsGetWorksheetRow'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($row_index !== null) {
            $resourcePath = str_replace(
                '{' . 'rowIndex' . '}',
                ObjectSerializer::toPathValue($row_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsGetWorksheetRow'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsGetWorksheetRows
     *
     * Read worksheet rows info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\RowsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetRows($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsGetWorksheetRowsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsGetWorksheetRowsWithHttpInfo
     *
     * Read worksheet rows info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\RowsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetRowsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RowsResponse';
        $request = $this->cellsGetWorksheetRowsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\RowsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsGetWorksheetRowsAsync
     *
     * Read worksheet rows info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetRowsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsGetWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsGetWorksheetRowsAsyncWithHttpInfo
     *
     * Read worksheet rows info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsGetWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RowsResponse';
        $request = $this->cellsGetWorksheetRowsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsGetWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workdook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsGetWorksheetRowsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsGetWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsGetWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsGetWorksheetRows'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsHypelinksDeleteWorksheetHyperlink
     *
     * Delete worksheet hyperlink by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksDeleteWorksheetHyperlink($name, $sheet_name, $hyperlink_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsHypelinksDeleteWorksheetHyperlinkWithHttpInfo($name, $sheet_name, $hyperlink_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsHypelinksDeleteWorksheetHyperlinkWithHttpInfo
     *
     * Delete worksheet hyperlink by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksDeleteWorksheetHyperlinkWithHttpInfo($name, $sheet_name, $hyperlink_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsHypelinksDeleteWorksheetHyperlinkRequest($name, $sheet_name, $hyperlink_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsHypelinksDeleteWorksheetHyperlinkAsync
     *
     * Delete worksheet hyperlink by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksDeleteWorksheetHyperlinkAsync($name, $sheet_name, $hyperlink_index, $folder = null, $storage_name = null)
    {
        return $this->cellsHypelinksDeleteWorksheetHyperlinkAsyncWithHttpInfo($name, $sheet_name, $hyperlink_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsHypelinksDeleteWorksheetHyperlinkAsyncWithHttpInfo
     *
     * Delete worksheet hyperlink by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksDeleteWorksheetHyperlinkAsyncWithHttpInfo($name, $sheet_name, $hyperlink_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsHypelinksDeleteWorksheetHyperlinkRequest($name, $sheet_name, $hyperlink_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsHypelinksDeleteWorksheetHyperlink'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsHypelinksDeleteWorksheetHyperlinkRequest($name, $sheet_name, $hyperlink_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsHypelinksDeleteWorksheetHyperlink'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsHypelinksDeleteWorksheetHyperlink'
            );
        }
        // verify the required parameter 'hyperlink_index' is set
        if ($hyperlink_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hyperlink_index when calling cellsHypelinksDeleteWorksheetHyperlink'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($hyperlink_index !== null) {
            $resourcePath = str_replace(
                '{' . 'hyperlinkIndex' . '}',
                ObjectSerializer::toPathValue($hyperlink_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsHypelinksDeleteWorksheetHyperlink'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsHypelinksDeleteWorksheetHyperlinks
     *
     * Delete all hyperlinks in worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksDeleteWorksheetHyperlinks($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsHypelinksDeleteWorksheetHyperlinksWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsHypelinksDeleteWorksheetHyperlinksWithHttpInfo
     *
     * Delete all hyperlinks in worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksDeleteWorksheetHyperlinksWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsHypelinksDeleteWorksheetHyperlinksRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsHypelinksDeleteWorksheetHyperlinksAsync
     *
     * Delete all hyperlinks in worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksDeleteWorksheetHyperlinksAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsHypelinksDeleteWorksheetHyperlinksAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsHypelinksDeleteWorksheetHyperlinksAsyncWithHttpInfo
     *
     * Delete all hyperlinks in worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksDeleteWorksheetHyperlinksAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsHypelinksDeleteWorksheetHyperlinksRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsHypelinksDeleteWorksheetHyperlinks'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsHypelinksDeleteWorksheetHyperlinksRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsHypelinksDeleteWorksheetHyperlinks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsHypelinksDeleteWorksheetHyperlinks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/hyperlinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsHypelinksDeleteWorksheetHyperlinks'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsHypelinksGetWorksheetHyperlink
     *
     * Get worksheet hyperlink by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\HyperlinkResponse
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksGetWorksheetHyperlink($name, $sheet_name, $hyperlink_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsHypelinksGetWorksheetHyperlinkWithHttpInfo($name, $sheet_name, $hyperlink_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsHypelinksGetWorksheetHyperlinkWithHttpInfo
     *
     * Get worksheet hyperlink by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\HyperlinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksGetWorksheetHyperlinkWithHttpInfo($name, $sheet_name, $hyperlink_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\HyperlinkResponse';
        $request = $this->cellsHypelinksGetWorksheetHyperlinkRequest($name, $sheet_name, $hyperlink_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\HyperlinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsHypelinksGetWorksheetHyperlinkAsync
     *
     * Get worksheet hyperlink by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksGetWorksheetHyperlinkAsync($name, $sheet_name, $hyperlink_index, $folder = null, $storage_name = null)
    {
        return $this->cellsHypelinksGetWorksheetHyperlinkAsyncWithHttpInfo($name, $sheet_name, $hyperlink_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsHypelinksGetWorksheetHyperlinkAsyncWithHttpInfo
     *
     * Get worksheet hyperlink by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksGetWorksheetHyperlinkAsyncWithHttpInfo($name, $sheet_name, $hyperlink_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\HyperlinkResponse';
        $request = $this->cellsHypelinksGetWorksheetHyperlinkRequest($name, $sheet_name, $hyperlink_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsHypelinksGetWorksheetHyperlink'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsHypelinksGetWorksheetHyperlinkRequest($name, $sheet_name, $hyperlink_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsHypelinksGetWorksheetHyperlink'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsHypelinksGetWorksheetHyperlink'
            );
        }
        // verify the required parameter 'hyperlink_index' is set
        if ($hyperlink_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hyperlink_index when calling cellsHypelinksGetWorksheetHyperlink'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($hyperlink_index !== null) {
            $resourcePath = str_replace(
                '{' . 'hyperlinkIndex' . '}',
                ObjectSerializer::toPathValue($hyperlink_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsHypelinksGetWorksheetHyperlink'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsHypelinksGetWorksheetHyperlinks
     *
     * Get worksheet hyperlinks.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\HyperlinksResponse
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksGetWorksheetHyperlinks($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsHypelinksGetWorksheetHyperlinksWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsHypelinksGetWorksheetHyperlinksWithHttpInfo
     *
     * Get worksheet hyperlinks.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\HyperlinksResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksGetWorksheetHyperlinksWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\HyperlinksResponse';
        $request = $this->cellsHypelinksGetWorksheetHyperlinksRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\HyperlinksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsHypelinksGetWorksheetHyperlinksAsync
     *
     * Get worksheet hyperlinks.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksGetWorksheetHyperlinksAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsHypelinksGetWorksheetHyperlinksAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsHypelinksGetWorksheetHyperlinksAsyncWithHttpInfo
     *
     * Get worksheet hyperlinks.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksGetWorksheetHyperlinksAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\HyperlinksResponse';
        $request = $this->cellsHypelinksGetWorksheetHyperlinksRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsHypelinksGetWorksheetHyperlinks'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsHypelinksGetWorksheetHyperlinksRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsHypelinksGetWorksheetHyperlinks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsHypelinksGetWorksheetHyperlinks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/hyperlinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsHypelinksGetWorksheetHyperlinks'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsHypelinksPostWorksheetHyperlink
     *
     * Update worksheet hyperlink by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Hyperlink $hyperlink Hyperlink object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksPostWorksheetHyperlink($name, $sheet_name, $hyperlink_index, $hyperlink = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsHypelinksPostWorksheetHyperlinkWithHttpInfo($name, $sheet_name, $hyperlink_index, $hyperlink, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsHypelinksPostWorksheetHyperlinkWithHttpInfo
     *
     * Update worksheet hyperlink by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Hyperlink $hyperlink Hyperlink object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksPostWorksheetHyperlinkWithHttpInfo($name, $sheet_name, $hyperlink_index, $hyperlink = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsHypelinksPostWorksheetHyperlinkRequest($name, $sheet_name, $hyperlink_index, $hyperlink, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsHypelinksPostWorksheetHyperlinkAsync
     *
     * Update worksheet hyperlink by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Hyperlink $hyperlink Hyperlink object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksPostWorksheetHyperlinkAsync($name, $sheet_name, $hyperlink_index, $hyperlink = null, $folder = null, $storage_name = null)
    {
        return $this->cellsHypelinksPostWorksheetHyperlinkAsyncWithHttpInfo($name, $sheet_name, $hyperlink_index, $hyperlink, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsHypelinksPostWorksheetHyperlinkAsyncWithHttpInfo
     *
     * Update worksheet hyperlink by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Hyperlink $hyperlink Hyperlink object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksPostWorksheetHyperlinkAsyncWithHttpInfo($name, $sheet_name, $hyperlink_index, $hyperlink = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsHypelinksPostWorksheetHyperlinkRequest($name, $sheet_name, $hyperlink_index, $hyperlink, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsHypelinksPostWorksheetHyperlink'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $hyperlink_index The hyperlink&#39;s index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Hyperlink $hyperlink Hyperlink object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsHypelinksPostWorksheetHyperlinkRequest($name, $sheet_name, $hyperlink_index, $hyperlink = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsHypelinksPostWorksheetHyperlink'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsHypelinksPostWorksheetHyperlink'
            );
        }
        // verify the required parameter 'hyperlink_index' is set
        if ($hyperlink_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hyperlink_index when calling cellsHypelinksPostWorksheetHyperlink'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($hyperlink_index !== null) {
            $resourcePath = str_replace(
                '{' . 'hyperlinkIndex' . '}',
                ObjectSerializer::toPathValue($hyperlink_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($hyperlink)) {
            $_tempBody = $hyperlink;
            $_tempBodyName =str_replace('_','', 'hyperlink');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsHypelinksPostWorksheetHyperlink'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsHypelinksPutWorksheetHyperlink
     *
     * Add worksheet hyperlink.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $first_row first_row (required)
     * @param  int $first_column first_column (required)
     * @param  int $total_rows total_rows (required)
     * @param  int $total_columns total_columns (required)
     * @param  string $address address (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksPutWorksheetHyperlink($name, $sheet_name, $first_row, $first_column, $total_rows, $total_columns, $address, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsHypelinksPutWorksheetHyperlinkWithHttpInfo($name, $sheet_name, $first_row, $first_column, $total_rows, $total_columns, $address, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsHypelinksPutWorksheetHyperlinkWithHttpInfo
     *
     * Add worksheet hyperlink.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $first_row (required)
     * @param  int $first_column (required)
     * @param  int $total_rows (required)
     * @param  int $total_columns (required)
     * @param  string $address (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksPutWorksheetHyperlinkWithHttpInfo($name, $sheet_name, $first_row, $first_column, $total_rows, $total_columns, $address, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsHypelinksPutWorksheetHyperlinkRequest($name, $sheet_name, $first_row, $first_column, $total_rows, $total_columns, $address, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsHypelinksPutWorksheetHyperlinkAsync
     *
     * Add worksheet hyperlink.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $first_row (required)
     * @param  int $first_column (required)
     * @param  int $total_rows (required)
     * @param  int $total_columns (required)
     * @param  string $address (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksPutWorksheetHyperlinkAsync($name, $sheet_name, $first_row, $first_column, $total_rows, $total_columns, $address, $folder = null, $storage_name = null)
    {
        return $this->cellsHypelinksPutWorksheetHyperlinkAsyncWithHttpInfo($name, $sheet_name, $first_row, $first_column, $total_rows, $total_columns, $address, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsHypelinksPutWorksheetHyperlinkAsyncWithHttpInfo
     *
     * Add worksheet hyperlink.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $first_row (required)
     * @param  int $first_column (required)
     * @param  int $total_rows (required)
     * @param  int $total_columns (required)
     * @param  string $address (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsHypelinksPutWorksheetHyperlinkAsyncWithHttpInfo($name, $sheet_name, $first_row, $first_column, $total_rows, $total_columns, $address, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsHypelinksPutWorksheetHyperlinkRequest($name, $sheet_name, $first_row, $first_column, $total_rows, $total_columns, $address, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsHypelinksPutWorksheetHyperlink'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $first_row (required)
     * @param  int $first_column (required)
     * @param  int $total_rows (required)
     * @param  int $total_columns (required)
     * @param  string $address (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsHypelinksPutWorksheetHyperlinkRequest($name, $sheet_name, $first_row, $first_column, $total_rows, $total_columns, $address, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsHypelinksPutWorksheetHyperlink'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsHypelinksPutWorksheetHyperlink'
            );
        }
        // verify the required parameter 'first_row' is set
        if ($first_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_row when calling cellsHypelinksPutWorksheetHyperlink'
            );
        }
        // verify the required parameter 'first_column' is set
        if ($first_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_column when calling cellsHypelinksPutWorksheetHyperlink'
            );
        }
        // verify the required parameter 'total_rows' is set
        if ($total_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_rows when calling cellsHypelinksPutWorksheetHyperlink'
            );
        }
        // verify the required parameter 'total_columns' is set
        if ($total_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_columns when calling cellsHypelinksPutWorksheetHyperlink'
            );
        }
        // verify the required parameter 'address' is set
        if ($address === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling cellsHypelinksPutWorksheetHyperlink'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/hyperlinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_row !== null) {
            $queryParams['firstRow'] = ObjectSerializer::toQueryValue($first_row);
        }
        // query params
        if ($first_column !== null) {
            $queryParams['firstColumn'] = ObjectSerializer::toQueryValue($first_column);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($total_columns !== null) {
            $queryParams['totalColumns'] = ObjectSerializer::toQueryValue($total_columns);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsHypelinksPutWorksheetHyperlink'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObject
     *
     * Delete worksheet list object by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index List object index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsDeleteWorksheetListObject($name, $sheet_name, $list_object_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsListObjectsDeleteWorksheetListObjectWithHttpInfo($name, $sheet_name, $list_object_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjectWithHttpInfo
     *
     * Delete worksheet list object by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index List object index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsDeleteWorksheetListObjectWithHttpInfo($name, $sheet_name, $list_object_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsDeleteWorksheetListObjectRequest($name, $sheet_name, $list_object_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjectAsync
     *
     * Delete worksheet list object by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index List object index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsDeleteWorksheetListObjectAsync($name, $sheet_name, $list_object_index, $folder = null, $storage_name = null)
    {
        return $this->cellsListObjectsDeleteWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjectAsyncWithHttpInfo
     *
     * Delete worksheet list object by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index List object index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsDeleteWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsDeleteWorksheetListObjectRequest($name, $sheet_name, $list_object_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsDeleteWorksheetListObject'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index List object index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsListObjectsDeleteWorksheetListObjectRequest($name, $sheet_name, $list_object_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsDeleteWorksheetListObject'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsDeleteWorksheetListObject'
            );
        }
        // verify the required parameter 'list_object_index' is set
        if ($list_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_object_index when calling cellsListObjectsDeleteWorksheetListObject'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($list_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'listObjectIndex' . '}',
                ObjectSerializer::toPathValue($list_object_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsListObjectsDeleteWorksheetListObject'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjects
     *
     * Delete worksheet list objects
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsDeleteWorksheetListObjects($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsListObjectsDeleteWorksheetListObjectsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjectsWithHttpInfo
     *
     * Delete worksheet list objects
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsDeleteWorksheetListObjectsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsDeleteWorksheetListObjectsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjectsAsync
     *
     * Delete worksheet list objects
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsDeleteWorksheetListObjectsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsListObjectsDeleteWorksheetListObjectsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjectsAsyncWithHttpInfo
     *
     * Delete worksheet list objects
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsDeleteWorksheetListObjectsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsDeleteWorksheetListObjectsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsDeleteWorksheetListObjects'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsListObjectsDeleteWorksheetListObjectsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsDeleteWorksheetListObjects'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsDeleteWorksheetListObjects'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsListObjectsDeleteWorksheetListObjects'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObject
     *
     * Get worksheet list object info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $listobjectindex list object index. (required)
     * @param  string $format export format. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsGetWorksheetListObject($name, $sheet_name, $listobjectindex, $format = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsListObjectsGetWorksheetListObjectWithHttpInfo($name, $sheet_name, $listobjectindex, $format, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjectWithHttpInfo
     *
     * Get worksheet list object info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $listobjectindex list object index. (required)
     * @param  string $format export format. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsGetWorksheetListObjectWithHttpInfo($name, $sheet_name, $listobjectindex, $format = null, $folder = null, $storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsListObjectsGetWorksheetListObjectRequest($name, $sheet_name, $listobjectindex, $format, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjectAsync
     *
     * Get worksheet list object info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $listobjectindex list object index. (required)
     * @param  string $format export format. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsGetWorksheetListObjectAsync($name, $sheet_name, $listobjectindex, $format = null, $folder = null, $storage_name = null)
    {
        return $this->cellsListObjectsGetWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $listobjectindex, $format, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjectAsyncWithHttpInfo
     *
     * Get worksheet list object info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $listobjectindex list object index. (required)
     * @param  string $format export format. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsGetWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $listobjectindex, $format = null, $folder = null, $storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsListObjectsGetWorksheetListObjectRequest($name, $sheet_name, $listobjectindex, $format, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsGetWorksheetListObject'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $listobjectindex list object index. (required)
     * @param  string $format export format. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsListObjectsGetWorksheetListObjectRequest($name, $sheet_name, $listobjectindex, $format = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsGetWorksheetListObject'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsGetWorksheetListObject'
            );
        }
        // verify the required parameter 'listobjectindex' is set
        if ($listobjectindex === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listobjectindex when calling cellsListObjectsGetWorksheetListObject'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listobjectindex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($listobjectindex !== null) {
            $resourcePath = str_replace(
                '{' . 'listobjectindex' . '}',
                ObjectSerializer::toPathValue($listobjectindex),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsListObjectsGetWorksheetListObject'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjects
     *
     * Get worksheet listobjects info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ListObjectsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsGetWorksheetListObjects($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsListObjectsGetWorksheetListObjectsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjectsWithHttpInfo
     *
     * Get worksheet listobjects info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ListObjectsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsGetWorksheetListObjectsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ListObjectsResponse';
        $request = $this->cellsListObjectsGetWorksheetListObjectsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ListObjectsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjectsAsync
     *
     * Get worksheet listobjects info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsGetWorksheetListObjectsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsListObjectsGetWorksheetListObjectsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjectsAsyncWithHttpInfo
     *
     * Get worksheet listobjects info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsGetWorksheetListObjectsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ListObjectsResponse';
        $request = $this->cellsListObjectsGetWorksheetListObjectsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsGetWorksheetListObjects'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsListObjectsGetWorksheetListObjectsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsGetWorksheetListObjects'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsGetWorksheetListObjects'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsListObjectsGetWorksheetListObjects'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListColumn
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $list_object_index list_object_index (required)
     * @param  int $column_index column_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListColumn $list_column list_column (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListColumn($name, $sheet_name, $list_object_index, $column_index, $list_column = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsListObjectsPostWorksheetListColumnWithHttpInfo($name, $sheet_name, $list_object_index, $column_index, $list_column, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsListObjectsPostWorksheetListColumnWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  int $column_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListColumn $list_column (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListColumnWithHttpInfo($name, $sheet_name, $list_object_index, $column_index, $list_column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPostWorksheetListColumnRequest($name, $sheet_name, $list_object_index, $column_index, $list_column, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsPostWorksheetListColumnAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  int $column_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListColumn $list_column (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListColumnAsync($name, $sheet_name, $list_object_index, $column_index, $list_column = null, $folder = null, $storage_name = null)
    {
        return $this->cellsListObjectsPostWorksheetListColumnAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $column_index, $list_column, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListColumnAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  int $column_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListColumn $list_column (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListColumnAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $column_index, $list_column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPostWorksheetListColumnRequest($name, $sheet_name, $list_object_index, $column_index, $list_column, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsPostWorksheetListColumn'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  int $column_index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListColumn $list_column (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsListObjectsPostWorksheetListColumnRequest($name, $sheet_name, $list_object_index, $column_index, $list_column = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsPostWorksheetListColumn'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsPostWorksheetListColumn'
            );
        }
        // verify the required parameter 'list_object_index' is set
        if ($list_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_object_index when calling cellsListObjectsPostWorksheetListColumn'
            );
        }
        // verify the required parameter 'column_index' is set
        if ($column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_index when calling cellsListObjectsPostWorksheetListColumn'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/listcolumns/{columnIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($list_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'listObjectIndex' . '}',
                ObjectSerializer::toPathValue($list_object_index),
                $resourcePath
            );
        }
        // path params
        if ($column_index !== null) {
            $resourcePath = str_replace(
                '{' . 'columnIndex' . '}',
                ObjectSerializer::toPathValue($column_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($list_column)) {
            $_tempBody = $list_column;
            $_tempBodyName =str_replace('_','', 'list_column');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsListObjectsPostWorksheetListColumn'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListColumnsTotal
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $list_object_index list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\TableTotalRequest[] $table_total_requests table_total_requests (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListColumnsTotal($name, $sheet_name, $list_object_index, $table_total_requests = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsListObjectsPostWorksheetListColumnsTotalWithHttpInfo($name, $sheet_name, $list_object_index, $table_total_requests, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsListObjectsPostWorksheetListColumnsTotalWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\TableTotalRequest[] $table_total_requests (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListColumnsTotalWithHttpInfo($name, $sheet_name, $list_object_index, $table_total_requests = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPostWorksheetListColumnsTotalRequest($name, $sheet_name, $list_object_index, $table_total_requests, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsPostWorksheetListColumnsTotalAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\TableTotalRequest[] $table_total_requests (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListColumnsTotalAsync($name, $sheet_name, $list_object_index, $table_total_requests = null, $folder = null, $storage_name = null)
    {
        return $this->cellsListObjectsPostWorksheetListColumnsTotalAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $table_total_requests, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListColumnsTotalAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\TableTotalRequest[] $table_total_requests (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListColumnsTotalAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $table_total_requests = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPostWorksheetListColumnsTotalRequest($name, $sheet_name, $list_object_index, $table_total_requests, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsPostWorksheetListColumnsTotal'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\TableTotalRequest[] $table_total_requests (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsListObjectsPostWorksheetListColumnsTotalRequest($name, $sheet_name, $list_object_index, $table_total_requests = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsPostWorksheetListColumnsTotal'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsPostWorksheetListColumnsTotal'
            );
        }
        // verify the required parameter 'list_object_index' is set
        if ($list_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_object_index when calling cellsListObjectsPostWorksheetListColumnsTotal'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/listcolumns/total';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($list_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'listObjectIndex' . '}',
                ObjectSerializer::toPathValue($list_object_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($table_total_requests)) {
            $_tempBody = $table_total_requests;
            $_tempBodyName =str_replace('_','', 'table_total_requests');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsListObjectsPostWorksheetListColumnsTotal'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObject
     *
     * Update  list object
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index list Object index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object listObject dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObject($name, $sheet_name, $list_object_index, $list_object = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsListObjectsPostWorksheetListObjectWithHttpInfo($name, $sheet_name, $list_object_index, $list_object, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectWithHttpInfo
     *
     * Update  list object
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index list Object index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object listObject dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectWithHttpInfo($name, $sheet_name, $list_object_index, $list_object = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectRequest($name, $sheet_name, $list_object_index, $list_object, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectAsync
     *
     * Update  list object
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index list Object index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object listObject dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectAsync($name, $sheet_name, $list_object_index, $list_object = null, $folder = null, $storage_name = null)
    {
        return $this->cellsListObjectsPostWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $list_object, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectAsyncWithHttpInfo
     *
     * Update  list object
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index list Object index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object listObject dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $list_object = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectRequest($name, $sheet_name, $list_object_index, $list_object, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsPostWorksheetListObject'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index list Object index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object listObject dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsListObjectsPostWorksheetListObjectRequest($name, $sheet_name, $list_object_index, $list_object = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsPostWorksheetListObject'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsPostWorksheetListObject'
            );
        }
        // verify the required parameter 'list_object_index' is set
        if ($list_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_object_index when calling cellsListObjectsPostWorksheetListObject'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($list_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'listObjectIndex' . '}',
                ObjectSerializer::toPathValue($list_object_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($list_object)) {
            $_tempBody = $list_object;
            $_tempBodyName =str_replace('_','', 'list_object');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsListObjectsPostWorksheetListObject'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectConvertToRange
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $list_object_index list_object_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectConvertToRange($name, $sheet_name, $list_object_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsListObjectsPostWorksheetListObjectConvertToRangeWithHttpInfo($name, $sheet_name, $list_object_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectConvertToRangeWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectConvertToRangeWithHttpInfo($name, $sheet_name, $list_object_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectConvertToRangeRequest($name, $sheet_name, $list_object_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectConvertToRangeAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectConvertToRangeAsync($name, $sheet_name, $list_object_index, $folder = null, $storage_name = null)
    {
        return $this->cellsListObjectsPostWorksheetListObjectConvertToRangeAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectConvertToRangeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectConvertToRangeAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectConvertToRangeRequest($name, $sheet_name, $list_object_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsPostWorksheetListObjectConvertToRange'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsListObjectsPostWorksheetListObjectConvertToRangeRequest($name, $sheet_name, $list_object_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsPostWorksheetListObjectConvertToRange'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsPostWorksheetListObjectConvertToRange'
            );
        }
        // verify the required parameter 'list_object_index' is set
        if ($list_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_object_index when calling cellsListObjectsPostWorksheetListObjectConvertToRange'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/ConvertToRange';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($list_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'listObjectIndex' . '}',
                ObjectSerializer::toPathValue($list_object_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsListObjectsPostWorksheetListObjectConvertToRange'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSortTable
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $list_object_index list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter data_sorter (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectSortTable($name, $sheet_name, $list_object_index, $data_sorter = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsListObjectsPostWorksheetListObjectSortTableWithHttpInfo($name, $sheet_name, $list_object_index, $data_sorter, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSortTableWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectSortTableWithHttpInfo($name, $sheet_name, $list_object_index, $data_sorter = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectSortTableRequest($name, $sheet_name, $list_object_index, $data_sorter, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSortTableAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectSortTableAsync($name, $sheet_name, $list_object_index, $data_sorter = null, $folder = null, $storage_name = null)
    {
        return $this->cellsListObjectsPostWorksheetListObjectSortTableAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $data_sorter, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSortTableAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectSortTableAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $data_sorter = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectSortTableRequest($name, $sheet_name, $list_object_index, $data_sorter, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsPostWorksheetListObjectSortTable'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsListObjectsPostWorksheetListObjectSortTableRequest($name, $sheet_name, $list_object_index, $data_sorter = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsPostWorksheetListObjectSortTable'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsPostWorksheetListObjectSortTable'
            );
        }
        // verify the required parameter 'list_object_index' is set
        if ($list_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_object_index when calling cellsListObjectsPostWorksheetListObjectSortTable'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/sort';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($list_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'listObjectIndex' . '}',
                ObjectSerializer::toPathValue($list_object_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($data_sorter)) {
            $_tempBody = $data_sorter;
            $_tempBodyName =str_replace('_','', 'data_sorter');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsListObjectsPostWorksheetListObjectSortTable'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $list_object_index list_object_index (required)
     * @param  string $destsheet_name destsheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request request (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable($name, $sheet_name, $list_object_index, $destsheet_name, $request = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableWithHttpInfo($name, $sheet_name, $list_object_index, $destsheet_name, $request, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $destsheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableWithHttpInfo($name, $sheet_name, $list_object_index, $destsheet_name, $request = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableRequest($name, $sheet_name, $list_object_index, $destsheet_name, $request, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $destsheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsync($name, $sheet_name, $list_object_index, $destsheet_name, $request = null, $folder = null, $storage_name = null)
    {
        return $this->cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $destsheet_name, $request, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $destsheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $destsheet_name, $request = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableRequest($name, $sheet_name, $list_object_index, $destsheet_name, $request, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $destsheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableRequest($name, $sheet_name, $list_object_index, $destsheet_name, $request = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable'
            );
        }
        // verify the required parameter 'list_object_index' is set
        if ($list_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_object_index when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable'
            );
        }
        // verify the required parameter 'destsheet_name' is set
        if ($destsheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destsheet_name when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/SummarizeWithPivotTable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($destsheet_name !== null) {
            $queryParams['destsheetName'] = ObjectSerializer::toQueryValue($destsheet_name);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($list_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'listObjectIndex' . '}',
                ObjectSerializer::toPathValue($list_object_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($request)) {
            $_tempBody = $request;
            $_tempBodyName =str_replace('_','', 'request');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsPutWorksheetListObject
     *
     * Add a list object into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row of the list range. (required)
     * @param  int $start_column The start row of the list range. (required)
     * @param  int $end_row The start row of the list range. (required)
     * @param  int $end_column The start row of the list range. (required)
     * @param  bool $has_headers Whether the range has headers. (optional, default to true)
     * @param  bool $display_name Gets and sets the display name.. (optional, default to true)
     * @param  bool $show_totals Gets and sets whether this ListObject show total row.. (optional, default to true)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object List Object (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPutWorksheetListObject($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $has_headers = 'true', $display_name = 'true', $show_totals = 'true', $list_object = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsListObjectsPutWorksheetListObjectWithHttpInfo($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $has_headers, $display_name, $show_totals, $list_object, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsListObjectsPutWorksheetListObjectWithHttpInfo
     *
     * Add a list object into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row of the list range. (required)
     * @param  int $start_column The start row of the list range. (required)
     * @param  int $end_row The start row of the list range. (required)
     * @param  int $end_column The start row of the list range. (required)
     * @param  bool $has_headers Whether the range has headers. (optional, default to true)
     * @param  bool $display_name Gets and sets the display name.. (optional, default to true)
     * @param  bool $show_totals Gets and sets whether this ListObject show total row.. (optional, default to true)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object List Object (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPutWorksheetListObjectWithHttpInfo($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $has_headers = 'true', $display_name = 'true', $show_totals = 'true', $list_object = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPutWorksheetListObjectRequest($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $has_headers, $display_name, $show_totals, $list_object, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsPutWorksheetListObjectAsync
     *
     * Add a list object into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row of the list range. (required)
     * @param  int $start_column The start row of the list range. (required)
     * @param  int $end_row The start row of the list range. (required)
     * @param  int $end_column The start row of the list range. (required)
     * @param  bool $has_headers Whether the range has headers. (optional, default to true)
     * @param  bool $display_name Gets and sets the display name.. (optional, default to true)
     * @param  bool $show_totals Gets and sets whether this ListObject show total row.. (optional, default to true)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object List Object (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPutWorksheetListObjectAsync($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $has_headers = 'true', $display_name = 'true', $show_totals = 'true', $list_object = null, $folder = null, $storage_name = null)
    {
        return $this->cellsListObjectsPutWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $has_headers, $display_name, $show_totals, $list_object, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsPutWorksheetListObjectAsyncWithHttpInfo
     *
     * Add a list object into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row of the list range. (required)
     * @param  int $start_column The start row of the list range. (required)
     * @param  int $end_row The start row of the list range. (required)
     * @param  int $end_column The start row of the list range. (required)
     * @param  bool $has_headers Whether the range has headers. (optional, default to true)
     * @param  bool $display_name Gets and sets the display name.. (optional, default to true)
     * @param  bool $show_totals Gets and sets whether this ListObject show total row.. (optional, default to true)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object List Object (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsListObjectsPutWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $has_headers = 'true', $display_name = 'true', $show_totals = 'true', $list_object = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsListObjectsPutWorksheetListObjectRequest($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $has_headers, $display_name, $show_totals, $list_object, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsPutWorksheetListObject'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row of the list range. (required)
     * @param  int $start_column The start row of the list range. (required)
     * @param  int $end_row The start row of the list range. (required)
     * @param  int $end_column The start row of the list range. (required)
     * @param  bool $has_headers Whether the range has headers. (optional, default to true)
     * @param  bool $display_name Gets and sets the display name.. (optional, default to true)
     * @param  bool $show_totals Gets and sets whether this ListObject show total row.. (optional, default to true)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object List Object (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsListObjectsPutWorksheetListObjectRequest($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $has_headers = 'true', $display_name = 'true', $show_totals = 'true', $list_object = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsPutWorksheetListObject'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsPutWorksheetListObject'
            );
        }
        // verify the required parameter 'start_row' is set
        if ($start_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_row when calling cellsListObjectsPutWorksheetListObject'
            );
        }
        // verify the required parameter 'start_column' is set
        if ($start_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_column when calling cellsListObjectsPutWorksheetListObject'
            );
        }
        // verify the required parameter 'end_row' is set
        if ($end_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_row when calling cellsListObjectsPutWorksheetListObject'
            );
        }
        // verify the required parameter 'end_column' is set
        if ($end_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_column when calling cellsListObjectsPutWorksheetListObject'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($end_row !== null) {
            $queryParams['endRow'] = ObjectSerializer::toQueryValue($end_row);
        }
        // query params
        if ($end_column !== null) {
            $queryParams['endColumn'] = ObjectSerializer::toQueryValue($end_column);
        }
        // query params
        if ($has_headers !== null) {
            $queryParams['hasHeaders'] = ObjectSerializer::toQueryValue($has_headers);
        }
        // query params
        if ($display_name !== null) {
            $queryParams['displayName'] = ObjectSerializer::toQueryValue($display_name);
        }
        // query params
        if ($show_totals !== null) {
            $queryParams['showTotals'] = ObjectSerializer::toQueryValue($show_totals);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($list_object)) {
            $_tempBody = $list_object;
            $_tempBodyName =str_replace('_','', 'list_object');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsListObjectsPutWorksheetListObject'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsOleObjectsDeleteWorksheetOleObject
     *
     * Delete OLE object.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $ole_object_index Ole object index (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsDeleteWorksheetOleObject($name, $sheet_name, $ole_object_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsOleObjectsDeleteWorksheetOleObjectWithHttpInfo($name, $sheet_name, $ole_object_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsOleObjectsDeleteWorksheetOleObjectWithHttpInfo
     *
     * Delete OLE object.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $ole_object_index Ole object index (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsDeleteWorksheetOleObjectWithHttpInfo($name, $sheet_name, $ole_object_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsOleObjectsDeleteWorksheetOleObjectRequest($name, $sheet_name, $ole_object_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsOleObjectsDeleteWorksheetOleObjectAsync
     *
     * Delete OLE object.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $ole_object_index Ole object index (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsDeleteWorksheetOleObjectAsync($name, $sheet_name, $ole_object_index, $folder = null, $storage_name = null)
    {
        return $this->cellsOleObjectsDeleteWorksheetOleObjectAsyncWithHttpInfo($name, $sheet_name, $ole_object_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsOleObjectsDeleteWorksheetOleObjectAsyncWithHttpInfo
     *
     * Delete OLE object.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $ole_object_index Ole object index (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsDeleteWorksheetOleObjectAsyncWithHttpInfo($name, $sheet_name, $ole_object_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsOleObjectsDeleteWorksheetOleObjectRequest($name, $sheet_name, $ole_object_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsOleObjectsDeleteWorksheetOleObject'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $ole_object_index Ole object index (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsOleObjectsDeleteWorksheetOleObjectRequest($name, $sheet_name, $ole_object_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsOleObjectsDeleteWorksheetOleObject'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsOleObjectsDeleteWorksheetOleObject'
            );
        }
        // verify the required parameter 'ole_object_index' is set
        if ($ole_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ole_object_index when calling cellsOleObjectsDeleteWorksheetOleObject'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($ole_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'oleObjectIndex' . '}',
                ObjectSerializer::toPathValue($ole_object_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsOleObjectsDeleteWorksheetOleObject'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsOleObjectsDeleteWorksheetOleObjects
     *
     * Delete all OLE objects.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsDeleteWorksheetOleObjects($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsOleObjectsDeleteWorksheetOleObjectsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsOleObjectsDeleteWorksheetOleObjectsWithHttpInfo
     *
     * Delete all OLE objects.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsDeleteWorksheetOleObjectsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsOleObjectsDeleteWorksheetOleObjectsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsOleObjectsDeleteWorksheetOleObjectsAsync
     *
     * Delete all OLE objects.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsDeleteWorksheetOleObjectsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsOleObjectsDeleteWorksheetOleObjectsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsOleObjectsDeleteWorksheetOleObjectsAsyncWithHttpInfo
     *
     * Delete all OLE objects.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsDeleteWorksheetOleObjectsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsOleObjectsDeleteWorksheetOleObjectsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsOleObjectsDeleteWorksheetOleObjects'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsOleObjectsDeleteWorksheetOleObjectsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsOleObjectsDeleteWorksheetOleObjects'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsOleObjectsDeleteWorksheetOleObjects'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/oleobjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsOleObjectsDeleteWorksheetOleObjects'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsOleObjectsGetWorksheetOleObject
     *
     * Get OLE object info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $object_number The object number. (required)
     * @param  string $format The exported object format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsGetWorksheetOleObject($name, $sheet_name, $object_number, $format = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsOleObjectsGetWorksheetOleObjectWithHttpInfo($name, $sheet_name, $object_number, $format, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsOleObjectsGetWorksheetOleObjectWithHttpInfo
     *
     * Get OLE object info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $object_number The object number. (required)
     * @param  string $format The exported object format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsGetWorksheetOleObjectWithHttpInfo($name, $sheet_name, $object_number, $format = null, $folder = null, $storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsOleObjectsGetWorksheetOleObjectRequest($name, $sheet_name, $object_number, $format, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsOleObjectsGetWorksheetOleObjectAsync
     *
     * Get OLE object info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $object_number The object number. (required)
     * @param  string $format The exported object format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsGetWorksheetOleObjectAsync($name, $sheet_name, $object_number, $format = null, $folder = null, $storage_name = null)
    {
        return $this->cellsOleObjectsGetWorksheetOleObjectAsyncWithHttpInfo($name, $sheet_name, $object_number, $format, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsOleObjectsGetWorksheetOleObjectAsyncWithHttpInfo
     *
     * Get OLE object info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $object_number The object number. (required)
     * @param  string $format The exported object format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsGetWorksheetOleObjectAsyncWithHttpInfo($name, $sheet_name, $object_number, $format = null, $folder = null, $storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsOleObjectsGetWorksheetOleObjectRequest($name, $sheet_name, $object_number, $format, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsOleObjectsGetWorksheetOleObject'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $object_number The object number. (required)
     * @param  string $format The exported object format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsOleObjectsGetWorksheetOleObjectRequest($name, $sheet_name, $object_number, $format = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsOleObjectsGetWorksheetOleObject'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsOleObjectsGetWorksheetOleObject'
            );
        }
        // verify the required parameter 'object_number' is set
        if ($object_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $object_number when calling cellsOleObjectsGetWorksheetOleObject'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/oleobjects/{objectNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($object_number !== null) {
            $resourcePath = str_replace(
                '{' . 'objectNumber' . '}',
                ObjectSerializer::toPathValue($object_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsOleObjectsGetWorksheetOleObject'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsOleObjectsGetWorksheetOleObjects
     *
     * Get worksheet OLE objects info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\OleObjectsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsGetWorksheetOleObjects($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsOleObjectsGetWorksheetOleObjectsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsOleObjectsGetWorksheetOleObjectsWithHttpInfo
     *
     * Get worksheet OLE objects info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\OleObjectsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsGetWorksheetOleObjectsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\OleObjectsResponse';
        $request = $this->cellsOleObjectsGetWorksheetOleObjectsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\OleObjectsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsOleObjectsGetWorksheetOleObjectsAsync
     *
     * Get worksheet OLE objects info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsGetWorksheetOleObjectsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsOleObjectsGetWorksheetOleObjectsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsOleObjectsGetWorksheetOleObjectsAsyncWithHttpInfo
     *
     * Get worksheet OLE objects info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsGetWorksheetOleObjectsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\OleObjectsResponse';
        $request = $this->cellsOleObjectsGetWorksheetOleObjectsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsOleObjectsGetWorksheetOleObjects'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsOleObjectsGetWorksheetOleObjectsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsOleObjectsGetWorksheetOleObjects'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsOleObjectsGetWorksheetOleObjects'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/oleobjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsOleObjectsGetWorksheetOleObjects'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsOleObjectsPostUpdateWorksheetOleObject
     *
     * Update OLE object.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $ole_object_index Ole object index (required)
     * @param  \Aspose\Cells\Cloud\Model\OleObject $ole Ole Object (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsPostUpdateWorksheetOleObject($name, $sheet_name, $ole_object_index, $ole = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsOleObjectsPostUpdateWorksheetOleObjectWithHttpInfo($name, $sheet_name, $ole_object_index, $ole, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsOleObjectsPostUpdateWorksheetOleObjectWithHttpInfo
     *
     * Update OLE object.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $ole_object_index Ole object index (required)
     * @param  \Aspose\Cells\Cloud\Model\OleObject $ole Ole Object (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsPostUpdateWorksheetOleObjectWithHttpInfo($name, $sheet_name, $ole_object_index, $ole = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsOleObjectsPostUpdateWorksheetOleObjectRequest($name, $sheet_name, $ole_object_index, $ole, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsOleObjectsPostUpdateWorksheetOleObjectAsync
     *
     * Update OLE object.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $ole_object_index Ole object index (required)
     * @param  \Aspose\Cells\Cloud\Model\OleObject $ole Ole Object (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsPostUpdateWorksheetOleObjectAsync($name, $sheet_name, $ole_object_index, $ole = null, $folder = null, $storage_name = null)
    {
        return $this->cellsOleObjectsPostUpdateWorksheetOleObjectAsyncWithHttpInfo($name, $sheet_name, $ole_object_index, $ole, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsOleObjectsPostUpdateWorksheetOleObjectAsyncWithHttpInfo
     *
     * Update OLE object.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $ole_object_index Ole object index (required)
     * @param  \Aspose\Cells\Cloud\Model\OleObject $ole Ole Object (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsPostUpdateWorksheetOleObjectAsyncWithHttpInfo($name, $sheet_name, $ole_object_index, $ole = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsOleObjectsPostUpdateWorksheetOleObjectRequest($name, $sheet_name, $ole_object_index, $ole, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsOleObjectsPostUpdateWorksheetOleObject'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $ole_object_index Ole object index (required)
     * @param  \Aspose\Cells\Cloud\Model\OleObject $ole Ole Object (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsOleObjectsPostUpdateWorksheetOleObjectRequest($name, $sheet_name, $ole_object_index, $ole = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsOleObjectsPostUpdateWorksheetOleObject'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsOleObjectsPostUpdateWorksheetOleObject'
            );
        }
        // verify the required parameter 'ole_object_index' is set
        if ($ole_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ole_object_index when calling cellsOleObjectsPostUpdateWorksheetOleObject'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($ole_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'oleObjectIndex' . '}',
                ObjectSerializer::toPathValue($ole_object_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($ole)) {
            $_tempBody = $ole;
            $_tempBodyName =str_replace('_','', 'ole');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsOleObjectsPostUpdateWorksheetOleObject'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsOleObjectsPutWorksheetOleObject
     *
     * Add OLE object
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\OleObject $ole_object Ole Object (optional)
     * @param  int $upper_left_row Upper left row index (optional, default to 0)
     * @param  int $upper_left_column Upper left column index (optional, default to 0)
     * @param  int $height Height of oleObject, in unit of pixel (optional, default to 0)
     * @param  int $width Width of oleObject, in unit of pixel (optional, default to 0)
     * @param  string $ole_file OLE filename (optional)
     * @param  string $image_file Image filename (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsPutWorksheetOleObject($name, $sheet_name, $ole_object = null, $upper_left_row = '0', $upper_left_column = '0', $height = '0', $width = '0', $ole_file = null, $image_file = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsOleObjectsPutWorksheetOleObjectWithHttpInfo($name, $sheet_name, $ole_object, $upper_left_row, $upper_left_column, $height, $width, $ole_file, $image_file, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsOleObjectsPutWorksheetOleObjectWithHttpInfo
     *
     * Add OLE object
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\OleObject $ole_object Ole Object (optional)
     * @param  int $upper_left_row Upper left row index (optional, default to 0)
     * @param  int $upper_left_column Upper left column index (optional, default to 0)
     * @param  int $height Height of oleObject, in unit of pixel (optional, default to 0)
     * @param  int $width Width of oleObject, in unit of pixel (optional, default to 0)
     * @param  string $ole_file OLE filename (optional)
     * @param  string $image_file Image filename (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsPutWorksheetOleObjectWithHttpInfo($name, $sheet_name, $ole_object = null, $upper_left_row = '0', $upper_left_column = '0', $height = '0', $width = '0', $ole_file = null, $image_file = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsOleObjectsPutWorksheetOleObjectRequest($name, $sheet_name, $ole_object, $upper_left_row, $upper_left_column, $height, $width, $ole_file, $image_file, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsOleObjectsPutWorksheetOleObjectAsync
     *
     * Add OLE object
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\OleObject $ole_object Ole Object (optional)
     * @param  int $upper_left_row Upper left row index (optional, default to 0)
     * @param  int $upper_left_column Upper left column index (optional, default to 0)
     * @param  int $height Height of oleObject, in unit of pixel (optional, default to 0)
     * @param  int $width Width of oleObject, in unit of pixel (optional, default to 0)
     * @param  string $ole_file OLE filename (optional)
     * @param  string $image_file Image filename (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsPutWorksheetOleObjectAsync($name, $sheet_name, $ole_object = null, $upper_left_row = '0', $upper_left_column = '0', $height = '0', $width = '0', $ole_file = null, $image_file = null, $folder = null, $storage_name = null)
    {
        return $this->cellsOleObjectsPutWorksheetOleObjectAsyncWithHttpInfo($name, $sheet_name, $ole_object, $upper_left_row, $upper_left_column, $height, $width, $ole_file, $image_file, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsOleObjectsPutWorksheetOleObjectAsyncWithHttpInfo
     *
     * Add OLE object
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\OleObject $ole_object Ole Object (optional)
     * @param  int $upper_left_row Upper left row index (optional, default to 0)
     * @param  int $upper_left_column Upper left column index (optional, default to 0)
     * @param  int $height Height of oleObject, in unit of pixel (optional, default to 0)
     * @param  int $width Width of oleObject, in unit of pixel (optional, default to 0)
     * @param  string $ole_file OLE filename (optional)
     * @param  string $image_file Image filename (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsOleObjectsPutWorksheetOleObjectAsyncWithHttpInfo($name, $sheet_name, $ole_object = null, $upper_left_row = '0', $upper_left_column = '0', $height = '0', $width = '0', $ole_file = null, $image_file = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsOleObjectsPutWorksheetOleObjectRequest($name, $sheet_name, $ole_object, $upper_left_row, $upper_left_column, $height, $width, $ole_file, $image_file, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsOleObjectsPutWorksheetOleObject'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\OleObject $ole_object Ole Object (optional)
     * @param  int $upper_left_row Upper left row index (optional, default to 0)
     * @param  int $upper_left_column Upper left column index (optional, default to 0)
     * @param  int $height Height of oleObject, in unit of pixel (optional, default to 0)
     * @param  int $width Width of oleObject, in unit of pixel (optional, default to 0)
     * @param  string $ole_file OLE filename (optional)
     * @param  string $image_file Image filename (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsOleObjectsPutWorksheetOleObjectRequest($name, $sheet_name, $ole_object = null, $upper_left_row = '0', $upper_left_column = '0', $height = '0', $width = '0', $ole_file = null, $image_file = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsOleObjectsPutWorksheetOleObject'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsOleObjectsPutWorksheetOleObject'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/oleobjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($upper_left_row !== null) {
            $queryParams['upperLeftRow'] = ObjectSerializer::toQueryValue($upper_left_row);
        }
        // query params
        if ($upper_left_column !== null) {
            $queryParams['upperLeftColumn'] = ObjectSerializer::toQueryValue($upper_left_column);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($ole_file !== null) {
            $queryParams['oleFile'] = ObjectSerializer::toQueryValue($ole_file);
        }
        // query params
        if ($image_file !== null) {
            $queryParams['imageFile'] = ObjectSerializer::toQueryValue($image_file);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($ole_object)) {
            $_tempBody = $ole_object;
            $_tempBodyName =str_replace('_','', 'ole_object');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsOleObjectsPutWorksheetOleObject'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreak
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteHorizontalPageBreak($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageBreaksDeleteHorizontalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreakWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteHorizontalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageBreaksDeleteHorizontalPageBreakRequest($name, $sheet_name, $index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreakAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteHorizontalPageBreakAsync($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        return $this->cellsPageBreaksDeleteHorizontalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteHorizontalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageBreaksDeleteHorizontalPageBreakRequest($name, $sheet_name, $index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksDeleteHorizontalPageBreak'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageBreaksDeleteHorizontalPageBreakRequest($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksDeleteHorizontalPageBreak'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksDeleteHorizontalPageBreak'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsPageBreaksDeleteHorizontalPageBreak'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageBreaksDeleteHorizontalPageBreak'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreaks
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $row row (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteHorizontalPageBreaks($name, $sheet_name, $row = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageBreaksDeleteHorizontalPageBreaksWithHttpInfo($name, $sheet_name, $row, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreaksWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteHorizontalPageBreaksWithHttpInfo($name, $sheet_name, $row = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageBreaksDeleteHorizontalPageBreaksRequest($name, $sheet_name, $row, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreaksAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteHorizontalPageBreaksAsync($name, $sheet_name, $row = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPageBreaksDeleteHorizontalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $row, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreaksAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteHorizontalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $row = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageBreaksDeleteHorizontalPageBreaksRequest($name, $sheet_name, $row, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksDeleteHorizontalPageBreaks'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageBreaksDeleteHorizontalPageBreaksRequest($name, $sheet_name, $row = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksDeleteHorizontalPageBreaks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksDeleteHorizontalPageBreaks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageBreaksDeleteHorizontalPageBreaks'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreak
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteVerticalPageBreak($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageBreaksDeleteVerticalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreakWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteVerticalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageBreaksDeleteVerticalPageBreakRequest($name, $sheet_name, $index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreakAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteVerticalPageBreakAsync($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        return $this->cellsPageBreaksDeleteVerticalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteVerticalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageBreaksDeleteVerticalPageBreakRequest($name, $sheet_name, $index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksDeleteVerticalPageBreak'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageBreaksDeleteVerticalPageBreakRequest($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksDeleteVerticalPageBreak'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksDeleteVerticalPageBreak'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsPageBreaksDeleteVerticalPageBreak'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageBreaksDeleteVerticalPageBreak'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreaks
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $column column (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteVerticalPageBreaks($name, $sheet_name, $column = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageBreaksDeleteVerticalPageBreaksWithHttpInfo($name, $sheet_name, $column, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreaksWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $column (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteVerticalPageBreaksWithHttpInfo($name, $sheet_name, $column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageBreaksDeleteVerticalPageBreaksRequest($name, $sheet_name, $column, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreaksAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $column (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteVerticalPageBreaksAsync($name, $sheet_name, $column = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPageBreaksDeleteVerticalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $column, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreaksAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $column (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksDeleteVerticalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageBreaksDeleteVerticalPageBreaksRequest($name, $sheet_name, $column, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksDeleteVerticalPageBreaks'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $column (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageBreaksDeleteVerticalPageBreaksRequest($name, $sheet_name, $column = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksDeleteVerticalPageBreaks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksDeleteVerticalPageBreaks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/verticalpagebreaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageBreaksDeleteVerticalPageBreaks'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreak
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\HorizontalPageBreakResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetHorizontalPageBreak($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageBreaksGetHorizontalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreakWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\HorizontalPageBreakResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetHorizontalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\HorizontalPageBreakResponse';
        $request = $this->cellsPageBreaksGetHorizontalPageBreakRequest($name, $sheet_name, $index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\HorizontalPageBreakResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreakAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetHorizontalPageBreakAsync($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        return $this->cellsPageBreaksGetHorizontalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetHorizontalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\HorizontalPageBreakResponse';
        $request = $this->cellsPageBreaksGetHorizontalPageBreakRequest($name, $sheet_name, $index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksGetHorizontalPageBreak'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageBreaksGetHorizontalPageBreakRequest($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksGetHorizontalPageBreak'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksGetHorizontalPageBreak'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsPageBreaksGetHorizontalPageBreak'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageBreaksGetHorizontalPageBreak'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreaks
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\HorizontalPageBreaksResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetHorizontalPageBreaks($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageBreaksGetHorizontalPageBreaksWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreaksWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\HorizontalPageBreaksResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetHorizontalPageBreaksWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\HorizontalPageBreaksResponse';
        $request = $this->cellsPageBreaksGetHorizontalPageBreaksRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\HorizontalPageBreaksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreaksAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetHorizontalPageBreaksAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsPageBreaksGetHorizontalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreaksAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetHorizontalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\HorizontalPageBreaksResponse';
        $request = $this->cellsPageBreaksGetHorizontalPageBreaksRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksGetHorizontalPageBreaks'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageBreaksGetHorizontalPageBreaksRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksGetHorizontalPageBreaks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksGetHorizontalPageBreaks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageBreaksGetHorizontalPageBreaks'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreak
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\VerticalPageBreakResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetVerticalPageBreak($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageBreaksGetVerticalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreakWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\VerticalPageBreakResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetVerticalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\VerticalPageBreakResponse';
        $request = $this->cellsPageBreaksGetVerticalPageBreakRequest($name, $sheet_name, $index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\VerticalPageBreakResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreakAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetVerticalPageBreakAsync($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        return $this->cellsPageBreaksGetVerticalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetVerticalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\VerticalPageBreakResponse';
        $request = $this->cellsPageBreaksGetVerticalPageBreakRequest($name, $sheet_name, $index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksGetVerticalPageBreak'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageBreaksGetVerticalPageBreakRequest($name, $sheet_name, $index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksGetVerticalPageBreak'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksGetVerticalPageBreak'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsPageBreaksGetVerticalPageBreak'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageBreaksGetVerticalPageBreak'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreaks
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\VerticalPageBreaksResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetVerticalPageBreaks($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageBreaksGetVerticalPageBreaksWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreaksWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\VerticalPageBreaksResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetVerticalPageBreaksWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\VerticalPageBreaksResponse';
        $request = $this->cellsPageBreaksGetVerticalPageBreaksRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\VerticalPageBreaksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreaksAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetVerticalPageBreaksAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsPageBreaksGetVerticalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreaksAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksGetVerticalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\VerticalPageBreaksResponse';
        $request = $this->cellsPageBreaksGetVerticalPageBreaksRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksGetVerticalPageBreaks'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageBreaksGetVerticalPageBreaksRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksGetVerticalPageBreaks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksGetVerticalPageBreaks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/verticalpagebreaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageBreaksGetVerticalPageBreaks'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksPutHorizontalPageBreak
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $cellname cellname (optional)
     * @param  int $row row (optional)
     * @param  int $column column (optional)
     * @param  int $start_column start_column (optional)
     * @param  int $end_column end_column (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksPutHorizontalPageBreak($name, $sheet_name, $cellname = null, $row = null, $column = null, $start_column = null, $end_column = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageBreaksPutHorizontalPageBreakWithHttpInfo($name, $sheet_name, $cellname, $row, $column, $start_column, $end_column, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageBreaksPutHorizontalPageBreakWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  int $start_column (optional)
     * @param  int $end_column (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksPutHorizontalPageBreakWithHttpInfo($name, $sheet_name, $cellname = null, $row = null, $column = null, $start_column = null, $end_column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageBreaksPutHorizontalPageBreakRequest($name, $sheet_name, $cellname, $row, $column, $start_column, $end_column, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksPutHorizontalPageBreakAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  int $start_column (optional)
     * @param  int $end_column (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksPutHorizontalPageBreakAsync($name, $sheet_name, $cellname = null, $row = null, $column = null, $start_column = null, $end_column = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPageBreaksPutHorizontalPageBreakAsyncWithHttpInfo($name, $sheet_name, $cellname, $row, $column, $start_column, $end_column, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksPutHorizontalPageBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  int $start_column (optional)
     * @param  int $end_column (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksPutHorizontalPageBreakAsyncWithHttpInfo($name, $sheet_name, $cellname = null, $row = null, $column = null, $start_column = null, $end_column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageBreaksPutHorizontalPageBreakRequest($name, $sheet_name, $cellname, $row, $column, $start_column, $end_column, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksPutHorizontalPageBreak'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  int $start_column (optional)
     * @param  int $end_column (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageBreaksPutHorizontalPageBreakRequest($name, $sheet_name, $cellname = null, $row = null, $column = null, $start_column = null, $end_column = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksPutHorizontalPageBreak'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksPutHorizontalPageBreak'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cellname !== null) {
            $queryParams['cellname'] = ObjectSerializer::toQueryValue($cellname);
        }
        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($end_column !== null) {
            $queryParams['endColumn'] = ObjectSerializer::toQueryValue($end_column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageBreaksPutHorizontalPageBreak'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksPutVerticalPageBreak
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $cellname cellname (optional)
     * @param  int $column column (optional)
     * @param  int $row row (optional)
     * @param  int $start_row start_row (optional)
     * @param  int $end_row end_row (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksPutVerticalPageBreak($name, $sheet_name, $cellname = null, $column = null, $row = null, $start_row = null, $end_row = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageBreaksPutVerticalPageBreakWithHttpInfo($name, $sheet_name, $cellname, $column, $row, $start_row, $end_row, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageBreaksPutVerticalPageBreakWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $column (optional)
     * @param  int $row (optional)
     * @param  int $start_row (optional)
     * @param  int $end_row (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksPutVerticalPageBreakWithHttpInfo($name, $sheet_name, $cellname = null, $column = null, $row = null, $start_row = null, $end_row = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageBreaksPutVerticalPageBreakRequest($name, $sheet_name, $cellname, $column, $row, $start_row, $end_row, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksPutVerticalPageBreakAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $column (optional)
     * @param  int $row (optional)
     * @param  int $start_row (optional)
     * @param  int $end_row (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksPutVerticalPageBreakAsync($name, $sheet_name, $cellname = null, $column = null, $row = null, $start_row = null, $end_row = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPageBreaksPutVerticalPageBreakAsyncWithHttpInfo($name, $sheet_name, $cellname, $column, $row, $start_row, $end_row, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksPutVerticalPageBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $column (optional)
     * @param  int $row (optional)
     * @param  int $start_row (optional)
     * @param  int $end_row (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageBreaksPutVerticalPageBreakAsyncWithHttpInfo($name, $sheet_name, $cellname = null, $column = null, $row = null, $start_row = null, $end_row = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageBreaksPutVerticalPageBreakRequest($name, $sheet_name, $cellname, $column, $row, $start_row, $end_row, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksPutVerticalPageBreak'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $column (optional)
     * @param  int $row (optional)
     * @param  int $start_row (optional)
     * @param  int $end_row (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageBreaksPutVerticalPageBreakRequest($name, $sheet_name, $cellname = null, $column = null, $row = null, $start_row = null, $end_row = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksPutVerticalPageBreak'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksPutVerticalPageBreak'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/verticalpagebreaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cellname !== null) {
            $queryParams['cellname'] = ObjectSerializer::toQueryValue($cellname);
        }
        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($end_row !== null) {
            $queryParams['endRow'] = ObjectSerializer::toQueryValue($end_row);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageBreaksPutVerticalPageBreak'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageSetupDeleteHeaderFooter
     *
     * clear header footer
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupDeleteHeaderFooter($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageSetupDeleteHeaderFooterWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageSetupDeleteHeaderFooterWithHttpInfo
     *
     * clear header footer
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupDeleteHeaderFooterWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageSetupDeleteHeaderFooterRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageSetupDeleteHeaderFooterAsync
     *
     * clear header footer
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupDeleteHeaderFooterAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsPageSetupDeleteHeaderFooterAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageSetupDeleteHeaderFooterAsyncWithHttpInfo
     *
     * clear header footer
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupDeleteHeaderFooterAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageSetupDeleteHeaderFooterRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageSetupDeleteHeaderFooter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageSetupDeleteHeaderFooterRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageSetupDeleteHeaderFooter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageSetupDeleteHeaderFooter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pagesetup/clearheaderfooter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageSetupDeleteHeaderFooter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageSetupGetFooter
     *
     * get page footer information
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PageSectionsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupGetFooter($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageSetupGetFooterWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageSetupGetFooterWithHttpInfo
     *
     * get page footer information
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PageSectionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupGetFooterWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PageSectionsResponse';
        $request = $this->cellsPageSetupGetFooterRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PageSectionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageSetupGetFooterAsync
     *
     * get page footer information
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupGetFooterAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsPageSetupGetFooterAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageSetupGetFooterAsyncWithHttpInfo
     *
     * get page footer information
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupGetFooterAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PageSectionsResponse';
        $request = $this->cellsPageSetupGetFooterRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageSetupGetFooter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageSetupGetFooterRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageSetupGetFooter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageSetupGetFooter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pagesetup/footer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageSetupGetFooter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageSetupGetHeader
     *
     * get page header information
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PageSectionsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupGetHeader($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageSetupGetHeaderWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageSetupGetHeaderWithHttpInfo
     *
     * get page header information
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PageSectionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupGetHeaderWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PageSectionsResponse';
        $request = $this->cellsPageSetupGetHeaderRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PageSectionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageSetupGetHeaderAsync
     *
     * get page header information
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupGetHeaderAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsPageSetupGetHeaderAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageSetupGetHeaderAsyncWithHttpInfo
     *
     * get page header information
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupGetHeaderAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PageSectionsResponse';
        $request = $this->cellsPageSetupGetHeaderRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageSetupGetHeader'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageSetupGetHeaderRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageSetupGetHeader'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageSetupGetHeader'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pagesetup/header';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageSetupGetHeader'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageSetupGetPageSetup
     *
     * Get Page Setup information.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PageSetupResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupGetPageSetup($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageSetupGetPageSetupWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageSetupGetPageSetupWithHttpInfo
     *
     * Get Page Setup information.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PageSetupResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupGetPageSetupWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PageSetupResponse';
        $request = $this->cellsPageSetupGetPageSetupRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PageSetupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageSetupGetPageSetupAsync
     *
     * Get Page Setup information.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupGetPageSetupAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsPageSetupGetPageSetupAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageSetupGetPageSetupAsyncWithHttpInfo
     *
     * Get Page Setup information.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupGetPageSetupAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PageSetupResponse';
        $request = $this->cellsPageSetupGetPageSetupRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageSetupGetPageSetup'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageSetupGetPageSetupRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageSetupGetPageSetup'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageSetupGetPageSetup'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pagesetup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageSetupGetPageSetup'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageSetupPostFooter
     *
     * update  page footer information
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $section section (required)
     * @param  string $script script (required)
     * @param  bool $is_first_page is_first_page (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupPostFooter($name, $sheet_name, $section, $script, $is_first_page, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageSetupPostFooterWithHttpInfo($name, $sheet_name, $section, $script, $is_first_page, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageSetupPostFooterWithHttpInfo
     *
     * update  page footer information
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $section (required)
     * @param  string $script (required)
     * @param  bool $is_first_page (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupPostFooterWithHttpInfo($name, $sheet_name, $section, $script, $is_first_page, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageSetupPostFooterRequest($name, $sheet_name, $section, $script, $is_first_page, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageSetupPostFooterAsync
     *
     * update  page footer information
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $section (required)
     * @param  string $script (required)
     * @param  bool $is_first_page (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupPostFooterAsync($name, $sheet_name, $section, $script, $is_first_page, $folder = null, $storage_name = null)
    {
        return $this->cellsPageSetupPostFooterAsyncWithHttpInfo($name, $sheet_name, $section, $script, $is_first_page, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageSetupPostFooterAsyncWithHttpInfo
     *
     * update  page footer information
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $section (required)
     * @param  string $script (required)
     * @param  bool $is_first_page (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupPostFooterAsyncWithHttpInfo($name, $sheet_name, $section, $script, $is_first_page, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageSetupPostFooterRequest($name, $sheet_name, $section, $script, $is_first_page, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageSetupPostFooter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $section (required)
     * @param  string $script (required)
     * @param  bool $is_first_page (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageSetupPostFooterRequest($name, $sheet_name, $section, $script, $is_first_page, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageSetupPostFooter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageSetupPostFooter'
            );
        }
        // verify the required parameter 'section' is set
        if ($section === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $section when calling cellsPageSetupPostFooter'
            );
        }
        // verify the required parameter 'script' is set
        if ($script === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $script when calling cellsPageSetupPostFooter'
            );
        }
        // verify the required parameter 'is_first_page' is set
        if ($is_first_page === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_first_page when calling cellsPageSetupPostFooter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pagesetup/footer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($section !== null) {
            $queryParams['section'] = ObjectSerializer::toQueryValue($section);
        }
        // query params
        if ($script !== null) {
            $queryParams['script'] = ObjectSerializer::toQueryValue($script);
        }
        // query params
        if ($is_first_page !== null) {
            $queryParams['isFirstPage'] = ObjectSerializer::toQueryValue($is_first_page);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageSetupPostFooter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageSetupPostHeader
     *
     * update  page header information
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $section section (required)
     * @param  string $script script (required)
     * @param  bool $is_first_page is_first_page (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupPostHeader($name, $sheet_name, $section, $script, $is_first_page, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageSetupPostHeaderWithHttpInfo($name, $sheet_name, $section, $script, $is_first_page, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageSetupPostHeaderWithHttpInfo
     *
     * update  page header information
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $section (required)
     * @param  string $script (required)
     * @param  bool $is_first_page (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupPostHeaderWithHttpInfo($name, $sheet_name, $section, $script, $is_first_page, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageSetupPostHeaderRequest($name, $sheet_name, $section, $script, $is_first_page, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageSetupPostHeaderAsync
     *
     * update  page header information
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $section (required)
     * @param  string $script (required)
     * @param  bool $is_first_page (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupPostHeaderAsync($name, $sheet_name, $section, $script, $is_first_page, $folder = null, $storage_name = null)
    {
        return $this->cellsPageSetupPostHeaderAsyncWithHttpInfo($name, $sheet_name, $section, $script, $is_first_page, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageSetupPostHeaderAsyncWithHttpInfo
     *
     * update  page header information
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $section (required)
     * @param  string $script (required)
     * @param  bool $is_first_page (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupPostHeaderAsyncWithHttpInfo($name, $sheet_name, $section, $script, $is_first_page, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageSetupPostHeaderRequest($name, $sheet_name, $section, $script, $is_first_page, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageSetupPostHeader'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $section (required)
     * @param  string $script (required)
     * @param  bool $is_first_page (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageSetupPostHeaderRequest($name, $sheet_name, $section, $script, $is_first_page, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageSetupPostHeader'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageSetupPostHeader'
            );
        }
        // verify the required parameter 'section' is set
        if ($section === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $section when calling cellsPageSetupPostHeader'
            );
        }
        // verify the required parameter 'script' is set
        if ($script === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $script when calling cellsPageSetupPostHeader'
            );
        }
        // verify the required parameter 'is_first_page' is set
        if ($is_first_page === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_first_page when calling cellsPageSetupPostHeader'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pagesetup/header';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($section !== null) {
            $queryParams['section'] = ObjectSerializer::toQueryValue($section);
        }
        // query params
        if ($script !== null) {
            $queryParams['script'] = ObjectSerializer::toQueryValue($script);
        }
        // query params
        if ($is_first_page !== null) {
            $queryParams['isFirstPage'] = ObjectSerializer::toQueryValue($is_first_page);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageSetupPostHeader'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageSetupPostPageSetup
     *
     * Update Page Setup information.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\PageSetup $page_setup page_setup (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupPostPageSetup($name, $sheet_name, $page_setup = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPageSetupPostPageSetupWithHttpInfo($name, $sheet_name, $page_setup, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPageSetupPostPageSetupWithHttpInfo
     *
     * Update Page Setup information.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\PageSetup $page_setup (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupPostPageSetupWithHttpInfo($name, $sheet_name, $page_setup = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageSetupPostPageSetupRequest($name, $sheet_name, $page_setup, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageSetupPostPageSetupAsync
     *
     * Update Page Setup information.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\PageSetup $page_setup (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupPostPageSetupAsync($name, $sheet_name, $page_setup = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPageSetupPostPageSetupAsyncWithHttpInfo($name, $sheet_name, $page_setup, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageSetupPostPageSetupAsyncWithHttpInfo
     *
     * Update Page Setup information.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\PageSetup $page_setup (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPageSetupPostPageSetupAsyncWithHttpInfo($name, $sheet_name, $page_setup = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPageSetupPostPageSetupRequest($name, $sheet_name, $page_setup, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageSetupPostPageSetup'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\PageSetup $page_setup (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPageSetupPostPageSetupRequest($name, $sheet_name, $page_setup = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageSetupPostPageSetup'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageSetupPostPageSetup'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pagesetup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($page_setup)) {
            $_tempBody = $page_setup;
            $_tempBodyName =str_replace('_','', 'page_setup');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPageSetupPostPageSetup'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    /**
     * Operation cellsPictureGetExtractBarcodes
     *
     * Get chart area border info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\BarcodeResponseList
     */
     /**
     * @deprecated 
     */
    public function cellsPictureGetExtractBarcodes($name, $sheet_name, $picture_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPictureGetExtractBarcodesWithHttpInfo($name, $sheet_name, $picture_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPictureGetExtractBarcodesWithHttpInfo
     *
     * Get chart area border info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\BarcodeResponseList, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPictureGetExtractBarcodesWithHttpInfo($name, $sheet_name, $picture_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\BarcodeResponseList';
        $request = $this->cellsPictureGetExtractBarcodesRequest($name, $sheet_name, $picture_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\BarcodeResponseList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPictureGetExtractBarcodesAsync
     *
     * Get chart area border info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPictureGetExtractBarcodesAsync($name, $sheet_name, $picture_index, $folder = null, $storage_name = null)
    {
        return $this->cellsPictureGetExtractBarcodesAsyncWithHttpInfo($name, $sheet_name, $picture_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPictureGetExtractBarcodesAsyncWithHttpInfo
     *
     * Get chart area border info.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPictureGetExtractBarcodesAsyncWithHttpInfo($name, $sheet_name, $picture_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\BarcodeResponseList';
        $request = $this->cellsPictureGetExtractBarcodesRequest($name, $sheet_name, $picture_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPictureGetExtractBarcodes'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture index. (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPictureGetExtractBarcodesRequest($name, $sheet_name, $picture_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPictureGetExtractBarcodes'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPictureGetExtractBarcodes'
            );
        }
        // verify the required parameter 'picture_index' is set
        if ($picture_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $picture_index when calling cellsPictureGetExtractBarcodes'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}/recognize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($picture_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pictureIndex' . '}',
                ObjectSerializer::toPathValue($picture_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPictureGetExtractBarcodes'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPicturesDeleteWorksheetPicture
     *
     * Delete a picture object in worksheet
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $picture_index Picture index (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesDeleteWorksheetPicture($name, $sheet_name, $picture_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPicturesDeleteWorksheetPictureWithHttpInfo($name, $sheet_name, $picture_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPicturesDeleteWorksheetPictureWithHttpInfo
     *
     * Delete a picture object in worksheet
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $picture_index Picture index (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesDeleteWorksheetPictureWithHttpInfo($name, $sheet_name, $picture_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPicturesDeleteWorksheetPictureRequest($name, $sheet_name, $picture_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPicturesDeleteWorksheetPictureAsync
     *
     * Delete a picture object in worksheet
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $picture_index Picture index (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesDeleteWorksheetPictureAsync($name, $sheet_name, $picture_index, $folder = null, $storage_name = null)
    {
        return $this->cellsPicturesDeleteWorksheetPictureAsyncWithHttpInfo($name, $sheet_name, $picture_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPicturesDeleteWorksheetPictureAsyncWithHttpInfo
     *
     * Delete a picture object in worksheet
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $picture_index Picture index (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesDeleteWorksheetPictureAsyncWithHttpInfo($name, $sheet_name, $picture_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPicturesDeleteWorksheetPictureRequest($name, $sheet_name, $picture_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPicturesDeleteWorksheetPicture'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  int $picture_index Picture index (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPicturesDeleteWorksheetPictureRequest($name, $sheet_name, $picture_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPicturesDeleteWorksheetPicture'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPicturesDeleteWorksheetPicture'
            );
        }
        // verify the required parameter 'picture_index' is set
        if ($picture_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $picture_index when calling cellsPicturesDeleteWorksheetPicture'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($picture_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pictureIndex' . '}',
                ObjectSerializer::toPathValue($picture_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPicturesDeleteWorksheetPicture'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPicturesDeleteWorksheetPictures
     *
     * Delete all pictures in worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesDeleteWorksheetPictures($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPicturesDeleteWorksheetPicturesWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPicturesDeleteWorksheetPicturesWithHttpInfo
     *
     * Delete all pictures in worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesDeleteWorksheetPicturesWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPicturesDeleteWorksheetPicturesRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPicturesDeleteWorksheetPicturesAsync
     *
     * Delete all pictures in worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesDeleteWorksheetPicturesAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsPicturesDeleteWorksheetPicturesAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPicturesDeleteWorksheetPicturesAsyncWithHttpInfo
     *
     * Delete all pictures in worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesDeleteWorksheetPicturesAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPicturesDeleteWorksheetPicturesRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPicturesDeleteWorksheetPictures'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPicturesDeleteWorksheetPicturesRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPicturesDeleteWorksheetPictures'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPicturesDeleteWorksheetPictures'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pictures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPicturesDeleteWorksheetPictures'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPicturesGetWorksheetPicture
     *
     * GRead worksheet picture by number.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture index. (required)
     * @param  string $format The exported object format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesGetWorksheetPicture($name, $sheet_name, $picture_index, $format = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPicturesGetWorksheetPictureWithHttpInfo($name, $sheet_name, $picture_index, $format, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPicturesGetWorksheetPictureWithHttpInfo
     *
     * GRead worksheet picture by number.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture index. (required)
     * @param  string $format The exported object format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesGetWorksheetPictureWithHttpInfo($name, $sheet_name, $picture_index, $format = null, $folder = null, $storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsPicturesGetWorksheetPictureRequest($name, $sheet_name, $picture_index, $format, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPicturesGetWorksheetPictureAsync
     *
     * GRead worksheet picture by number.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture index. (required)
     * @param  string $format The exported object format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesGetWorksheetPictureAsync($name, $sheet_name, $picture_index, $format = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPicturesGetWorksheetPictureAsyncWithHttpInfo($name, $sheet_name, $picture_index, $format, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPicturesGetWorksheetPictureAsyncWithHttpInfo
     *
     * GRead worksheet picture by number.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture index. (required)
     * @param  string $format The exported object format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesGetWorksheetPictureAsyncWithHttpInfo($name, $sheet_name, $picture_index, $format = null, $folder = null, $storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsPicturesGetWorksheetPictureRequest($name, $sheet_name, $picture_index, $format, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPicturesGetWorksheetPicture'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture index. (required)
     * @param  string $format The exported object format. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPicturesGetWorksheetPictureRequest($name, $sheet_name, $picture_index, $format = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPicturesGetWorksheetPicture'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPicturesGetWorksheetPicture'
            );
        }
        // verify the required parameter 'picture_index' is set
        if ($picture_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $picture_index when calling cellsPicturesGetWorksheetPicture'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($picture_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pictureIndex' . '}',
                ObjectSerializer::toPathValue($picture_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPicturesGetWorksheetPicture'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPicturesGetWorksheetPictures
     *
     * Read worksheet pictures.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PicturesResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesGetWorksheetPictures($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPicturesGetWorksheetPicturesWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPicturesGetWorksheetPicturesWithHttpInfo
     *
     * Read worksheet pictures.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PicturesResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesGetWorksheetPicturesWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PicturesResponse';
        $request = $this->cellsPicturesGetWorksheetPicturesRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PicturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPicturesGetWorksheetPicturesAsync
     *
     * Read worksheet pictures.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesGetWorksheetPicturesAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsPicturesGetWorksheetPicturesAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPicturesGetWorksheetPicturesAsyncWithHttpInfo
     *
     * Read worksheet pictures.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesGetWorksheetPicturesAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PicturesResponse';
        $request = $this->cellsPicturesGetWorksheetPicturesRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPicturesGetWorksheetPictures'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPicturesGetWorksheetPicturesRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPicturesGetWorksheetPictures'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPicturesGetWorksheetPictures'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pictures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPicturesGetWorksheetPictures'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPicturesPostWorksheetPicture
     *
     * Update worksheet picture by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture&#39;s index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Picture $picture Picture object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesPostWorksheetPicture($name, $sheet_name, $picture_index, $picture = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPicturesPostWorksheetPictureWithHttpInfo($name, $sheet_name, $picture_index, $picture, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPicturesPostWorksheetPictureWithHttpInfo
     *
     * Update worksheet picture by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture&#39;s index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Picture $picture Picture object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesPostWorksheetPictureWithHttpInfo($name, $sheet_name, $picture_index, $picture = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPicturesPostWorksheetPictureRequest($name, $sheet_name, $picture_index, $picture, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPicturesPostWorksheetPictureAsync
     *
     * Update worksheet picture by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture&#39;s index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Picture $picture Picture object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesPostWorksheetPictureAsync($name, $sheet_name, $picture_index, $picture = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPicturesPostWorksheetPictureAsyncWithHttpInfo($name, $sheet_name, $picture_index, $picture, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPicturesPostWorksheetPictureAsyncWithHttpInfo
     *
     * Update worksheet picture by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture&#39;s index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Picture $picture Picture object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesPostWorksheetPictureAsyncWithHttpInfo($name, $sheet_name, $picture_index, $picture = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPicturesPostWorksheetPictureRequest($name, $sheet_name, $picture_index, $picture, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPicturesPostWorksheetPicture'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $picture_index The picture&#39;s index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Picture $picture Picture object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPicturesPostWorksheetPictureRequest($name, $sheet_name, $picture_index, $picture = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPicturesPostWorksheetPicture'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPicturesPostWorksheetPicture'
            );
        }
        // verify the required parameter 'picture_index' is set
        if ($picture_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $picture_index when calling cellsPicturesPostWorksheetPicture'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($picture_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pictureIndex' . '}',
                ObjectSerializer::toPathValue($picture_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($picture)) {
            $_tempBody = $picture;
            $_tempBodyName =str_replace('_','', 'picture');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPicturesPostWorksheetPicture'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPicturesPutWorksheetAddPicture
     *
     * Add a new worksheet picture.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Picture $picture Pictute object (optional)
     * @param  int $upper_left_row The image upper left row. (optional, default to 0)
     * @param  int $upper_left_column The image upper left column. (optional, default to 0)
     * @param  int $lower_right_row The image low right row. (optional, default to 0)
     * @param  int $lower_right_column The image low right column. (optional, default to 0)
     * @param  string $picture_path The picture path, if not provided the picture data is inspected in the request body. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesPutWorksheetAddPicture($name, $sheet_name, $picture = null, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $picture_path = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPicturesPutWorksheetAddPictureWithHttpInfo($name, $sheet_name, $picture, $upper_left_row, $upper_left_column, $lower_right_row, $lower_right_column, $picture_path, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPicturesPutWorksheetAddPictureWithHttpInfo
     *
     * Add a new worksheet picture.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Picture $picture Pictute object (optional)
     * @param  int $upper_left_row The image upper left row. (optional, default to 0)
     * @param  int $upper_left_column The image upper left column. (optional, default to 0)
     * @param  int $lower_right_row The image low right row. (optional, default to 0)
     * @param  int $lower_right_column The image low right column. (optional, default to 0)
     * @param  string $picture_path The picture path, if not provided the picture data is inspected in the request body. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesPutWorksheetAddPictureWithHttpInfo($name, $sheet_name, $picture = null, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $picture_path = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPicturesPutWorksheetAddPictureRequest($name, $sheet_name, $picture, $upper_left_row, $upper_left_column, $lower_right_row, $lower_right_column, $picture_path, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPicturesPutWorksheetAddPictureAsync
     *
     * Add a new worksheet picture.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Picture $picture Pictute object (optional)
     * @param  int $upper_left_row The image upper left row. (optional, default to 0)
     * @param  int $upper_left_column The image upper left column. (optional, default to 0)
     * @param  int $lower_right_row The image low right row. (optional, default to 0)
     * @param  int $lower_right_column The image low right column. (optional, default to 0)
     * @param  string $picture_path The picture path, if not provided the picture data is inspected in the request body. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesPutWorksheetAddPictureAsync($name, $sheet_name, $picture = null, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $picture_path = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPicturesPutWorksheetAddPictureAsyncWithHttpInfo($name, $sheet_name, $picture, $upper_left_row, $upper_left_column, $lower_right_row, $lower_right_column, $picture_path, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPicturesPutWorksheetAddPictureAsyncWithHttpInfo
     *
     * Add a new worksheet picture.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Picture $picture Pictute object (optional)
     * @param  int $upper_left_row The image upper left row. (optional, default to 0)
     * @param  int $upper_left_column The image upper left column. (optional, default to 0)
     * @param  int $lower_right_row The image low right row. (optional, default to 0)
     * @param  int $lower_right_column The image low right column. (optional, default to 0)
     * @param  string $picture_path The picture path, if not provided the picture data is inspected in the request body. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPicturesPutWorksheetAddPictureAsyncWithHttpInfo($name, $sheet_name, $picture = null, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $picture_path = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPicturesPutWorksheetAddPictureRequest($name, $sheet_name, $picture, $upper_left_row, $upper_left_column, $lower_right_row, $lower_right_column, $picture_path, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPicturesPutWorksheetAddPicture'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worsheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Picture $picture Pictute object (optional)
     * @param  int $upper_left_row The image upper left row. (optional, default to 0)
     * @param  int $upper_left_column The image upper left column. (optional, default to 0)
     * @param  int $lower_right_row The image low right row. (optional, default to 0)
     * @param  int $lower_right_column The image low right column. (optional, default to 0)
     * @param  string $picture_path The picture path, if not provided the picture data is inspected in the request body. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPicturesPutWorksheetAddPictureRequest($name, $sheet_name, $picture = null, $upper_left_row = '0', $upper_left_column = '0', $lower_right_row = '0', $lower_right_column = '0', $picture_path = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPicturesPutWorksheetAddPicture'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPicturesPutWorksheetAddPicture'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pictures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($upper_left_row !== null) {
            $queryParams['upperLeftRow'] = ObjectSerializer::toQueryValue($upper_left_row);
        }
        // query params
        if ($upper_left_column !== null) {
            $queryParams['upperLeftColumn'] = ObjectSerializer::toQueryValue($upper_left_column);
        }
        // query params
        if ($lower_right_row !== null) {
            $queryParams['lowerRightRow'] = ObjectSerializer::toQueryValue($lower_right_row);
        }
        // query params
        if ($lower_right_column !== null) {
            $queryParams['lowerRightColumn'] = ObjectSerializer::toQueryValue($lower_right_column);
        }
        // query params
        if ($picture_path !== null) {
            $queryParams['picturePath'] = ObjectSerializer::toQueryValue($picture_path);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($picture)) {
            $_tempBody = $picture;
            $_tempBodyName =str_replace('_','', 'picture');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPicturesPutWorksheetAddPicture'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesDeletePivotTableField
     *
     * Delete pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeletePivotTableField($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesDeletePivotTableFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesDeletePivotTableFieldWithHttpInfo
     *
     * Delete pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeletePivotTableFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesDeletePivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesDeletePivotTableFieldAsync
     *
     * Delete pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeletePivotTableFieldAsync($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesDeletePivotTableFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesDeletePivotTableFieldAsyncWithHttpInfo
     *
     * Delete pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeletePivotTableFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesDeletePivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesDeletePivotTableField'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesDeletePivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesDeletePivotTableField'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesDeletePivotTableField'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesDeletePivotTableField'
            );
        }
        // verify the required parameter 'pivot_field_type' is set
        if ($pivot_field_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field_type when calling cellsPivotTablesDeletePivotTableField'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pivot_field_type !== null) {
            $queryParams['pivotFieldType'] = ObjectSerializer::toQueryValue($pivot_field_type);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($request)) {
            $_tempBody = $request;
            $_tempBodyName =str_replace('_','', 'request');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesDeletePivotTableField'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTable
     *
     * Delete worksheet pivot table by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTable($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo
     *
     * Delete worksheet pivot table by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTableRequest($name, $sheet_name, $pivot_table_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableAsync
     *
     * Delete worksheet pivot table by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableAsync($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesDeleteWorksheetPivotTableAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableAsyncWithHttpInfo
     *
     * Delete worksheet pivot table by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTableRequest($name, $sheet_name, $pivot_table_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesDeleteWorksheetPivotTable'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesDeleteWorksheetPivotTableRequest($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesDeleteWorksheetPivotTable'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesDeleteWorksheetPivotTable'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesDeleteWorksheetPivotTable'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesDeleteWorksheetPivotTable'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFilter
     *
     * delete  pivot filter for piovt table
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  int $field_index field_index (required)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFilter($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo
     *
     * delete  pivot filter for piovt table
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFilterAsync
     *
     * delete  pivot filter for piovt table
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFilterAsync($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesDeleteWorksheetPivotTableFilterAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFilterAsyncWithHttpInfo
     *
     * delete  pivot filter for piovt table
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFilterAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesDeleteWorksheetPivotTableFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesDeleteWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $field_index, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesDeleteWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesDeleteWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesDeleteWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsPivotTablesDeleteWorksheetPivotTableFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{fieldIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }
        // path params
        if ($field_index !== null) {
            $resourcePath = str_replace(
                '{' . 'fieldIndex' . '}',
                ObjectSerializer::toPathValue($field_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesDeleteWorksheetPivotTableFilter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFilters
     *
     * delete all pivot filters for piovt table
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFilters($name, $sheet_name, $pivot_table_index, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo($name, $sheet_name, $pivot_table_index, $need_re_calculate, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo
     *
     * delete all pivot filters for piovt table
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo($name, $sheet_name, $pivot_table_index, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTableFiltersRequest($name, $sheet_name, $pivot_table_index, $need_re_calculate, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFiltersAsync
     *
     * delete all pivot filters for piovt table
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFiltersAsync($name, $sheet_name, $pivot_table_index, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesDeleteWorksheetPivotTableFiltersAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $need_re_calculate, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTableFiltersAsyncWithHttpInfo
     *
     * delete all pivot filters for piovt table
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTableFiltersAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTableFiltersRequest($name, $sheet_name, $pivot_table_index, $need_re_calculate, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesDeleteWorksheetPivotTableFilters'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesDeleteWorksheetPivotTableFiltersRequest($name, $sheet_name, $pivot_table_index, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesDeleteWorksheetPivotTableFilters'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesDeleteWorksheetPivotTableFilters'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesDeleteWorksheetPivotTableFilters'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesDeleteWorksheetPivotTableFilters'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTables
     *
     * Delete worksheet pivot tables
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTables($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo
     *
     * Delete worksheet pivot tables
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTablesRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTablesAsync
     *
     * Delete worksheet pivot tables
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTablesAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesDeleteWorksheetPivotTablesAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesDeleteWorksheetPivotTablesAsyncWithHttpInfo
     *
     * Delete worksheet pivot tables
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesDeleteWorksheetPivotTablesAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesDeleteWorksheetPivotTablesRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesDeleteWorksheetPivotTables'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesDeleteWorksheetPivotTablesRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesDeleteWorksheetPivotTables'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesDeleteWorksheetPivotTables'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesDeleteWorksheetPivotTables'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesGetPivotTableField
     *
     * Get pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $pivot_field_index The field index in the base fields. (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PivotFieldResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetPivotTableField($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesGetPivotTableFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesGetPivotTableFieldWithHttpInfo
     *
     * Get pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $pivot_field_index The field index in the base fields. (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PivotFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetPivotTableFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFieldResponse';
        $request = $this->cellsPivotTablesGetPivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PivotFieldResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesGetPivotTableFieldAsync
     *
     * Get pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $pivot_field_index The field index in the base fields. (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetPivotTableFieldAsync($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesGetPivotTableFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesGetPivotTableFieldAsyncWithHttpInfo
     *
     * Get pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $pivot_field_index The field index in the base fields. (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetPivotTableFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFieldResponse';
        $request = $this->cellsPivotTablesGetPivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesGetPivotTableField'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $pivot_field_index The field index in the base fields. (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesGetPivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesGetPivotTableField'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesGetPivotTableField'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesGetPivotTableField'
            );
        }
        // verify the required parameter 'pivot_field_index' is set
        if ($pivot_field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field_index when calling cellsPivotTablesGetPivotTableField'
            );
        }
        // verify the required parameter 'pivot_field_type' is set
        if ($pivot_field_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field_type when calling cellsPivotTablesGetPivotTableField'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pivot_field_index !== null) {
            $queryParams['pivotFieldIndex'] = ObjectSerializer::toQueryValue($pivot_field_index);
        }
        // query params
        if ($pivot_field_type !== null) {
            $queryParams['pivotFieldType'] = ObjectSerializer::toQueryValue($pivot_field_type);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesGetPivotTableField'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTable
     *
     * Get worksheet pivottable info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivottable_index pivottable_index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PivotTableResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTable($name, $sheet_name, $pivottable_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesGetWorksheetPivotTableWithHttpInfo($name, $sheet_name, $pivottable_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableWithHttpInfo
     *
     * Get worksheet pivottable info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivottable_index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PivotTableResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTableWithHttpInfo($name, $sheet_name, $pivottable_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotTableResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTableRequest($name, $sheet_name, $pivottable_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PivotTableResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableAsync
     *
     * Get worksheet pivottable info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivottable_index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTableAsync($name, $sheet_name, $pivottable_index, $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesGetWorksheetPivotTableAsyncWithHttpInfo($name, $sheet_name, $pivottable_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableAsyncWithHttpInfo
     *
     * Get worksheet pivottable info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivottable_index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTableAsyncWithHttpInfo($name, $sheet_name, $pivottable_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotTableResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTableRequest($name, $sheet_name, $pivottable_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesGetWorksheetPivotTable'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivottable_index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesGetWorksheetPivotTableRequest($name, $sheet_name, $pivottable_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesGetWorksheetPivotTable'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesGetWorksheetPivotTable'
            );
        }
        // verify the required parameter 'pivottable_index' is set
        if ($pivottable_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivottable_index when calling cellsPivotTablesGetWorksheetPivotTable'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivottableIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivottable_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivottableIndex' . '}',
                ObjectSerializer::toPathValue($pivottable_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesGetWorksheetPivotTable'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFilter
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  int $filter_index filter_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PivotFilterResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTableFilter($name, $sheet_name, $pivot_table_index, $filter_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $filter_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PivotFilterResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFilterResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $filter_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PivotFilterResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFilterAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $filter_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTableFilterAsync($name, $sheet_name, $pivot_table_index, $filter_index, $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesGetWorksheetPivotTableFilterAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFilterAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $filter_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTableFilterAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFilterResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $filter_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesGetWorksheetPivotTableFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $filter_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesGetWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $filter_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesGetWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesGetWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesGetWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'filter_index' is set
        if ($filter_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_index when calling cellsPivotTablesGetWorksheetPivotTableFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{filterIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }
        // path params
        if ($filter_index !== null) {
            $resourcePath = str_replace(
                '{' . 'filterIndex' . '}',
                ObjectSerializer::toPathValue($filter_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesGetWorksheetPivotTableFilter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFilters
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PivotFiltersResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTableFilters($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PivotFiltersResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFiltersResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTableFiltersRequest($name, $sheet_name, $pivot_table_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PivotFiltersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFiltersAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTableFiltersAsync($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesGetWorksheetPivotTableFiltersAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTableFiltersAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTableFiltersAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFiltersResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTableFiltersRequest($name, $sheet_name, $pivot_table_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesGetWorksheetPivotTableFilters'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesGetWorksheetPivotTableFiltersRequest($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesGetWorksheetPivotTableFilters'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesGetWorksheetPivotTableFilters'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesGetWorksheetPivotTableFilters'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesGetWorksheetPivotTableFilters'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTables
     *
     * Get worksheet pivottables info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\PivotTablesResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTables($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesGetWorksheetPivotTablesWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTablesWithHttpInfo
     *
     * Get worksheet pivottables info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\PivotTablesResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTablesWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotTablesResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTablesRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\PivotTablesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTablesAsync
     *
     * Get worksheet pivottables info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTablesAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesGetWorksheetPivotTablesAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesGetWorksheetPivotTablesAsyncWithHttpInfo
     *
     * Get worksheet pivottables info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesGetWorksheetPivotTablesAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\PivotTablesResponse';
        $request = $this->cellsPivotTablesGetWorksheetPivotTablesRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesGetWorksheetPivotTables'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesGetWorksheetPivotTablesRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesGetWorksheetPivotTables'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesGetWorksheetPivotTables'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesGetWorksheetPivotTables'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableCellStyle
     *
     * Update cell style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $column column (required)
     * @param  int $row row (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableCellStyle($name, $sheet_name, $pivot_table_index, $column, $row, $style = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesPostPivotTableCellStyleWithHttpInfo($name, $sheet_name, $pivot_table_index, $column, $row, $style, $need_re_calculate, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostPivotTableCellStyleWithHttpInfo
     *
     * Update cell style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $column (required)
     * @param  int $row (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableCellStyleWithHttpInfo($name, $sheet_name, $pivot_table_index, $column, $row, $style = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostPivotTableCellStyleRequest($name, $sheet_name, $pivot_table_index, $column, $row, $style, $need_re_calculate, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostPivotTableCellStyleAsync
     *
     * Update cell style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $column (required)
     * @param  int $row (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableCellStyleAsync($name, $sheet_name, $pivot_table_index, $column, $row, $style = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesPostPivotTableCellStyleAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $column, $row, $style, $need_re_calculate, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableCellStyleAsyncWithHttpInfo
     *
     * Update cell style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $column (required)
     * @param  int $row (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableCellStyleAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $column, $row, $style = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostPivotTableCellStyleRequest($name, $sheet_name, $pivot_table_index, $column, $row, $style, $need_re_calculate, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostPivotTableCellStyle'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  int $column (required)
     * @param  int $row (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesPostPivotTableCellStyleRequest($name, $sheet_name, $pivot_table_index, $column, $row, $style = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostPivotTableCellStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostPivotTableCellStyle'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostPivotTableCellStyle'
            );
        }
        // verify the required parameter 'column' is set
        if ($column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column when calling cellsPivotTablesPostPivotTableCellStyle'
            );
        }
        // verify the required parameter 'row' is set
        if ($row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row when calling cellsPivotTablesPostPivotTableCellStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Format';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($style)) {
            $_tempBody = $style;
            $_tempBodyName =str_replace('_','', 'style');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesPostPivotTableCellStyle'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldHideItem
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  string $pivot_field_type pivot_field_type (required)
     * @param  int $field_index field_index (required)
     * @param  int $item_index item_index (required)
     * @param  bool $is_hide is_hide (required)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableFieldHideItem($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $pivot_field_type (required)
     * @param  int $field_index (required)
     * @param  int $item_index (required)
     * @param  bool $is_hide (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostPivotTableFieldHideItemRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldHideItemAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $pivot_field_type (required)
     * @param  int $field_index (required)
     * @param  int $item_index (required)
     * @param  bool $is_hide (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableFieldHideItemAsync($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesPostPivotTableFieldHideItemAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldHideItemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $pivot_field_type (required)
     * @param  int $field_index (required)
     * @param  int $item_index (required)
     * @param  bool $is_hide (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableFieldHideItemAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostPivotTableFieldHideItemRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostPivotTableFieldHideItem'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $pivot_field_type (required)
     * @param  int $field_index (required)
     * @param  int $item_index (required)
     * @param  bool $is_hide (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesPostPivotTableFieldHideItemRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $field_index, $item_index, $is_hide, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }
        // verify the required parameter 'pivot_field_type' is set
        if ($pivot_field_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field_type when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }
        // verify the required parameter 'item_index' is set
        if ($item_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_index when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }
        // verify the required parameter 'is_hide' is set
        if ($is_hide === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_hide when calling cellsPivotTablesPostPivotTableFieldHideItem'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Hide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pivot_field_type !== null) {
            $queryParams['pivotFieldType'] = ObjectSerializer::toQueryValue($pivot_field_type);
        }
        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($item_index !== null) {
            $queryParams['itemIndex'] = ObjectSerializer::toQueryValue($item_index);
        }
        // query params
        if ($is_hide !== null) {
            $queryParams['isHide'] = ObjectSerializer::toQueryValue($is_hide);
        }
        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesPostPivotTableFieldHideItem'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldMoveTo
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  int $field_index field_index (required)
     * @param  string $from from (required)
     * @param  string $to to (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableFieldMoveTo($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostPivotTableFieldMoveToRequest($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldMoveToAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableFieldMoveToAsync($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesPostPivotTableFieldMoveToAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableFieldMoveToAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableFieldMoveToAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostPivotTableFieldMoveToRequest($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostPivotTableFieldMoveTo'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $field_index (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesPostPivotTableFieldMoveToRequest($name, $sheet_name, $pivot_table_index, $field_index, $from, $to, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostPivotTableFieldMoveTo'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostPivotTableFieldMoveTo'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostPivotTableFieldMoveTo'
            );
        }
        // verify the required parameter 'field_index' is set
        if ($field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_index when calling cellsPivotTablesPostPivotTableFieldMoveTo'
            );
        }
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling cellsPivotTablesPostPivotTableFieldMoveTo'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling cellsPivotTablesPostPivotTableFieldMoveTo'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Move';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($field_index !== null) {
            $queryParams['fieldIndex'] = ObjectSerializer::toQueryValue($field_index);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesPostPivotTableFieldMoveTo'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableStyle
     *
     * Update style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableStyle($name, $sheet_name, $pivot_table_index, $style = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesPostPivotTableStyleWithHttpInfo($name, $sheet_name, $pivot_table_index, $style, $need_re_calculate, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostPivotTableStyleWithHttpInfo
     *
     * Update style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableStyleWithHttpInfo($name, $sheet_name, $pivot_table_index, $style = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostPivotTableStyleRequest($name, $sheet_name, $pivot_table_index, $style, $need_re_calculate, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostPivotTableStyleAsync
     *
     * Update style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableStyleAsync($name, $sheet_name, $pivot_table_index, $style = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesPostPivotTableStyleAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $style, $need_re_calculate, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableStyleAsyncWithHttpInfo
     *
     * Update style for pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableStyleAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $style = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostPivotTableStyleRequest($name, $sheet_name, $pivot_table_index, $style, $need_re_calculate, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostPivotTableStyle'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto in request body. (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesPostPivotTableStyleRequest($name, $sheet_name, $pivot_table_index, $style = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostPivotTableStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostPivotTableStyle'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostPivotTableStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/FormatAll';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($style)) {
            $_tempBody = $style;
            $_tempBodyName =str_replace('_','', 'style');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesPostPivotTableStyle'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableUpdatePivotField
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  int $pivot_field_index pivot_field_index (required)
     * @param  string $pivot_field_type pivot_field_type (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotField $pivot_field pivot_field (required)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableUpdatePivotField($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $pivot_field, $need_re_calculate = 'false', $folder = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesPostPivotTableUpdatePivotFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $pivot_field, $need_re_calculate, $folder);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostPivotTableUpdatePivotFieldWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $pivot_field_index (required)
     * @param  string $pivot_field_type (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotField $pivot_field (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableUpdatePivotFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $pivot_field, $need_re_calculate = 'false', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostPivotTableUpdatePivotFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $pivot_field, $need_re_calculate, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostPivotTableUpdatePivotFieldAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $pivot_field_index (required)
     * @param  string $pivot_field_type (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotField $pivot_field (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableUpdatePivotFieldAsync($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $pivot_field, $need_re_calculate = 'false', $folder = null)
    {
        return $this->cellsPivotTablesPostPivotTableUpdatePivotFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $pivot_field, $need_re_calculate, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableUpdatePivotFieldAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $pivot_field_index (required)
     * @param  string $pivot_field_type (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotField $pivot_field (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableUpdatePivotFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $pivot_field, $need_re_calculate = 'false', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostPivotTableUpdatePivotFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $pivot_field, $need_re_calculate, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostPivotTableUpdatePivotField'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $pivot_field_index (required)
     * @param  string $pivot_field_type (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotField $pivot_field (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesPostPivotTableUpdatePivotFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_index, $pivot_field_type, $pivot_field, $need_re_calculate = 'false', $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostPivotTableUpdatePivotField'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostPivotTableUpdatePivotField'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostPivotTableUpdatePivotField'
            );
        }
        // verify the required parameter 'pivot_field_index' is set
        if ($pivot_field_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field_index when calling cellsPivotTablesPostPivotTableUpdatePivotField'
            );
        }
        // verify the required parameter 'pivot_field_type' is set
        if ($pivot_field_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field_type when calling cellsPivotTablesPostPivotTableUpdatePivotField'
            );
        }
        // verify the required parameter 'pivot_field' is set
        if ($pivot_field === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field when calling cellsPivotTablesPostPivotTableUpdatePivotField'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFields/{pivotFieldIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pivot_field_type !== null) {
            $queryParams['pivotFieldType'] = ObjectSerializer::toQueryValue($pivot_field_type);
        }
        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }
        // path params
        if ($pivot_field_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotFieldIndex' . '}',
                ObjectSerializer::toPathValue($pivot_field_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($pivot_field)) {
            $_tempBody = $pivot_field;
            $_tempBodyName =str_replace('_','', 'pivot_field');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesPostPivotTableUpdatePivotField'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableUpdatePivotFields
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  string $pivot_field_type pivot_field_type (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotField $pivot_field pivot_field (required)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableUpdatePivotFields($name, $sheet_name, $pivot_table_index, $pivot_field_type, $pivot_field, $need_re_calculate = 'false', $folder = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesPostPivotTableUpdatePivotFieldsWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $pivot_field, $need_re_calculate, $folder);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostPivotTableUpdatePivotFieldsWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $pivot_field_type (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotField $pivot_field (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableUpdatePivotFieldsWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $pivot_field, $need_re_calculate = 'false', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostPivotTableUpdatePivotFieldsRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $pivot_field, $need_re_calculate, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostPivotTableUpdatePivotFieldsAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $pivot_field_type (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotField $pivot_field (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableUpdatePivotFieldsAsync($name, $sheet_name, $pivot_table_index, $pivot_field_type, $pivot_field, $need_re_calculate = 'false', $folder = null)
    {
        return $this->cellsPivotTablesPostPivotTableUpdatePivotFieldsAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $pivot_field, $need_re_calculate, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostPivotTableUpdatePivotFieldsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $pivot_field_type (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotField $pivot_field (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostPivotTableUpdatePivotFieldsAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $pivot_field, $need_re_calculate = 'false', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostPivotTableUpdatePivotFieldsRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $pivot_field, $need_re_calculate, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostPivotTableUpdatePivotFields'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  string $pivot_field_type (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotField $pivot_field (required)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesPostPivotTableUpdatePivotFieldsRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $pivot_field, $need_re_calculate = 'false', $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostPivotTableUpdatePivotFields'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostPivotTableUpdatePivotFields'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostPivotTableUpdatePivotFields'
            );
        }
        // verify the required parameter 'pivot_field_type' is set
        if ($pivot_field_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field_type when calling cellsPivotTablesPostPivotTableUpdatePivotFields'
            );
        }
        // verify the required parameter 'pivot_field' is set
        if ($pivot_field === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field when calling cellsPivotTablesPostPivotTableUpdatePivotFields'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pivot_field_type !== null) {
            $queryParams['pivotFieldType'] = ObjectSerializer::toQueryValue($pivot_field_type);
        }
        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($pivot_field)) {
            $_tempBody = $pivot_field;
            $_tempBodyName =str_replace('_','', 'pivot_field');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesPostPivotTableUpdatePivotFields'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableCalculate
     *
     * Calculates pivottable's data to cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostWorksheetPivotTableCalculate($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo
     *
     * Calculates pivottable's data to cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostWorksheetPivotTableCalculateRequest($name, $sheet_name, $pivot_table_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableCalculateAsync
     *
     * Calculates pivottable's data to cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostWorksheetPivotTableCalculateAsync($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesPostWorksheetPivotTableCalculateAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableCalculateAsyncWithHttpInfo
     *
     * Calculates pivottable's data to cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostWorksheetPivotTableCalculateAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostWorksheetPivotTableCalculateRequest($name, $sheet_name, $pivot_table_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostWorksheetPivotTableCalculate'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesPostWorksheetPivotTableCalculateRequest($name, $sheet_name, $pivot_table_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostWorksheetPivotTableCalculate'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostWorksheetPivotTableCalculate'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostWorksheetPivotTableCalculate'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Calculate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesPostWorksheetPivotTableCalculate'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableMove
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  int $row row (optional)
     * @param  int $column column (optional)
     * @param  string $dest_cell_name dest_cell_name (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostWorksheetPivotTableMove($name, $sheet_name, $pivot_table_index, $row = null, $column = null, $dest_cell_name = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo($name, $sheet_name, $pivot_table_index, $row, $column, $dest_cell_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  string $dest_cell_name (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo($name, $sheet_name, $pivot_table_index, $row = null, $column = null, $dest_cell_name = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostWorksheetPivotTableMoveRequest($name, $sheet_name, $pivot_table_index, $row, $column, $dest_cell_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableMoveAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  string $dest_cell_name (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostWorksheetPivotTableMoveAsync($name, $sheet_name, $pivot_table_index, $row = null, $column = null, $dest_cell_name = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesPostWorksheetPivotTableMoveAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $row, $column, $dest_cell_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPostWorksheetPivotTableMoveAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  string $dest_cell_name (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPostWorksheetPivotTableMoveAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $row = null, $column = null, $dest_cell_name = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPostWorksheetPivotTableMoveRequest($name, $sheet_name, $pivot_table_index, $row, $column, $dest_cell_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPostWorksheetPivotTableMove'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  string $dest_cell_name (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesPostWorksheetPivotTableMoveRequest($name, $sheet_name, $pivot_table_index, $row = null, $column = null, $dest_cell_name = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPostWorksheetPivotTableMove'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPostWorksheetPivotTableMove'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPostWorksheetPivotTableMove'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Move';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($dest_cell_name !== null) {
            $queryParams['destCellName'] = ObjectSerializer::toQueryValue($dest_cell_name);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesPostWorksheetPivotTableMove'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPutPivotTableField
     *
     * Add pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPutPivotTableField($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesPutPivotTableFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $need_re_calculate, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPutPivotTableFieldWithHttpInfo
     *
     * Add pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPutPivotTableFieldWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPutPivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $need_re_calculate, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPutPivotTableFieldAsync
     *
     * Add pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPutPivotTableFieldAsync($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesPutPivotTableFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $need_re_calculate, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPutPivotTableFieldAsyncWithHttpInfo
     *
     * Add pivot field into into pivot table
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPutPivotTableFieldAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPutPivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request, $need_re_calculate, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPutPivotTableField'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $pivot_table_index Pivot table index (required)
     * @param  string $pivot_field_type The fields area type. (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotTableFieldRequest $request Dto that conrains field indexes (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesPutPivotTableFieldRequest($name, $sheet_name, $pivot_table_index, $pivot_field_type, $request = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPutPivotTableField'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPutPivotTableField'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPutPivotTableField'
            );
        }
        // verify the required parameter 'pivot_field_type' is set
        if ($pivot_field_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_field_type when calling cellsPivotTablesPutPivotTableField'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pivot_field_type !== null) {
            $queryParams['pivotFieldType'] = ObjectSerializer::toQueryValue($pivot_field_type);
        }
        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($request)) {
            $_tempBody = $request;
            $_tempBodyName =str_replace('_','', 'request');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesPutPivotTableField'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTable
     *
     * Add a pivot table into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request CreatePivotTableRequest dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $source_data The data for the new PivotTable cache. (optional)
     * @param  string $dest_cell_name The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param  string $table_name The name of the new PivotTable report. (optional)
     * @param  bool $use_same_source Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPutWorksheetPivotTable($name, $sheet_name, $request = null, $folder = null, $storage_name = null, $source_data = null, $dest_cell_name = null, $table_name = null, $use_same_source = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesPutWorksheetPivotTableWithHttpInfo($name, $sheet_name, $request, $folder, $storage_name, $source_data, $dest_cell_name, $table_name, $use_same_source);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableWithHttpInfo
     *
     * Add a pivot table into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request CreatePivotTableRequest dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $source_data The data for the new PivotTable cache. (optional)
     * @param  string $dest_cell_name The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param  string $table_name The name of the new PivotTable report. (optional)
     * @param  bool $use_same_source Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPutWorksheetPivotTableWithHttpInfo($name, $sheet_name, $request = null, $folder = null, $storage_name = null, $source_data = null, $dest_cell_name = null, $table_name = null, $use_same_source = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPutWorksheetPivotTableRequest($name, $sheet_name, $request, $folder, $storage_name, $source_data, $dest_cell_name, $table_name, $use_same_source);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableAsync
     *
     * Add a pivot table into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request CreatePivotTableRequest dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $source_data The data for the new PivotTable cache. (optional)
     * @param  string $dest_cell_name The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param  string $table_name The name of the new PivotTable report. (optional)
     * @param  bool $use_same_source Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPutWorksheetPivotTableAsync($name, $sheet_name, $request = null, $folder = null, $storage_name = null, $source_data = null, $dest_cell_name = null, $table_name = null, $use_same_source = null)
    {
        return $this->cellsPivotTablesPutWorksheetPivotTableAsyncWithHttpInfo($name, $sheet_name, $request, $folder, $storage_name, $source_data, $dest_cell_name, $table_name, $use_same_source)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableAsyncWithHttpInfo
     *
     * Add a pivot table into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request CreatePivotTableRequest dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $source_data The data for the new PivotTable cache. (optional)
     * @param  string $dest_cell_name The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param  string $table_name The name of the new PivotTable report. (optional)
     * @param  bool $use_same_source Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPutWorksheetPivotTableAsyncWithHttpInfo($name, $sheet_name, $request = null, $folder = null, $storage_name = null, $source_data = null, $dest_cell_name = null, $table_name = null, $use_same_source = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPutWorksheetPivotTableRequest($name, $sheet_name, $request, $folder, $storage_name, $source_data, $dest_cell_name, $table_name, $use_same_source);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPutWorksheetPivotTable'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request CreatePivotTableRequest dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $source_data The data for the new PivotTable cache. (optional)
     * @param  string $dest_cell_name The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param  string $table_name The name of the new PivotTable report. (optional)
     * @param  bool $use_same_source Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesPutWorksheetPivotTableRequest($name, $sheet_name, $request = null, $folder = null, $storage_name = null, $source_data = null, $dest_cell_name = null, $table_name = null, $use_same_source = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPutWorksheetPivotTable'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPutWorksheetPivotTable'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }
        // query params
        if ($source_data !== null) {
            $queryParams['sourceData'] = ObjectSerializer::toQueryValue($source_data);
        }
        // query params
        if ($dest_cell_name !== null) {
            $queryParams['destCellName'] = ObjectSerializer::toQueryValue($dest_cell_name);
        }
        // query params
        if ($table_name !== null) {
            $queryParams['tableName'] = ObjectSerializer::toQueryValue($table_name);
        }
        // query params
        if ($use_same_source !== null) {
            $queryParams['useSameSource'] = ObjectSerializer::toQueryValue($use_same_source);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($request)) {
            $_tempBody = $request;
            $_tempBodyName =str_replace('_','', 'request');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesPutWorksheetPivotTable'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableFilter
     *
     * Add pivot filter for piovt table index
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $pivot_table_index pivot_table_index (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotFilter $filter filter (optional)
     * @param  bool $need_re_calculate need_re_calculate (optional, default to false)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPutWorksheetPivotTableFilter($name, $sheet_name, $pivot_table_index, $filter = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter, $need_re_calculate, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo
     *
     * Add pivot filter for piovt table index
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotFilter $filter (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPutWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $filter, $need_re_calculate, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableFilterAsync
     *
     * Add pivot filter for piovt table index
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotFilter $filter (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPutWorksheetPivotTableFilterAsync($name, $sheet_name, $pivot_table_index, $filter = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        return $this->cellsPivotTablesPutWorksheetPivotTableFilterAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter, $need_re_calculate, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPivotTablesPutWorksheetPivotTableFilterAsyncWithHttpInfo
     *
     * Add pivot filter for piovt table index
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotFilter $filter (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPivotTablesPutWorksheetPivotTableFilterAsyncWithHttpInfo($name, $sheet_name, $pivot_table_index, $filter = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPivotTablesPutWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $filter, $need_re_calculate, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPivotTablesPutWorksheetPivotTableFilter'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $pivot_table_index (required)
     * @param  \Aspose\Cells\Cloud\Model\PivotFilter $filter (optional)
     * @param  bool $need_re_calculate (optional, default to false)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPivotTablesPutWorksheetPivotTableFilterRequest($name, $sheet_name, $pivot_table_index, $filter = null, $need_re_calculate = 'false', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPivotTablesPutWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPivotTablesPutWorksheetPivotTableFilter'
            );
        }
        // verify the required parameter 'pivot_table_index' is set
        if ($pivot_table_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pivot_table_index when calling cellsPivotTablesPutWorksheetPivotTableFilter'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($need_re_calculate !== null) {
            $queryParams['needReCalculate'] = ObjectSerializer::toQueryValue($need_re_calculate);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($pivot_table_index !== null) {
            $resourcePath = str_replace(
                '{' . 'pivotTableIndex' . '}',
                ObjectSerializer::toPathValue($pivot_table_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($filter)) {
            $_tempBody = $filter;
            $_tempBodyName =str_replace('_','', 'filter');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPivotTablesPutWorksheetPivotTableFilter'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostCellCalculate
     *
     * Cell calculate formula
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $cell_name cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options options (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostCellCalculate($name, $sheet_name, $cell_name, $options = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostCellCalculateWithHttpInfo($name, $sheet_name, $cell_name, $options, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostCellCalculateWithHttpInfo
     *
     * Cell calculate formula
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostCellCalculateWithHttpInfo($name, $sheet_name, $cell_name, $options = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostCellCalculateRequest($name, $sheet_name, $cell_name, $options, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostCellCalculateAsync
     *
     * Cell calculate formula
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostCellCalculateAsync($name, $sheet_name, $cell_name, $options = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostCellCalculateAsyncWithHttpInfo($name, $sheet_name, $cell_name, $options, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostCellCalculateAsyncWithHttpInfo
     *
     * Cell calculate formula
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostCellCalculateAsyncWithHttpInfo($name, $sheet_name, $cell_name, $options = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostCellCalculateRequest($name, $sheet_name, $cell_name, $options, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostCellCalculate'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostCellCalculateRequest($name, $sheet_name, $cell_name, $options = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostCellCalculate'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostCellCalculate'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsPostCellCalculate'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellName}/calculate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($options)) {
            $_tempBody = $options;
            $_tempBodyName =str_replace('_','', 'options');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostCellCalculate'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostCellCharacters
     *
     * Set cell characters
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $cell_name cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\FontSetting[] $options options (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostCellCharacters($name, $sheet_name, $cell_name, $options = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostCellCharactersWithHttpInfo($name, $sheet_name, $cell_name, $options, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostCellCharactersWithHttpInfo
     *
     * Set cell characters
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\FontSetting[] $options (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostCellCharactersWithHttpInfo($name, $sheet_name, $cell_name, $options = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostCellCharactersRequest($name, $sheet_name, $cell_name, $options, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostCellCharactersAsync
     *
     * Set cell characters
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\FontSetting[] $options (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostCellCharactersAsync($name, $sheet_name, $cell_name, $options = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostCellCharactersAsyncWithHttpInfo($name, $sheet_name, $cell_name, $options, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostCellCharactersAsyncWithHttpInfo
     *
     * Set cell characters
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\FontSetting[] $options (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostCellCharactersAsyncWithHttpInfo($name, $sheet_name, $cell_name, $options = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostCellCharactersRequest($name, $sheet_name, $cell_name, $options, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostCellCharacters'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_name (required)
     * @param  \Aspose\Cells\Cloud\Model\FontSetting[] $options (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostCellCharactersRequest($name, $sheet_name, $cell_name, $options = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostCellCharacters'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostCellCharacters'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsPostCellCharacters'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellName}/characters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($options)) {
            $_tempBody = $options;
            $_tempBodyName =str_replace('_','', 'options');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostCellCharacters'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostClearContents
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostClearContents($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostClearContentsWithHttpInfo($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostClearContentsWithHttpInfo
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostClearContentsWithHttpInfo($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostClearContentsRequest($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostClearContentsAsync
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostClearContentsAsync($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostClearContentsAsyncWithHttpInfo($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostClearContentsAsyncWithHttpInfo
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostClearContentsAsyncWithHttpInfo($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostClearContentsRequest($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostClearContents'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostClearContentsRequest($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostClearContents'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostClearContents'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/clearcontents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($end_row !== null) {
            $queryParams['endRow'] = ObjectSerializer::toQueryValue($end_row);
        }
        // query params
        if ($end_column !== null) {
            $queryParams['endColumn'] = ObjectSerializer::toQueryValue($end_column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostClearContents'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostClearFormats
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostClearFormats($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostClearFormatsWithHttpInfo($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostClearFormatsWithHttpInfo
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostClearFormatsWithHttpInfo($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostClearFormatsRequest($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostClearFormatsAsync
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostClearFormatsAsync($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostClearFormatsAsyncWithHttpInfo($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostClearFormatsAsyncWithHttpInfo
     *
     * Clear cells contents.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostClearFormatsAsyncWithHttpInfo($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostClearFormatsRequest($name, $sheet_name, $range, $start_row, $start_column, $end_row, $end_column, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostClearFormats'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (optional)
     * @param  int $start_row The start row. (optional)
     * @param  int $start_column The start column. (optional)
     * @param  int $end_row The end row. (optional)
     * @param  int $end_column The end column. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostClearFormatsRequest($name, $sheet_name, $range = null, $start_row = null, $start_column = null, $end_row = null, $end_column = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostClearFormats'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostClearFormats'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/clearformats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($end_row !== null) {
            $queryParams['endRow'] = ObjectSerializer::toQueryValue($end_row);
        }
        // query params
        if ($end_column !== null) {
            $queryParams['endColumn'] = ObjectSerializer::toQueryValue($end_column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostClearFormats'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostColumnStyle
     *
     * Set column style
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostColumnStyle($name, $sheet_name, $column_index, $style = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostColumnStyleWithHttpInfo($name, $sheet_name, $column_index, $style, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostColumnStyleWithHttpInfo
     *
     * Set column style
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostColumnStyleWithHttpInfo($name, $sheet_name, $column_index, $style = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostColumnStyleRequest($name, $sheet_name, $column_index, $style, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostColumnStyleAsync
     *
     * Set column style
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostColumnStyleAsync($name, $sheet_name, $column_index, $style = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostColumnStyleAsyncWithHttpInfo($name, $sheet_name, $column_index, $style, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostColumnStyleAsyncWithHttpInfo
     *
     * Set column style
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostColumnStyleAsyncWithHttpInfo($name, $sheet_name, $column_index, $style = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostColumnStyleRequest($name, $sheet_name, $column_index, $style, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostColumnStyle'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostColumnStyleRequest($name, $sheet_name, $column_index, $style = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostColumnStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostColumnStyle'
            );
        }
        // verify the required parameter 'column_index' is set
        if ($column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_index when calling cellsPostColumnStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}/style';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($column_index !== null) {
            $resourcePath = str_replace(
                '{' . 'columnIndex' . '}',
                ObjectSerializer::toPathValue($column_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($style)) {
            $_tempBody = $style;
            $_tempBodyName =str_replace('_','', 'style');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostColumnStyle'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostCopyCellIntoCell
     *
     * Copy cell into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $dest_cell_name Destination cell name (required)
     * @param  string $sheet_name Destination worksheet name. (required)
     * @param  string $worksheet Source worksheet name. (required)
     * @param  string $cellname Source cell name (optional)
     * @param  int $row Source row (optional)
     * @param  int $column Source column (optional)
     * @param  string $folder Folder name (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostCopyCellIntoCell($name, $dest_cell_name, $sheet_name, $worksheet, $cellname = null, $row = null, $column = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostCopyCellIntoCellWithHttpInfo($name, $dest_cell_name, $sheet_name, $worksheet, $cellname, $row, $column, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostCopyCellIntoCellWithHttpInfo
     *
     * Copy cell into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $dest_cell_name Destination cell name (required)
     * @param  string $sheet_name Destination worksheet name. (required)
     * @param  string $worksheet Source worksheet name. (required)
     * @param  string $cellname Source cell name (optional)
     * @param  int $row Source row (optional)
     * @param  int $column Source column (optional)
     * @param  string $folder Folder name (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostCopyCellIntoCellWithHttpInfo($name, $dest_cell_name, $sheet_name, $worksheet, $cellname = null, $row = null, $column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostCopyCellIntoCellRequest($name, $dest_cell_name, $sheet_name, $worksheet, $cellname, $row, $column, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostCopyCellIntoCellAsync
     *
     * Copy cell into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $dest_cell_name Destination cell name (required)
     * @param  string $sheet_name Destination worksheet name. (required)
     * @param  string $worksheet Source worksheet name. (required)
     * @param  string $cellname Source cell name (optional)
     * @param  int $row Source row (optional)
     * @param  int $column Source column (optional)
     * @param  string $folder Folder name (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostCopyCellIntoCellAsync($name, $dest_cell_name, $sheet_name, $worksheet, $cellname = null, $row = null, $column = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostCopyCellIntoCellAsyncWithHttpInfo($name, $dest_cell_name, $sheet_name, $worksheet, $cellname, $row, $column, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostCopyCellIntoCellAsyncWithHttpInfo
     *
     * Copy cell into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $dest_cell_name Destination cell name (required)
     * @param  string $sheet_name Destination worksheet name. (required)
     * @param  string $worksheet Source worksheet name. (required)
     * @param  string $cellname Source cell name (optional)
     * @param  int $row Source row (optional)
     * @param  int $column Source column (optional)
     * @param  string $folder Folder name (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostCopyCellIntoCellAsyncWithHttpInfo($name, $dest_cell_name, $sheet_name, $worksheet, $cellname = null, $row = null, $column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostCopyCellIntoCellRequest($name, $dest_cell_name, $sheet_name, $worksheet, $cellname, $row, $column, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostCopyCellIntoCell'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $dest_cell_name Destination cell name (required)
     * @param  string $sheet_name Destination worksheet name. (required)
     * @param  string $worksheet Source worksheet name. (required)
     * @param  string $cellname Source cell name (optional)
     * @param  int $row Source row (optional)
     * @param  int $column Source column (optional)
     * @param  string $folder Folder name (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostCopyCellIntoCellRequest($name, $dest_cell_name, $sheet_name, $worksheet, $cellname = null, $row = null, $column = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostCopyCellIntoCell'
            );
        }
        // verify the required parameter 'dest_cell_name' is set
        if ($dest_cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest_cell_name when calling cellsPostCopyCellIntoCell'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostCopyCellIntoCell'
            );
        }
        // verify the required parameter 'worksheet' is set
        if ($worksheet === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worksheet when calling cellsPostCopyCellIntoCell'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{destCellName}/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($worksheet !== null) {
            $queryParams['worksheet'] = ObjectSerializer::toQueryValue($worksheet);
        }
        // query params
        if ($cellname !== null) {
            $queryParams['cellname'] = ObjectSerializer::toQueryValue($cellname);
        }
        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($dest_cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'destCellName' . '}',
                ObjectSerializer::toPathValue($dest_cell_name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostCopyCellIntoCell'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostCopyWorksheetColumns
     *
     * Copy worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_column_index Source column index (required)
     * @param  int $destination_column_index Destination column index (required)
     * @param  int $column_number The copied column number (required)
     * @param  string $worksheet The Worksheet (optional, default to )
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostCopyWorksheetColumns($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet = '', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostCopyWorksheetColumnsWithHttpInfo($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostCopyWorksheetColumnsWithHttpInfo
     *
     * Copy worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_column_index Source column index (required)
     * @param  int $destination_column_index Destination column index (required)
     * @param  int $column_number The copied column number (required)
     * @param  string $worksheet The Worksheet (optional, default to )
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostCopyWorksheetColumnsWithHttpInfo($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet = '', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostCopyWorksheetColumnsRequest($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostCopyWorksheetColumnsAsync
     *
     * Copy worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_column_index Source column index (required)
     * @param  int $destination_column_index Destination column index (required)
     * @param  int $column_number The copied column number (required)
     * @param  string $worksheet The Worksheet (optional, default to )
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostCopyWorksheetColumnsAsync($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet = '', $folder = null, $storage_name = null)
    {
        return $this->cellsPostCopyWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostCopyWorksheetColumnsAsyncWithHttpInfo
     *
     * Copy worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_column_index Source column index (required)
     * @param  int $destination_column_index Destination column index (required)
     * @param  int $column_number The copied column number (required)
     * @param  string $worksheet The Worksheet (optional, default to )
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostCopyWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet = '', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostCopyWorksheetColumnsRequest($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostCopyWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_column_index Source column index (required)
     * @param  int $destination_column_index Destination column index (required)
     * @param  int $column_number The copied column number (required)
     * @param  string $worksheet The Worksheet (optional, default to )
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostCopyWorksheetColumnsRequest($name, $sheet_name, $source_column_index, $destination_column_index, $column_number, $worksheet = '', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostCopyWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostCopyWorksheetColumns'
            );
        }
        // verify the required parameter 'source_column_index' is set
        if ($source_column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_column_index when calling cellsPostCopyWorksheetColumns'
            );
        }
        // verify the required parameter 'destination_column_index' is set
        if ($destination_column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_column_index when calling cellsPostCopyWorksheetColumns'
            );
        }
        // verify the required parameter 'column_number' is set
        if ($column_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_number when calling cellsPostCopyWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($source_column_index !== null) {
            $queryParams['sourceColumnIndex'] = ObjectSerializer::toQueryValue($source_column_index);
        }
        // query params
        if ($destination_column_index !== null) {
            $queryParams['destinationColumnIndex'] = ObjectSerializer::toQueryValue($destination_column_index);
        }
        // query params
        if ($column_number !== null) {
            $queryParams['columnNumber'] = ObjectSerializer::toQueryValue($column_number);
        }
        // query params
        if ($worksheet !== null) {
            $queryParams['worksheet'] = ObjectSerializer::toQueryValue($worksheet);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostCopyWorksheetColumns'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostCopyWorksheetRows
     *
     * Copy worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_row_index Source row index (required)
     * @param  int $destination_row_index Destination row index (required)
     * @param  int $row_number The copied row number (required)
     * @param  string $worksheet worksheet (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostCopyWorksheetRows($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostCopyWorksheetRowsWithHttpInfo($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostCopyWorksheetRowsWithHttpInfo
     *
     * Copy worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_row_index Source row index (required)
     * @param  int $destination_row_index Destination row index (required)
     * @param  int $row_number The copied row number (required)
     * @param  string $worksheet worksheet (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostCopyWorksheetRowsWithHttpInfo($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostCopyWorksheetRowsRequest($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostCopyWorksheetRowsAsync
     *
     * Copy worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_row_index Source row index (required)
     * @param  int $destination_row_index Destination row index (required)
     * @param  int $row_number The copied row number (required)
     * @param  string $worksheet worksheet (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostCopyWorksheetRowsAsync($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostCopyWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostCopyWorksheetRowsAsyncWithHttpInfo
     *
     * Copy worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_row_index Source row index (required)
     * @param  int $destination_row_index Destination row index (required)
     * @param  int $row_number The copied row number (required)
     * @param  string $worksheet worksheet (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostCopyWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostCopyWorksheetRowsRequest($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostCopyWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $source_row_index Source row index (required)
     * @param  int $destination_row_index Destination row index (required)
     * @param  int $row_number The copied row number (required)
     * @param  string $worksheet worksheet (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostCopyWorksheetRowsRequest($name, $sheet_name, $source_row_index, $destination_row_index, $row_number, $worksheet = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostCopyWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostCopyWorksheetRows'
            );
        }
        // verify the required parameter 'source_row_index' is set
        if ($source_row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_row_index when calling cellsPostCopyWorksheetRows'
            );
        }
        // verify the required parameter 'destination_row_index' is set
        if ($destination_row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_row_index when calling cellsPostCopyWorksheetRows'
            );
        }
        // verify the required parameter 'row_number' is set
        if ($row_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_number when calling cellsPostCopyWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($source_row_index !== null) {
            $queryParams['sourceRowIndex'] = ObjectSerializer::toQueryValue($source_row_index);
        }
        // query params
        if ($destination_row_index !== null) {
            $queryParams['destinationRowIndex'] = ObjectSerializer::toQueryValue($destination_row_index);
        }
        // query params
        if ($row_number !== null) {
            $queryParams['rowNumber'] = ObjectSerializer::toQueryValue($row_number);
        }
        // query params
        if ($worksheet !== null) {
            $queryParams['worksheet'] = ObjectSerializer::toQueryValue($worksheet);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostCopyWorksheetRows'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostGroupWorksheetColumns
     *
     * Group worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  bool $hide columns visible state (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostGroupWorksheetColumns($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostGroupWorksheetColumnsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostGroupWorksheetColumnsWithHttpInfo
     *
     * Group worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  bool $hide columns visible state (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostGroupWorksheetColumnsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostGroupWorksheetColumnsRequest($name, $sheet_name, $first_index, $last_index, $hide, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostGroupWorksheetColumnsAsync
     *
     * Group worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  bool $hide columns visible state (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostGroupWorksheetColumnsAsync($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostGroupWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostGroupWorksheetColumnsAsyncWithHttpInfo
     *
     * Group worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  bool $hide columns visible state (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostGroupWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostGroupWorksheetColumnsRequest($name, $sheet_name, $first_index, $last_index, $hide, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostGroupWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  bool $hide columns visible state (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostGroupWorksheetColumnsRequest($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostGroupWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostGroupWorksheetColumns'
            );
        }
        // verify the required parameter 'first_index' is set
        if ($first_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_index when calling cellsPostGroupWorksheetColumns'
            );
        }
        // verify the required parameter 'last_index' is set
        if ($last_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_index when calling cellsPostGroupWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_index !== null) {
            $queryParams['firstIndex'] = ObjectSerializer::toQueryValue($first_index);
        }
        // query params
        if ($last_index !== null) {
            $queryParams['lastIndex'] = ObjectSerializer::toQueryValue($last_index);
        }
        // query params
        if ($hide !== null) {
            $queryParams['hide'] = ObjectSerializer::toQueryValue($hide);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostGroupWorksheetColumns'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostGroupWorksheetRows
     *
     * Group worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $hide rows visible state (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostGroupWorksheetRows($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostGroupWorksheetRowsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostGroupWorksheetRowsWithHttpInfo
     *
     * Group worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $hide rows visible state (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostGroupWorksheetRowsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostGroupWorksheetRowsRequest($name, $sheet_name, $first_index, $last_index, $hide, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostGroupWorksheetRowsAsync
     *
     * Group worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $hide rows visible state (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostGroupWorksheetRowsAsync($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostGroupWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostGroupWorksheetRowsAsyncWithHttpInfo
     *
     * Group worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $hide rows visible state (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostGroupWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostGroupWorksheetRowsRequest($name, $sheet_name, $first_index, $last_index, $hide, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostGroupWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $hide rows visible state (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostGroupWorksheetRowsRequest($name, $sheet_name, $first_index, $last_index, $hide = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostGroupWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostGroupWorksheetRows'
            );
        }
        // verify the required parameter 'first_index' is set
        if ($first_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_index when calling cellsPostGroupWorksheetRows'
            );
        }
        // verify the required parameter 'last_index' is set
        if ($last_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_index when calling cellsPostGroupWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_index !== null) {
            $queryParams['firstIndex'] = ObjectSerializer::toQueryValue($first_index);
        }
        // query params
        if ($last_index !== null) {
            $queryParams['lastIndex'] = ObjectSerializer::toQueryValue($last_index);
        }
        // query params
        if ($hide !== null) {
            $queryParams['hide'] = ObjectSerializer::toQueryValue($hide);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostGroupWorksheetRows'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostHideWorksheetColumns
     *
     * Hide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_column The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostHideWorksheetColumns($name, $sheet_name, $start_column, $total_columns, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostHideWorksheetColumnsWithHttpInfo($name, $sheet_name, $start_column, $total_columns, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostHideWorksheetColumnsWithHttpInfo
     *
     * Hide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_column The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostHideWorksheetColumnsWithHttpInfo($name, $sheet_name, $start_column, $total_columns, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostHideWorksheetColumnsRequest($name, $sheet_name, $start_column, $total_columns, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostHideWorksheetColumnsAsync
     *
     * Hide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_column The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostHideWorksheetColumnsAsync($name, $sheet_name, $start_column, $total_columns, $folder = null, $storage_name = null)
    {
        return $this->cellsPostHideWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $start_column, $total_columns, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostHideWorksheetColumnsAsyncWithHttpInfo
     *
     * Hide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_column The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostHideWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $start_column, $total_columns, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostHideWorksheetColumnsRequest($name, $sheet_name, $start_column, $total_columns, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostHideWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_column The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostHideWorksheetColumnsRequest($name, $sheet_name, $start_column, $total_columns, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostHideWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostHideWorksheetColumns'
            );
        }
        // verify the required parameter 'start_column' is set
        if ($start_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_column when calling cellsPostHideWorksheetColumns'
            );
        }
        // verify the required parameter 'total_columns' is set
        if ($total_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_columns when calling cellsPostHideWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/hide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($total_columns !== null) {
            $queryParams['totalColumns'] = ObjectSerializer::toQueryValue($total_columns);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostHideWorksheetColumns'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostHideWorksheetRows
     *
     * Hide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostHideWorksheetRows($name, $sheet_name, $startrow, $total_rows, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostHideWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostHideWorksheetRowsWithHttpInfo
     *
     * Hide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostHideWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostHideWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostHideWorksheetRowsAsync
     *
     * Hide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostHideWorksheetRowsAsync($name, $sheet_name, $startrow, $total_rows, $folder = null, $storage_name = null)
    {
        return $this->cellsPostHideWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostHideWorksheetRowsAsyncWithHttpInfo
     *
     * Hide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostHideWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostHideWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostHideWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostHideWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostHideWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostHideWorksheetRows'
            );
        }
        // verify the required parameter 'startrow' is set
        if ($startrow === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startrow when calling cellsPostHideWorksheetRows'
            );
        }
        // verify the required parameter 'total_rows' is set
        if ($total_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_rows when calling cellsPostHideWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/hide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startrow !== null) {
            $queryParams['startrow'] = ObjectSerializer::toQueryValue($startrow);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostHideWorksheetRows'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostRowStyle
     *
     * Set row style.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostRowStyle($name, $sheet_name, $row_index, $style = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostRowStyleWithHttpInfo($name, $sheet_name, $row_index, $style, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostRowStyleWithHttpInfo
     *
     * Set row style.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostRowStyleWithHttpInfo($name, $sheet_name, $row_index, $style = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostRowStyleRequest($name, $sheet_name, $row_index, $style, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostRowStyleAsync
     *
     * Set row style.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostRowStyleAsync($name, $sheet_name, $row_index, $style = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostRowStyleAsyncWithHttpInfo($name, $sheet_name, $row_index, $style, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostRowStyleAsyncWithHttpInfo
     *
     * Set row style.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostRowStyleAsyncWithHttpInfo($name, $sheet_name, $row_index, $style = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostRowStyleRequest($name, $sheet_name, $row_index, $style, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostRowStyle'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style Style dto (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostRowStyleRequest($name, $sheet_name, $row_index, $style = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostRowStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostRowStyle'
            );
        }
        // verify the required parameter 'row_index' is set
        if ($row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_index when calling cellsPostRowStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}/style';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($row_index !== null) {
            $resourcePath = str_replace(
                '{' . 'rowIndex' . '}',
                ObjectSerializer::toPathValue($row_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($style)) {
            $_tempBody = $style;
            $_tempBodyName =str_replace('_','', 'style');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostRowStyle'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostSetCellHtmlString
     *
     * Set htmlstring value into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $html_string html_string (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostSetCellHtmlString($name, $sheet_name, $cell_name, $html_string, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostSetCellHtmlStringWithHttpInfo($name, $sheet_name, $cell_name, $html_string, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostSetCellHtmlStringWithHttpInfo
     *
     * Set htmlstring value into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $html_string (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostSetCellHtmlStringWithHttpInfo($name, $sheet_name, $cell_name, $html_string, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostSetCellHtmlStringRequest($name, $sheet_name, $cell_name, $html_string, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostSetCellHtmlStringAsync
     *
     * Set htmlstring value into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $html_string (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostSetCellHtmlStringAsync($name, $sheet_name, $cell_name, $html_string, $folder = null, $storage_name = null)
    {
        return $this->cellsPostSetCellHtmlStringAsyncWithHttpInfo($name, $sheet_name, $cell_name, $html_string, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostSetCellHtmlStringAsyncWithHttpInfo
     *
     * Set htmlstring value into cell
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $html_string (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostSetCellHtmlStringAsyncWithHttpInfo($name, $sheet_name, $cell_name, $html_string, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostSetCellHtmlStringRequest($name, $sheet_name, $cell_name, $html_string, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostSetCellHtmlString'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $html_string (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostSetCellHtmlStringRequest($name, $sheet_name, $cell_name, $html_string, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostSetCellHtmlString'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostSetCellHtmlString'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsPostSetCellHtmlString'
            );
        }
        // verify the required parameter 'html_string' is set
        if ($html_string === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $html_string when calling cellsPostSetCellHtmlString'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($html_string)) {
            $_tempBody = $html_string;
            $_tempBodyName =str_replace('_','', 'html_string');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostSetCellHtmlString'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostSetCellRangeValue
     *
     * Set cell range value
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param  string $value Range value (required)
     * @param  string $type Value data type (like \&quot;int\&quot;) (required)
     * @param  string $folder Folder name (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostSetCellRangeValue($name, $sheet_name, $cellarea, $value, $type, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostSetCellRangeValueWithHttpInfo($name, $sheet_name, $cellarea, $value, $type, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostSetCellRangeValueWithHttpInfo
     *
     * Set cell range value
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param  string $value Range value (required)
     * @param  string $type Value data type (like \&quot;int\&quot;) (required)
     * @param  string $folder Folder name (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostSetCellRangeValueWithHttpInfo($name, $sheet_name, $cellarea, $value, $type, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostSetCellRangeValueRequest($name, $sheet_name, $cellarea, $value, $type, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostSetCellRangeValueAsync
     *
     * Set cell range value
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param  string $value Range value (required)
     * @param  string $type Value data type (like \&quot;int\&quot;) (required)
     * @param  string $folder Folder name (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostSetCellRangeValueAsync($name, $sheet_name, $cellarea, $value, $type, $folder = null, $storage_name = null)
    {
        return $this->cellsPostSetCellRangeValueAsyncWithHttpInfo($name, $sheet_name, $cellarea, $value, $type, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostSetCellRangeValueAsyncWithHttpInfo
     *
     * Set cell range value
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param  string $value Range value (required)
     * @param  string $type Value data type (like \&quot;int\&quot;) (required)
     * @param  string $folder Folder name (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostSetCellRangeValueAsyncWithHttpInfo($name, $sheet_name, $cellarea, $value, $type, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostSetCellRangeValueRequest($name, $sheet_name, $cellarea, $value, $type, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostSetCellRangeValue'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param  string $value Range value (required)
     * @param  string $type Value data type (like \&quot;int\&quot;) (required)
     * @param  string $folder Folder name (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostSetCellRangeValueRequest($name, $sheet_name, $cellarea, $value, $type, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostSetCellRangeValue'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostSetCellRangeValue'
            );
        }
        // verify the required parameter 'cellarea' is set
        if ($cellarea === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cellarea when calling cellsPostSetCellRangeValue'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling cellsPostSetCellRangeValue'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling cellsPostSetCellRangeValue'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cellarea !== null) {
            $queryParams['cellarea'] = ObjectSerializer::toQueryValue($cellarea);
        }
        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostSetCellRangeValue'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostSetWorksheetColumnWidth
     *
     * Set worksheet column width.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  double $width The width. (required)
     * @param  int $count column number. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostSetWorksheetColumnWidth($name, $sheet_name, $column_index, $width, $count, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostSetWorksheetColumnWidthWithHttpInfo($name, $sheet_name, $column_index, $width, $count, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostSetWorksheetColumnWidthWithHttpInfo
     *
     * Set worksheet column width.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  double $width The width. (required)
     * @param  int $count column number. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostSetWorksheetColumnWidthWithHttpInfo($name, $sheet_name, $column_index, $width, $count, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostSetWorksheetColumnWidthRequest($name, $sheet_name, $column_index, $width, $count, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostSetWorksheetColumnWidthAsync
     *
     * Set worksheet column width.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  double $width The width. (required)
     * @param  int $count column number. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostSetWorksheetColumnWidthAsync($name, $sheet_name, $column_index, $width, $count, $folder = null, $storage_name = null)
    {
        return $this->cellsPostSetWorksheetColumnWidthAsyncWithHttpInfo($name, $sheet_name, $column_index, $width, $count, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostSetWorksheetColumnWidthAsyncWithHttpInfo
     *
     * Set worksheet column width.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  double $width The width. (required)
     * @param  int $count column number. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostSetWorksheetColumnWidthAsyncWithHttpInfo($name, $sheet_name, $column_index, $width, $count, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostSetWorksheetColumnWidthRequest($name, $sheet_name, $column_index, $width, $count, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostSetWorksheetColumnWidth'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  double $width The width. (required)
     * @param  int $count column number. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostSetWorksheetColumnWidthRequest($name, $sheet_name, $column_index, $width, $count, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostSetWorksheetColumnWidth'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostSetWorksheetColumnWidth'
            );
        }
        // verify the required parameter 'column_index' is set
        if ($column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_index when calling cellsPostSetWorksheetColumnWidth'
            );
        }
        // verify the required parameter 'width' is set
        if ($width === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $width when calling cellsPostSetWorksheetColumnWidth'
            );
        }
        // verify the required parameter 'count' is set
        if ($count === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $count when calling cellsPostSetWorksheetColumnWidth'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($column_index !== null) {
            $resourcePath = str_replace(
                '{' . 'columnIndex' . '}',
                ObjectSerializer::toPathValue($column_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostSetWorksheetColumnWidth'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUngroupWorksheetColumns
     *
     * Ungroup worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostUngroupWorksheetColumns($name, $sheet_name, $first_index, $last_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostUngroupWorksheetColumnsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostUngroupWorksheetColumnsWithHttpInfo
     *
     * Ungroup worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostUngroupWorksheetColumnsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostUngroupWorksheetColumnsRequest($name, $sheet_name, $first_index, $last_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUngroupWorksheetColumnsAsync
     *
     * Ungroup worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUngroupWorksheetColumnsAsync($name, $sheet_name, $first_index, $last_index, $folder = null, $storage_name = null)
    {
        return $this->cellsPostUngroupWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUngroupWorksheetColumnsAsyncWithHttpInfo
     *
     * Ungroup worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUngroupWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostUngroupWorksheetColumnsRequest($name, $sheet_name, $first_index, $last_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUngroupWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first column index to be operated. (required)
     * @param  int $last_index The last column index to be operated. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostUngroupWorksheetColumnsRequest($name, $sheet_name, $first_index, $last_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUngroupWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUngroupWorksheetColumns'
            );
        }
        // verify the required parameter 'first_index' is set
        if ($first_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_index when calling cellsPostUngroupWorksheetColumns'
            );
        }
        // verify the required parameter 'last_index' is set
        if ($last_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_index when calling cellsPostUngroupWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/ungroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_index !== null) {
            $queryParams['firstIndex'] = ObjectSerializer::toQueryValue($first_index);
        }
        // query params
        if ($last_index !== null) {
            $queryParams['lastIndex'] = ObjectSerializer::toQueryValue($last_index);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostUngroupWorksheetColumns'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUngroupWorksheetRows
     *
     * Ungroup worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $is_all Is all row to be operated (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostUngroupWorksheetRows($name, $sheet_name, $first_index, $last_index, $is_all = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostUngroupWorksheetRowsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $is_all, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostUngroupWorksheetRowsWithHttpInfo
     *
     * Ungroup worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $is_all Is all row to be operated (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostUngroupWorksheetRowsWithHttpInfo($name, $sheet_name, $first_index, $last_index, $is_all = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostUngroupWorksheetRowsRequest($name, $sheet_name, $first_index, $last_index, $is_all, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUngroupWorksheetRowsAsync
     *
     * Ungroup worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $is_all Is all row to be operated (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUngroupWorksheetRowsAsync($name, $sheet_name, $first_index, $last_index, $is_all = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostUngroupWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $is_all, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUngroupWorksheetRowsAsyncWithHttpInfo
     *
     * Ungroup worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $is_all Is all row to be operated (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUngroupWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $first_index, $last_index, $is_all = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostUngroupWorksheetRowsRequest($name, $sheet_name, $first_index, $last_index, $is_all, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUngroupWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $first_index The first row index to be operated. (required)
     * @param  int $last_index The last row index to be operated. (required)
     * @param  bool $is_all Is all row to be operated (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostUngroupWorksheetRowsRequest($name, $sheet_name, $first_index, $last_index, $is_all = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUngroupWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUngroupWorksheetRows'
            );
        }
        // verify the required parameter 'first_index' is set
        if ($first_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_index when calling cellsPostUngroupWorksheetRows'
            );
        }
        // verify the required parameter 'last_index' is set
        if ($last_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_index when calling cellsPostUngroupWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/ungroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_index !== null) {
            $queryParams['firstIndex'] = ObjectSerializer::toQueryValue($first_index);
        }
        // query params
        if ($last_index !== null) {
            $queryParams['lastIndex'] = ObjectSerializer::toQueryValue($last_index);
        }
        // query params
        if ($is_all !== null) {
            $queryParams['isAll'] = ObjectSerializer::toQueryValue($is_all);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostUngroupWorksheetRows'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUnhideWorksheetColumns
     *
     * Unhide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startcolumn The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  double $width The new column width. (optional, default to 50.0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostUnhideWorksheetColumns($name, $sheet_name, $startcolumn, $total_columns, $width = '50.0', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostUnhideWorksheetColumnsWithHttpInfo($name, $sheet_name, $startcolumn, $total_columns, $width, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostUnhideWorksheetColumnsWithHttpInfo
     *
     * Unhide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startcolumn The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  double $width The new column width. (optional, default to 50.0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostUnhideWorksheetColumnsWithHttpInfo($name, $sheet_name, $startcolumn, $total_columns, $width = '50.0', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostUnhideWorksheetColumnsRequest($name, $sheet_name, $startcolumn, $total_columns, $width, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUnhideWorksheetColumnsAsync
     *
     * Unhide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startcolumn The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  double $width The new column width. (optional, default to 50.0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUnhideWorksheetColumnsAsync($name, $sheet_name, $startcolumn, $total_columns, $width = '50.0', $folder = null, $storage_name = null)
    {
        return $this->cellsPostUnhideWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $startcolumn, $total_columns, $width, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUnhideWorksheetColumnsAsyncWithHttpInfo
     *
     * Unhide worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startcolumn The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  double $width The new column width. (optional, default to 50.0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUnhideWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $startcolumn, $total_columns, $width = '50.0', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostUnhideWorksheetColumnsRequest($name, $sheet_name, $startcolumn, $total_columns, $width, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUnhideWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startcolumn The begin column index to be operated. (required)
     * @param  int $total_columns Number of columns to be operated. (required)
     * @param  double $width The new column width. (optional, default to 50.0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostUnhideWorksheetColumnsRequest($name, $sheet_name, $startcolumn, $total_columns, $width = '50.0', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUnhideWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUnhideWorksheetColumns'
            );
        }
        // verify the required parameter 'startcolumn' is set
        if ($startcolumn === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startcolumn when calling cellsPostUnhideWorksheetColumns'
            );
        }
        // verify the required parameter 'total_columns' is set
        if ($total_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_columns when calling cellsPostUnhideWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/unhide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startcolumn !== null) {
            $queryParams['startcolumn'] = ObjectSerializer::toQueryValue($startcolumn);
        }
        // query params
        if ($total_columns !== null) {
            $queryParams['totalColumns'] = ObjectSerializer::toQueryValue($total_columns);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostUnhideWorksheetColumns'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUnhideWorksheetRows
     *
     * Unhide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  double $height The new row height. (optional, default to 15.0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostUnhideWorksheetRows($name, $sheet_name, $startrow, $total_rows, $height = '15.0', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostUnhideWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $height, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostUnhideWorksheetRowsWithHttpInfo
     *
     * Unhide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  double $height The new row height. (optional, default to 15.0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostUnhideWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $height = '15.0', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostUnhideWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $height, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUnhideWorksheetRowsAsync
     *
     * Unhide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  double $height The new row height. (optional, default to 15.0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUnhideWorksheetRowsAsync($name, $sheet_name, $startrow, $total_rows, $height = '15.0', $folder = null, $storage_name = null)
    {
        return $this->cellsPostUnhideWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $height, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUnhideWorksheetRowsAsyncWithHttpInfo
     *
     * Unhide worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  double $height The new row height. (optional, default to 15.0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUnhideWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $height = '15.0', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostUnhideWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $height, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUnhideWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (required)
     * @param  double $height The new row height. (optional, default to 15.0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostUnhideWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $height = '15.0', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUnhideWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUnhideWorksheetRows'
            );
        }
        // verify the required parameter 'startrow' is set
        if ($startrow === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startrow when calling cellsPostUnhideWorksheetRows'
            );
        }
        // verify the required parameter 'total_rows' is set
        if ($total_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_rows when calling cellsPostUnhideWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/unhide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startrow !== null) {
            $queryParams['startrow'] = ObjectSerializer::toQueryValue($startrow);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostUnhideWorksheetRows'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUpdateWorksheetCellStyle
     *
     * Update cell's style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\StyleResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostUpdateWorksheetCellStyle($name, $sheet_name, $cell_name, $style = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostUpdateWorksheetCellStyleWithHttpInfo($name, $sheet_name, $cell_name, $style, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostUpdateWorksheetCellStyleWithHttpInfo
     *
     * Update cell's style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\StyleResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostUpdateWorksheetCellStyleWithHttpInfo($name, $sheet_name, $cell_name, $style = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\StyleResponse';
        $request = $this->cellsPostUpdateWorksheetCellStyleRequest($name, $sheet_name, $cell_name, $style, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\StyleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUpdateWorksheetCellStyleAsync
     *
     * Update cell's style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUpdateWorksheetCellStyleAsync($name, $sheet_name, $cell_name, $style = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostUpdateWorksheetCellStyleAsyncWithHttpInfo($name, $sheet_name, $cell_name, $style, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUpdateWorksheetCellStyleAsyncWithHttpInfo
     *
     * Update cell's style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUpdateWorksheetCellStyleAsyncWithHttpInfo($name, $sheet_name, $cell_name, $style = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\StyleResponse';
        $request = $this->cellsPostUpdateWorksheetCellStyleRequest($name, $sheet_name, $cell_name, $style, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUpdateWorksheetCellStyle'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostUpdateWorksheetCellStyleRequest($name, $sheet_name, $cell_name, $style = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUpdateWorksheetCellStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUpdateWorksheetCellStyle'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsPostUpdateWorksheetCellStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($style)) {
            $_tempBody = $style;
            $_tempBodyName =str_replace('_','', 'style');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostUpdateWorksheetCellStyle'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUpdateWorksheetRangeStyle
     *
     * Update cell's range style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostUpdateWorksheetRangeStyle($name, $sheet_name, $range, $style = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostUpdateWorksheetRangeStyleWithHttpInfo($name, $sheet_name, $range, $style, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostUpdateWorksheetRangeStyleWithHttpInfo
     *
     * Update cell's range style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostUpdateWorksheetRangeStyleWithHttpInfo($name, $sheet_name, $range, $style = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostUpdateWorksheetRangeStyleRequest($name, $sheet_name, $range, $style, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUpdateWorksheetRangeStyleAsync
     *
     * Update cell's range style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUpdateWorksheetRangeStyleAsync($name, $sheet_name, $range, $style = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostUpdateWorksheetRangeStyleAsyncWithHttpInfo($name, $sheet_name, $range, $style, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUpdateWorksheetRangeStyleAsyncWithHttpInfo
     *
     * Update cell's range style.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUpdateWorksheetRangeStyleAsyncWithHttpInfo($name, $sheet_name, $range, $style = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostUpdateWorksheetRangeStyleRequest($name, $sheet_name, $range, $style, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUpdateWorksheetRangeStyle'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range The range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Style $style with update style settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostUpdateWorksheetRangeStyleRequest($name, $sheet_name, $range, $style = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUpdateWorksheetRangeStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUpdateWorksheetRangeStyle'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsPostUpdateWorksheetRangeStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/style';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($style)) {
            $_tempBody = $style;
            $_tempBodyName =str_replace('_','', 'style');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostUpdateWorksheetRangeStyle'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostUpdateWorksheetRow
     *
     * Update worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  double $height The new row height. (optional, default to 0.0)
     * @param  int $count row number. (optional, default to 0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostUpdateWorksheetRow($name, $sheet_name, $row_index, $height = '0.0', $count = '0', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostUpdateWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $height, $count, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostUpdateWorksheetRowWithHttpInfo
     *
     * Update worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  double $height The new row height. (optional, default to 0.0)
     * @param  int $count row number. (optional, default to 0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostUpdateWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $height = '0.0', $count = '0', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostUpdateWorksheetRowRequest($name, $sheet_name, $row_index, $height, $count, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostUpdateWorksheetRowAsync
     *
     * Update worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  double $height The new row height. (optional, default to 0.0)
     * @param  int $count row number. (optional, default to 0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUpdateWorksheetRowAsync($name, $sheet_name, $row_index, $height = '0.0', $count = '0', $folder = null, $storage_name = null)
    {
        return $this->cellsPostUpdateWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $height, $count, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostUpdateWorksheetRowAsyncWithHttpInfo
     *
     * Update worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  double $height The new row height. (optional, default to 0.0)
     * @param  int $count row number. (optional, default to 0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostUpdateWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $height = '0.0', $count = '0', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostUpdateWorksheetRowRequest($name, $sheet_name, $row_index, $height, $count, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostUpdateWorksheetRow'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The row index. (required)
     * @param  double $height The new row height. (optional, default to 0.0)
     * @param  int $count row number. (optional, default to 0)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostUpdateWorksheetRowRequest($name, $sheet_name, $row_index, $height = '0.0', $count = '0', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostUpdateWorksheetRow'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostUpdateWorksheetRow'
            );
        }
        // verify the required parameter 'row_index' is set
        if ($row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_index when calling cellsPostUpdateWorksheetRow'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($row_index !== null) {
            $resourcePath = str_replace(
                '{' . 'rowIndex' . '}',
                ObjectSerializer::toPathValue($row_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostUpdateWorksheetRow'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostWorksheetCellSetValue
     *
     * Set cell value.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $value The cell value. (optional)
     * @param  string $type The value type. (optional)
     * @param  string $formula Formula for cell (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostWorksheetCellSetValue($name, $sheet_name, $cell_name, $value = null, $type = null, $formula = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostWorksheetCellSetValueWithHttpInfo($name, $sheet_name, $cell_name, $value, $type, $formula, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostWorksheetCellSetValueWithHttpInfo
     *
     * Set cell value.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $value The cell value. (optional)
     * @param  string $type The value type. (optional)
     * @param  string $formula Formula for cell (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostWorksheetCellSetValueWithHttpInfo($name, $sheet_name, $cell_name, $value = null, $type = null, $formula = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellResponse';
        $request = $this->cellsPostWorksheetCellSetValueRequest($name, $sheet_name, $cell_name, $value, $type, $formula, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostWorksheetCellSetValueAsync
     *
     * Set cell value.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $value The cell value. (optional)
     * @param  string $type The value type. (optional)
     * @param  string $formula Formula for cell (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostWorksheetCellSetValueAsync($name, $sheet_name, $cell_name, $value = null, $type = null, $formula = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPostWorksheetCellSetValueAsyncWithHttpInfo($name, $sheet_name, $cell_name, $value, $type, $formula, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostWorksheetCellSetValueAsyncWithHttpInfo
     *
     * Set cell value.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $value The cell value. (optional)
     * @param  string $type The value type. (optional)
     * @param  string $formula Formula for cell (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostWorksheetCellSetValueAsyncWithHttpInfo($name, $sheet_name, $cell_name, $value = null, $type = null, $formula = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellResponse';
        $request = $this->cellsPostWorksheetCellSetValueRequest($name, $sheet_name, $cell_name, $value, $type, $formula, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostWorksheetCellSetValue'
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name. (required)
     * @param  string $value The cell value. (optional)
     * @param  string $type The value type. (optional)
     * @param  string $formula Formula for cell (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostWorksheetCellSetValueRequest($name, $sheet_name, $cell_name, $value = null, $type = null, $formula = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostWorksheetCellSetValue'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostWorksheetCellSetValue'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsPostWorksheetCellSetValue'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/{cellName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($formula !== null) {
            $queryParams['formula'] = ObjectSerializer::toQueryValue($formula);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostWorksheetCellSetValue'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostWorksheetMerge
     *
     * Merge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostWorksheetMerge($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostWorksheetMergeWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostWorksheetMergeWithHttpInfo
     *
     * Merge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostWorksheetMergeWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostWorksheetMergeRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostWorksheetMergeAsync
     *
     * Merge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostWorksheetMergeAsync($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        return $this->cellsPostWorksheetMergeAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostWorksheetMergeAsyncWithHttpInfo
     *
     * Merge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostWorksheetMergeAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostWorksheetMergeRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostWorksheetMerge'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostWorksheetMergeRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostWorksheetMerge'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostWorksheetMerge'
            );
        }
        // verify the required parameter 'start_row' is set
        if ($start_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_row when calling cellsPostWorksheetMerge'
            );
        }
        // verify the required parameter 'start_column' is set
        if ($start_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_column when calling cellsPostWorksheetMerge'
            );
        }
        // verify the required parameter 'total_rows' is set
        if ($total_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_rows when calling cellsPostWorksheetMerge'
            );
        }
        // verify the required parameter 'total_columns' is set
        if ($total_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_columns when calling cellsPostWorksheetMerge'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($total_columns !== null) {
            $queryParams['totalColumns'] = ObjectSerializer::toQueryValue($total_columns);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostWorksheetMerge'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPostWorksheetUnmerge
     *
     * Unmerge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPostWorksheetUnmerge($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPostWorksheetUnmergeWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPostWorksheetUnmergeWithHttpInfo
     *
     * Unmerge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPostWorksheetUnmergeWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostWorksheetUnmergeRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPostWorksheetUnmergeAsync
     *
     * Unmerge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostWorksheetUnmergeAsync($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        return $this->cellsPostWorksheetUnmergeAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPostWorksheetUnmergeAsyncWithHttpInfo
     *
     * Unmerge cells.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPostWorksheetUnmergeAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPostWorksheetUnmergeRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPostWorksheetUnmerge'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row. (required)
     * @param  int $start_column The start column. (required)
     * @param  int $total_rows The total rows (required)
     * @param  int $total_columns The total columns. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPostWorksheetUnmergeRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPostWorksheetUnmerge'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPostWorksheetUnmerge'
            );
        }
        // verify the required parameter 'start_row' is set
        if ($start_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_row when calling cellsPostWorksheetUnmerge'
            );
        }
        // verify the required parameter 'start_column' is set
        if ($start_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_column when calling cellsPostWorksheetUnmerge'
            );
        }
        // verify the required parameter 'total_rows' is set
        if ($total_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_rows when calling cellsPostWorksheetUnmerge'
            );
        }
        // verify the required parameter 'total_columns' is set
        if ($total_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_columns when calling cellsPostWorksheetUnmerge'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/unmerge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($total_columns !== null) {
            $queryParams['totalColumns'] = ObjectSerializer::toQueryValue($total_columns);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPostWorksheetUnmerge'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPropertiesDeleteDocumentProperties
     *
     * Delete all custom document properties and clean built-in ones.
     *
     * @param  string $name The document name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesDeleteDocumentProperties($name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPropertiesDeleteDocumentPropertiesWithHttpInfo($name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPropertiesDeleteDocumentPropertiesWithHttpInfo
     *
     * Delete all custom document properties and clean built-in ones.
     *
     * @param  string $name The document name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesDeleteDocumentPropertiesWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPropertiesDeleteDocumentPropertiesRequest($name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPropertiesDeleteDocumentPropertiesAsync
     *
     * Delete all custom document properties and clean built-in ones.
     *
     * @param  string $name The document name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesDeleteDocumentPropertiesAsync($name, $folder = null, $storage_name = null)
    {
        return $this->cellsPropertiesDeleteDocumentPropertiesAsyncWithHttpInfo($name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPropertiesDeleteDocumentPropertiesAsyncWithHttpInfo
     *
     * Delete all custom document properties and clean built-in ones.
     *
     * @param  string $name The document name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesDeleteDocumentPropertiesAsyncWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPropertiesDeleteDocumentPropertiesRequest($name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPropertiesDeleteDocumentProperties'
     *
     * @param  string $name The document name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPropertiesDeleteDocumentPropertiesRequest($name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPropertiesDeleteDocumentProperties'
            );
        }

        $resourcePath = '/cells/{name}/documentproperties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPropertiesDeleteDocumentProperties'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPropertiesDeleteDocumentProperty
     *
     * Delete document property.
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesDeleteDocumentProperty($name, $property_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPropertiesDeleteDocumentPropertyWithHttpInfo($name, $property_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPropertiesDeleteDocumentPropertyWithHttpInfo
     *
     * Delete document property.
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesDeleteDocumentPropertyWithHttpInfo($name, $property_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPropertiesDeleteDocumentPropertyRequest($name, $property_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPropertiesDeleteDocumentPropertyAsync
     *
     * Delete document property.
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesDeleteDocumentPropertyAsync($name, $property_name, $folder = null, $storage_name = null)
    {
        return $this->cellsPropertiesDeleteDocumentPropertyAsyncWithHttpInfo($name, $property_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPropertiesDeleteDocumentPropertyAsyncWithHttpInfo
     *
     * Delete document property.
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesDeleteDocumentPropertyAsyncWithHttpInfo($name, $property_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPropertiesDeleteDocumentPropertyRequest($name, $property_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPropertiesDeleteDocumentProperty'
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPropertiesDeleteDocumentPropertyRequest($name, $property_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPropertiesDeleteDocumentProperty'
            );
        }
        // verify the required parameter 'property_name' is set
        if ($property_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_name when calling cellsPropertiesDeleteDocumentProperty'
            );
        }

        $resourcePath = '/cells/{name}/documentproperties/{propertyName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($property_name !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyName' . '}',
                ObjectSerializer::toPathValue($property_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPropertiesDeleteDocumentProperty'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPropertiesGetDocumentProperties
     *
     * Read document properties.
     *
     * @param  string $name The document name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsDocumentPropertiesResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesGetDocumentProperties($name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPropertiesGetDocumentPropertiesWithHttpInfo($name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPropertiesGetDocumentPropertiesWithHttpInfo
     *
     * Read document properties.
     *
     * @param  string $name The document name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsDocumentPropertiesResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesGetDocumentPropertiesWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsDocumentPropertiesResponse';
        $request = $this->cellsPropertiesGetDocumentPropertiesRequest($name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsDocumentPropertiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPropertiesGetDocumentPropertiesAsync
     *
     * Read document properties.
     *
     * @param  string $name The document name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesGetDocumentPropertiesAsync($name, $folder = null, $storage_name = null)
    {
        return $this->cellsPropertiesGetDocumentPropertiesAsyncWithHttpInfo($name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPropertiesGetDocumentPropertiesAsyncWithHttpInfo
     *
     * Read document properties.
     *
     * @param  string $name The document name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesGetDocumentPropertiesAsyncWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsDocumentPropertiesResponse';
        $request = $this->cellsPropertiesGetDocumentPropertiesRequest($name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPropertiesGetDocumentProperties'
     *
     * @param  string $name The document name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPropertiesGetDocumentPropertiesRequest($name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPropertiesGetDocumentProperties'
            );
        }

        $resourcePath = '/cells/{name}/documentproperties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPropertiesGetDocumentProperties'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPropertiesGetDocumentProperty
     *
     * Read document property by name.
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsDocumentPropertyResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesGetDocumentProperty($name, $property_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPropertiesGetDocumentPropertyWithHttpInfo($name, $property_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPropertiesGetDocumentPropertyWithHttpInfo
     *
     * Read document property by name.
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsDocumentPropertyResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesGetDocumentPropertyWithHttpInfo($name, $property_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsDocumentPropertyResponse';
        $request = $this->cellsPropertiesGetDocumentPropertyRequest($name, $property_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsDocumentPropertyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPropertiesGetDocumentPropertyAsync
     *
     * Read document property by name.
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesGetDocumentPropertyAsync($name, $property_name, $folder = null, $storage_name = null)
    {
        return $this->cellsPropertiesGetDocumentPropertyAsyncWithHttpInfo($name, $property_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPropertiesGetDocumentPropertyAsyncWithHttpInfo
     *
     * Read document property by name.
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesGetDocumentPropertyAsyncWithHttpInfo($name, $property_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsDocumentPropertyResponse';
        $request = $this->cellsPropertiesGetDocumentPropertyRequest($name, $property_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPropertiesGetDocumentProperty'
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPropertiesGetDocumentPropertyRequest($name, $property_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPropertiesGetDocumentProperty'
            );
        }
        // verify the required parameter 'property_name' is set
        if ($property_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_name when calling cellsPropertiesGetDocumentProperty'
            );
        }

        $resourcePath = '/cells/{name}/documentproperties/{propertyName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($property_name !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyName' . '}',
                ObjectSerializer::toPathValue($property_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPropertiesGetDocumentProperty'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPropertiesPutDocumentProperty
     *
     * Set/create document property.
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CellsDocumentProperty $property with new property value. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesPutDocumentProperty($name, $property_name, $property = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPropertiesPutDocumentPropertyWithHttpInfo($name, $property_name, $property, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPropertiesPutDocumentPropertyWithHttpInfo
     *
     * Set/create document property.
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CellsDocumentProperty $property with new property value. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesPutDocumentPropertyWithHttpInfo($name, $property_name, $property = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPropertiesPutDocumentPropertyRequest($name, $property_name, $property, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPropertiesPutDocumentPropertyAsync
     *
     * Set/create document property.
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CellsDocumentProperty $property with new property value. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesPutDocumentPropertyAsync($name, $property_name, $property = null, $folder = null, $storage_name = null)
    {
        return $this->cellsPropertiesPutDocumentPropertyAsyncWithHttpInfo($name, $property_name, $property, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPropertiesPutDocumentPropertyAsyncWithHttpInfo
     *
     * Set/create document property.
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CellsDocumentProperty $property with new property value. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPropertiesPutDocumentPropertyAsyncWithHttpInfo($name, $property_name, $property = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPropertiesPutDocumentPropertyRequest($name, $property_name, $property, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPropertiesPutDocumentProperty'
     *
     * @param  string $name The document name. (required)
     * @param  string $property_name The property name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CellsDocumentProperty $property with new property value. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPropertiesPutDocumentPropertyRequest($name, $property_name, $property = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPropertiesPutDocumentProperty'
            );
        }
        // verify the required parameter 'property_name' is set
        if ($property_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_name when calling cellsPropertiesPutDocumentProperty'
            );
        }

        $resourcePath = '/cells/{name}/documentproperties/{propertyName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($property_name !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyName' . '}',
                ObjectSerializer::toPathValue($property_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($property)) {
            $_tempBody = $property;
            $_tempBodyName =str_replace('_','', 'property');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPropertiesPutDocumentProperty'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPutInsertWorksheetColumns
     *
     * Insert worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (optional, default to true)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPutInsertWorksheetColumns($name, $sheet_name, $column_index, $columns, $update_reference = 'true', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPutInsertWorksheetColumnsWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPutInsertWorksheetColumnsWithHttpInfo
     *
     * Insert worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (optional, default to true)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPutInsertWorksheetColumnsWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference = 'true', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPutInsertWorksheetColumnsRequest($name, $sheet_name, $column_index, $columns, $update_reference, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPutInsertWorksheetColumnsAsync
     *
     * Insert worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (optional, default to true)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPutInsertWorksheetColumnsAsync($name, $sheet_name, $column_index, $columns, $update_reference = 'true', $folder = null, $storage_name = null)
    {
        return $this->cellsPutInsertWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPutInsertWorksheetColumnsAsyncWithHttpInfo
     *
     * Insert worksheet columns.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (optional, default to true)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPutInsertWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $column_index, $columns, $update_reference = 'true', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPutInsertWorksheetColumnsRequest($name, $sheet_name, $column_index, $columns, $update_reference, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPutInsertWorksheetColumns'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $column_index The column index. (required)
     * @param  int $columns The columns. (required)
     * @param  bool $update_reference The update reference. (optional, default to true)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPutInsertWorksheetColumnsRequest($name, $sheet_name, $column_index, $columns, $update_reference = 'true', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPutInsertWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPutInsertWorksheetColumns'
            );
        }
        // verify the required parameter 'column_index' is set
        if ($column_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_index when calling cellsPutInsertWorksheetColumns'
            );
        }
        // verify the required parameter 'columns' is set
        if ($columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $columns when calling cellsPutInsertWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }
        // query params
        if ($update_reference !== null) {
            $queryParams['updateReference'] = ObjectSerializer::toQueryValue($update_reference);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($column_index !== null) {
            $resourcePath = str_replace(
                '{' . 'columnIndex' . '}',
                ObjectSerializer::toPathValue($column_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPutInsertWorksheetColumns'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPutInsertWorksheetRow
     *
     * Insert new worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The new row index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPutInsertWorksheetRow($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPutInsertWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPutInsertWorksheetRowWithHttpInfo
     *
     * Insert new worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The new row index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPutInsertWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPutInsertWorksheetRowRequest($name, $sheet_name, $row_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPutInsertWorksheetRowAsync
     *
     * Insert new worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The new row index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPutInsertWorksheetRowAsync($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        return $this->cellsPutInsertWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPutInsertWorksheetRowAsyncWithHttpInfo
     *
     * Insert new worksheet row.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The new row index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPutInsertWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPutInsertWorksheetRowRequest($name, $sheet_name, $row_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPutInsertWorksheetRow'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $row_index The new row index. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPutInsertWorksheetRowRequest($name, $sheet_name, $row_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPutInsertWorksheetRow'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPutInsertWorksheetRow'
            );
        }
        // verify the required parameter 'row_index' is set
        if ($row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_index when calling cellsPutInsertWorksheetRow'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($row_index !== null) {
            $resourcePath = str_replace(
                '{' . 'rowIndex' . '}',
                ObjectSerializer::toPathValue($row_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPutInsertWorksheetRow'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPutInsertWorksheetRows
     *
     * Insert several new worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsPutInsertWorksheetRows($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsPutInsertWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsPutInsertWorksheetRowsWithHttpInfo
     *
     * Insert several new worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsPutInsertWorksheetRowsWithHttpInfo($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPutInsertWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPutInsertWorksheetRowsAsync
     *
     * Insert several new worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPutInsertWorksheetRowsAsync($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null, $storage_name = null)
    {
        return $this->cellsPutInsertWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPutInsertWorksheetRowsAsyncWithHttpInfo
     *
     * Insert several new worksheet rows.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsPutInsertWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsPutInsertWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows, $update_reference, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPutInsertWorksheetRows'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $startrow The begin row index to be operated. (required)
     * @param  int $total_rows Number of rows to be operated. (optional, default to 1)
     * @param  bool $update_reference Indicates if update references in other worksheets. (optional, default to true)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsPutInsertWorksheetRowsRequest($name, $sheet_name, $startrow, $total_rows = '1', $update_reference = 'true', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPutInsertWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPutInsertWorksheetRows'
            );
        }
        // verify the required parameter 'startrow' is set
        if ($startrow === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startrow when calling cellsPutInsertWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/cells/rows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startrow !== null) {
            $queryParams['startrow'] = ObjectSerializer::toQueryValue($startrow);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($update_reference !== null) {
            $queryParams['updateReference'] = ObjectSerializer::toQueryValue($update_reference);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsPutInsertWorksheetRows'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesDeleteWorksheetCellsRange
     *
     * Delete range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $range range (required)
     * @param  string $shift Represent the shift options when deleting a range of cells. (Left,Up) (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsRangesDeleteWorksheetCellsRange($name, $sheet_name, $range, $shift, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsRangesDeleteWorksheetCellsRangeWithHttpInfo($name, $sheet_name, $range, $shift, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsRangesDeleteWorksheetCellsRangeWithHttpInfo
     *
     * Delete range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $range range (required)
     * @param  string $shift Represent the shift options when deleting a range of cells. (Left,Up) (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsRangesDeleteWorksheetCellsRangeWithHttpInfo($name, $sheet_name, $range, $shift, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesDeleteWorksheetCellsRangeRequest($name, $sheet_name, $range, $shift, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesDeleteWorksheetCellsRangeAsync
     *
     * Delete range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $range range (required)
     * @param  string $shift Represent the shift options when deleting a range of cells. (Left,Up) (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesDeleteWorksheetCellsRangeAsync($name, $sheet_name, $range, $shift, $folder = null, $storage_name = null)
    {
        return $this->cellsRangesDeleteWorksheetCellsRangeAsyncWithHttpInfo($name, $sheet_name, $range, $shift, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesDeleteWorksheetCellsRangeAsyncWithHttpInfo
     *
     * Delete range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $range range (required)
     * @param  string $shift Represent the shift options when deleting a range of cells. (Left,Up) (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesDeleteWorksheetCellsRangeAsyncWithHttpInfo($name, $sheet_name, $range, $shift, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesDeleteWorksheetCellsRangeRequest($name, $sheet_name, $range, $shift, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesDeleteWorksheetCellsRange'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $range range (required)
     * @param  string $shift Represent the shift options when deleting a range of cells. (Left,Up) (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsRangesDeleteWorksheetCellsRangeRequest($name, $sheet_name, $range, $shift, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesDeleteWorksheetCellsRange'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesDeleteWorksheetCellsRange'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsRangesDeleteWorksheetCellsRange'
            );
        }
        // verify the required parameter 'shift' is set
        if ($shift === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift when calling cellsRangesDeleteWorksheetCellsRange'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($shift !== null) {
            $queryParams['shift'] = ObjectSerializer::toQueryValue($shift);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsRangesDeleteWorksheetCellsRange'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesGetWorksheetCellsRangeValue
     *
     * Get cells list in a range by range name or row column indexes
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param  int $first_row the first row of the range (optional)
     * @param  int $first_column the first column of the range (optional)
     * @param  int $row_count the count of rows in the range (optional)
     * @param  int $column_count the count of columns in the range (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\RangeValueResponse
     */
     /**
     * @deprecated 
     */
    public function cellsRangesGetWorksheetCellsRangeValue($name, $sheet_name, $namerange = null, $first_row = null, $first_column = null, $row_count = null, $column_count = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsRangesGetWorksheetCellsRangeValueWithHttpInfo($name, $sheet_name, $namerange, $first_row, $first_column, $row_count, $column_count, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsRangesGetWorksheetCellsRangeValueWithHttpInfo
     *
     * Get cells list in a range by range name or row column indexes
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param  int $first_row the first row of the range (optional)
     * @param  int $first_column the first column of the range (optional)
     * @param  int $row_count the count of rows in the range (optional)
     * @param  int $column_count the count of columns in the range (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\RangeValueResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsRangesGetWorksheetCellsRangeValueWithHttpInfo($name, $sheet_name, $namerange = null, $first_row = null, $first_column = null, $row_count = null, $column_count = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RangeValueResponse';
        $request = $this->cellsRangesGetWorksheetCellsRangeValueRequest($name, $sheet_name, $namerange, $first_row, $first_column, $row_count, $column_count, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\RangeValueResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesGetWorksheetCellsRangeValueAsync
     *
     * Get cells list in a range by range name or row column indexes
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param  int $first_row the first row of the range (optional)
     * @param  int $first_column the first column of the range (optional)
     * @param  int $row_count the count of rows in the range (optional)
     * @param  int $column_count the count of columns in the range (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesGetWorksheetCellsRangeValueAsync($name, $sheet_name, $namerange = null, $first_row = null, $first_column = null, $row_count = null, $column_count = null, $folder = null, $storage_name = null)
    {
        return $this->cellsRangesGetWorksheetCellsRangeValueAsyncWithHttpInfo($name, $sheet_name, $namerange, $first_row, $first_column, $row_count, $column_count, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesGetWorksheetCellsRangeValueAsyncWithHttpInfo
     *
     * Get cells list in a range by range name or row column indexes
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param  int $first_row the first row of the range (optional)
     * @param  int $first_column the first column of the range (optional)
     * @param  int $row_count the count of rows in the range (optional)
     * @param  int $column_count the count of columns in the range (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesGetWorksheetCellsRangeValueAsyncWithHttpInfo($name, $sheet_name, $namerange = null, $first_row = null, $first_column = null, $row_count = null, $column_count = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RangeValueResponse';
        $request = $this->cellsRangesGetWorksheetCellsRangeValueRequest($name, $sheet_name, $namerange, $first_row, $first_column, $row_count, $column_count, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesGetWorksheetCellsRangeValue'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param  int $first_row the first row of the range (optional)
     * @param  int $first_column the first column of the range (optional)
     * @param  int $row_count the count of rows in the range (optional)
     * @param  int $column_count the count of columns in the range (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsRangesGetWorksheetCellsRangeValueRequest($name, $sheet_name, $namerange = null, $first_row = null, $first_column = null, $row_count = null, $column_count = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesGetWorksheetCellsRangeValue'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesGetWorksheetCellsRangeValue'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($namerange !== null) {
            $queryParams['namerange'] = ObjectSerializer::toQueryValue($namerange);
        }
        // query params
        if ($first_row !== null) {
            $queryParams['firstRow'] = ObjectSerializer::toQueryValue($first_row);
        }
        // query params
        if ($first_column !== null) {
            $queryParams['firstColumn'] = ObjectSerializer::toQueryValue($first_column);
        }
        // query params
        if ($row_count !== null) {
            $queryParams['rowCount'] = ObjectSerializer::toQueryValue($row_count);
        }
        // query params
        if ($column_count !== null) {
            $queryParams['columnCount'] = ObjectSerializer::toQueryValue($column_count);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsRangesGetWorksheetCellsRangeValue'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeColumnWidth
     *
     * Set column width of range
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  double $value value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeColumnWidth($name, $sheet_name, $value, $range = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo($name, $sheet_name, $value, $range, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo
     *
     * Set column width of range
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo($name, $sheet_name, $value, $range = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeColumnWidthRequest($name, $sheet_name, $value, $range, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeColumnWidthAsync
     *
     * Set column width of range
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeColumnWidthAsync($name, $sheet_name, $value, $range = null, $folder = null, $storage_name = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeColumnWidthAsyncWithHttpInfo($name, $sheet_name, $value, $range, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeColumnWidthAsyncWithHttpInfo
     *
     * Set column width of range
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeColumnWidthAsyncWithHttpInfo($name, $sheet_name, $value, $range = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeColumnWidthRequest($name, $sheet_name, $value, $range, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeColumnWidth'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsRangesPostWorksheetCellsRangeColumnWidthRequest($name, $sheet_name, $value, $range = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeColumnWidth'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeColumnWidth'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling cellsRangesPostWorksheetCellsRangeColumnWidth'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/columnWidth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($range)) {
            $_tempBody = $range;
            $_tempBodyName =str_replace('_','', 'range');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsRangesPostWorksheetCellsRangeColumnWidth'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMerge
     *
     * Combines a range of cells into a single cell.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeMerge($name, $sheet_name, $range = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsRangesPostWorksheetCellsRangeMergeWithHttpInfo($name, $sheet_name, $range, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMergeWithHttpInfo
     *
     * Combines a range of cells into a single cell.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeMergeWithHttpInfo($name, $sheet_name, $range = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeMergeRequest($name, $sheet_name, $range, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMergeAsync
     *
     * Combines a range of cells into a single cell.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeMergeAsync($name, $sheet_name, $range = null, $folder = null, $storage_name = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeMergeAsyncWithHttpInfo($name, $sheet_name, $range, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMergeAsyncWithHttpInfo
     *
     * Combines a range of cells into a single cell.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeMergeAsyncWithHttpInfo($name, $sheet_name, $range = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeMergeRequest($name, $sheet_name, $range, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeMerge'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsRangesPostWorksheetCellsRangeMergeRequest($name, $sheet_name, $range = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeMerge'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeMerge'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($range)) {
            $_tempBody = $range;
            $_tempBodyName =str_replace('_','', 'range');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsRangesPostWorksheetCellsRangeMerge'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMoveTo
     *
     * Move the current range to the dest range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  int $dest_row The start row of the dest range. (required)
     * @param  int $dest_column The start column of the dest range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeMoveTo($name, $sheet_name, $dest_row, $dest_column, $range = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo($name, $sheet_name, $dest_row, $dest_column, $range, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo
     *
     * Move the current range to the dest range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  int $dest_row The start row of the dest range. (required)
     * @param  int $dest_column The start column of the dest range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo($name, $sheet_name, $dest_row, $dest_column, $range = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeMoveToRequest($name, $sheet_name, $dest_row, $dest_column, $range, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMoveToAsync
     *
     * Move the current range to the dest range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  int $dest_row The start row of the dest range. (required)
     * @param  int $dest_column The start column of the dest range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeMoveToAsync($name, $sheet_name, $dest_row, $dest_column, $range = null, $folder = null, $storage_name = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeMoveToAsyncWithHttpInfo($name, $sheet_name, $dest_row, $dest_column, $range, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeMoveToAsyncWithHttpInfo
     *
     * Move the current range to the dest range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  int $dest_row The start row of the dest range. (required)
     * @param  int $dest_column The start column of the dest range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeMoveToAsyncWithHttpInfo($name, $sheet_name, $dest_row, $dest_column, $range = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeMoveToRequest($name, $sheet_name, $dest_row, $dest_column, $range, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeMoveTo'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  int $dest_row The start row of the dest range. (required)
     * @param  int $dest_column The start column of the dest range. (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsRangesPostWorksheetCellsRangeMoveToRequest($name, $sheet_name, $dest_row, $dest_column, $range = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeMoveTo'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeMoveTo'
            );
        }
        // verify the required parameter 'dest_row' is set
        if ($dest_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest_row when calling cellsRangesPostWorksheetCellsRangeMoveTo'
            );
        }
        // verify the required parameter 'dest_column' is set
        if ($dest_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest_column when calling cellsRangesPostWorksheetCellsRangeMoveTo'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/moveto';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dest_row !== null) {
            $queryParams['destRow'] = ObjectSerializer::toQueryValue($dest_row);
        }
        // query params
        if ($dest_column !== null) {
            $queryParams['destColumn'] = ObjectSerializer::toQueryValue($dest_column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($range)) {
            $_tempBody = $range;
            $_tempBodyName =str_replace('_','', 'range');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsRangesPostWorksheetCellsRangeMoveTo'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeOutlineBorder
     *
     * Sets outline border around a range of cells.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetOutlineBorderRequest $range_operate Range Set OutlineBorder Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeOutlineBorder($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo($name, $sheet_name, $range_operate, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo
     *
     * Sets outline border around a range of cells.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetOutlineBorderRequest $range_operate Range Set OutlineBorder Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeOutlineBorderRequest($name, $sheet_name, $range_operate, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeOutlineBorderAsync
     *
     * Sets outline border around a range of cells.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetOutlineBorderRequest $range_operate Range Set OutlineBorder Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeOutlineBorderAsync($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeOutlineBorderAsyncWithHttpInfo($name, $sheet_name, $range_operate, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeOutlineBorderAsyncWithHttpInfo
     *
     * Sets outline border around a range of cells.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetOutlineBorderRequest $range_operate Range Set OutlineBorder Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeOutlineBorderAsyncWithHttpInfo($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeOutlineBorderRequest($name, $sheet_name, $range_operate, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeOutlineBorder'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetOutlineBorderRequest $range_operate Range Set OutlineBorder Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsRangesPostWorksheetCellsRangeOutlineBorderRequest($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeOutlineBorder'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeOutlineBorder'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/outlineBorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($range_operate)) {
            $_tempBody = $range_operate;
            $_tempBodyName =str_replace('_','', 'range_operate');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsRangesPostWorksheetCellsRangeOutlineBorder'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeRowHeight
     *
     * set row height of range
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  double $value value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeRowHeight($name, $sheet_name, $value, $range = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo($name, $sheet_name, $value, $range, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo
     *
     * set row height of range
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo($name, $sheet_name, $value, $range = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeRowHeightRequest($name, $sheet_name, $value, $range, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeRowHeightAsync
     *
     * set row height of range
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeRowHeightAsync($name, $sheet_name, $value, $range = null, $folder = null, $storage_name = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeRowHeightAsyncWithHttpInfo($name, $sheet_name, $value, $range, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeRowHeightAsyncWithHttpInfo
     *
     * set row height of range
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeRowHeightAsyncWithHttpInfo($name, $sheet_name, $value, $range = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeRowHeightRequest($name, $sheet_name, $value, $range, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeRowHeight'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  double $value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsRangesPostWorksheetCellsRangeRowHeightRequest($name, $sheet_name, $value, $range = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeRowHeight'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeRowHeight'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling cellsRangesPostWorksheetCellsRangeRowHeight'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/rowHeight';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($range)) {
            $_tempBody = $range;
            $_tempBodyName =str_replace('_','', 'range');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsRangesPostWorksheetCellsRangeRowHeight'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeStyle
     *
     * Sets the style of the range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetStyleRequest $range_operate Range Set Style Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeStyle($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsRangesPostWorksheetCellsRangeStyleWithHttpInfo($name, $sheet_name, $range_operate, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeStyleWithHttpInfo
     *
     * Sets the style of the range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetStyleRequest $range_operate Range Set Style Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeStyleWithHttpInfo($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeStyleRequest($name, $sheet_name, $range_operate, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeStyleAsync
     *
     * Sets the style of the range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetStyleRequest $range_operate Range Set Style Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeStyleAsync($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeStyleAsyncWithHttpInfo($name, $sheet_name, $range_operate, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeStyleAsyncWithHttpInfo
     *
     * Sets the style of the range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetStyleRequest $range_operate Range Set Style Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeStyleAsyncWithHttpInfo($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeStyleRequest($name, $sheet_name, $range_operate, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeStyle'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeSetStyleRequest $range_operate Range Set Style Request (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsRangesPostWorksheetCellsRangeStyleRequest($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeStyle'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeStyle'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/style';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($range_operate)) {
            $_tempBody = $range_operate;
            $_tempBodyName =str_replace('_','', 'range_operate');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsRangesPostWorksheetCellsRangeStyle'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeUnmerge
     *
     * Unmerges merged cells of this range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeUnmerge($name, $sheet_name, $range = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo($name, $sheet_name, $range, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo
     *
     * Unmerges merged cells of this range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo($name, $sheet_name, $range = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeUnmergeRequest($name, $sheet_name, $range, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeUnmergeAsync
     *
     * Unmerges merged cells of this range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeUnmergeAsync($name, $sheet_name, $range = null, $folder = null, $storage_name = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeUnmergeAsyncWithHttpInfo($name, $sheet_name, $range, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeUnmergeAsyncWithHttpInfo
     *
     * Unmerges merged cells of this range.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeUnmergeAsyncWithHttpInfo($name, $sheet_name, $range = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeUnmergeRequest($name, $sheet_name, $range, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeUnmerge'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsRangesPostWorksheetCellsRangeUnmergeRequest($name, $sheet_name, $range = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeUnmerge'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeUnmerge'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/unmerge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($range)) {
            $_tempBody = $range;
            $_tempBodyName =str_replace('_','', 'range');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsRangesPostWorksheetCellsRangeUnmerge'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeValue
     *
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $value Input value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  bool $is_converted True: converted to other data type if appropriate. (optional, default to false)
     * @param  bool $set_style True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeValue($name, $sheet_name, $value, $range = null, $is_converted = 'false', $set_style = 'false', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsRangesPostWorksheetCellsRangeValueWithHttpInfo($name, $sheet_name, $value, $range, $is_converted, $set_style, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeValueWithHttpInfo
     *
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $value Input value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  bool $is_converted True: converted to other data type if appropriate. (optional, default to false)
     * @param  bool $set_style True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeValueWithHttpInfo($name, $sheet_name, $value, $range = null, $is_converted = 'false', $set_style = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeValueRequest($name, $sheet_name, $value, $range, $is_converted, $set_style, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeValueAsync
     *
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $value Input value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  bool $is_converted True: converted to other data type if appropriate. (optional, default to false)
     * @param  bool $set_style True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeValueAsync($name, $sheet_name, $value, $range = null, $is_converted = 'false', $set_style = 'false', $folder = null, $storage_name = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangeValueAsyncWithHttpInfo($name, $sheet_name, $value, $range, $is_converted, $set_style, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangeValueAsyncWithHttpInfo
     *
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $value Input value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  bool $is_converted True: converted to other data type if appropriate. (optional, default to false)
     * @param  bool $set_style True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangeValueAsyncWithHttpInfo($name, $sheet_name, $value, $range = null, $is_converted = 'false', $set_style = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangeValueRequest($name, $sheet_name, $value, $range, $is_converted, $set_style, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRangeValue'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $value Input value (required)
     * @param  \Aspose\Cells\Cloud\Model\Range $range range in worksheet (optional)
     * @param  bool $is_converted True: converted to other data type if appropriate. (optional, default to false)
     * @param  bool $set_style True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsRangesPostWorksheetCellsRangeValueRequest($name, $sheet_name, $value, $range = null, $is_converted = 'false', $set_style = 'false', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRangeValue'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRangeValue'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling cellsRangesPostWorksheetCellsRangeValue'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges/value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($is_converted !== null) {
            $queryParams['isConverted'] = ObjectSerializer::toQueryValue($is_converted);
        }
        // query params
        if ($set_style !== null) {
            $queryParams['setStyle'] = ObjectSerializer::toQueryValue($set_style);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($range)) {
            $_tempBody = $range;
            $_tempBodyName =str_replace('_','', 'range');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsRangesPostWorksheetCellsRangeValue'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRanges
     *
     * copy range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeCopyRequest $range_operate copydata,copystyle,copyto,copyvalue (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRanges($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsRangesPostWorksheetCellsRangesWithHttpInfo($name, $sheet_name, $range_operate, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangesWithHttpInfo
     *
     * copy range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeCopyRequest $range_operate copydata,copystyle,copyto,copyvalue (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangesWithHttpInfo($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangesRequest($name, $sheet_name, $range_operate, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangesAsync
     *
     * copy range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeCopyRequest $range_operate copydata,copystyle,copyto,copyvalue (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangesAsync($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        return $this->cellsRangesPostWorksheetCellsRangesAsyncWithHttpInfo($name, $sheet_name, $range_operate, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPostWorksheetCellsRangesAsyncWithHttpInfo
     *
     * copy range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeCopyRequest $range_operate copydata,copystyle,copyto,copyvalue (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPostWorksheetCellsRangesAsyncWithHttpInfo($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPostWorksheetCellsRangesRequest($name, $sheet_name, $range_operate, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPostWorksheetCellsRanges'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  \Aspose\Cells\Cloud\Model\RangeCopyRequest $range_operate copydata,copystyle,copyto,copyvalue (optional)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsRangesPostWorksheetCellsRangesRequest($name, $sheet_name, $range_operate = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPostWorksheetCellsRanges'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPostWorksheetCellsRanges'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($range_operate)) {
            $_tempBody = $range_operate;
            $_tempBodyName =str_replace('_','', 'range_operate');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsRangesPostWorksheetCellsRanges'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsRangesPutWorksheetCellsRange
     *
     * Insert range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $range range (required)
     * @param  string $shift Represent the shift options when deleting a range of cells. (Right,Down) (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPutWorksheetCellsRange($name, $sheet_name, $range, $shift, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsRangesPutWorksheetCellsRangeWithHttpInfo($name, $sheet_name, $range, $shift, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsRangesPutWorksheetCellsRangeWithHttpInfo
     *
     * Insert range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $range range (required)
     * @param  string $shift Represent the shift options when deleting a range of cells. (Right,Down) (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPutWorksheetCellsRangeWithHttpInfo($name, $sheet_name, $range, $shift, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPutWorksheetCellsRangeRequest($name, $sheet_name, $range, $shift, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsRangesPutWorksheetCellsRangeAsync
     *
     * Insert range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $range range (required)
     * @param  string $shift Represent the shift options when deleting a range of cells. (Right,Down) (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPutWorksheetCellsRangeAsync($name, $sheet_name, $range, $shift, $folder = null, $storage_name = null)
    {
        return $this->cellsRangesPutWorksheetCellsRangeAsyncWithHttpInfo($name, $sheet_name, $range, $shift, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsRangesPutWorksheetCellsRangeAsyncWithHttpInfo
     *
     * Insert range in the worksheet
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $range range (required)
     * @param  string $shift Represent the shift options when deleting a range of cells. (Right,Down) (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsRangesPutWorksheetCellsRangeAsyncWithHttpInfo($name, $sheet_name, $range, $shift, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsRangesPutWorksheetCellsRangeRequest($name, $sheet_name, $range, $shift, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsRangesPutWorksheetCellsRange'
     *
     * @param  string $name workbook name (required)
     * @param  string $sheet_name worksheet name (required)
     * @param  string $range range (required)
     * @param  string $shift Represent the shift options when deleting a range of cells. (Right,Down) (required)
     * @param  string $folder Workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsRangesPutWorksheetCellsRangeRequest($name, $sheet_name, $range, $shift, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsRangesPutWorksheetCellsRange'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsRangesPutWorksheetCellsRange'
            );
        }
        // verify the required parameter 'range' is set
        if ($range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range when calling cellsRangesPutWorksheetCellsRange'
            );
        }
        // verify the required parameter 'shift' is set
        if ($shift === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift when calling cellsRangesPutWorksheetCellsRange'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/ranges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($shift !== null) {
            $queryParams['shift'] = ObjectSerializer::toQueryValue($shift);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsRangesPutWorksheetCellsRange'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsSaveAsPostDocumentSaveAs
     *
     * Convert document and save result to storage.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\SaveOptions $save_options Save options. (optional)
     * @param  string $newfilename The new file name. (optional)
     * @param  bool $is_auto_fit_rows Autofit rows. (optional, default to false)
     * @param  bool $is_auto_fit_columns Autofit columns. (optional, default to false)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaveResponse
     */
     /**
     * @deprecated 
     */
    public function cellsSaveAsPostDocumentSaveAs($name, $save_options = null, $newfilename = null, $is_auto_fit_rows = 'false', $is_auto_fit_columns = 'false', $folder = null, $storage_name = null, $out_storage_name = null, $extended_query_parameters = null,$check_excel_restriction='true')
    {
        $this->checkAccessToken();
        list($response) = $this->cellsSaveAsPostDocumentSaveAsWithHttpInfo($name, $save_options, $newfilename, $is_auto_fit_rows, $is_auto_fit_columns, $folder, $storage_name, $out_storage_name, $extended_query_parameters ,$check_excel_restriction);
        return $response;
    }

    /**
     * Operation cellsSaveAsPostDocumentSaveAsWithHttpInfo
     *
     * Convert document and save result to storage.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\SaveOptions $save_options Save options. (optional)
     * @param  string $newfilename The new file name. (optional)
     * @param  bool $is_auto_fit_rows Autofit rows. (optional, default to false)
     * @param  bool $is_auto_fit_columns Autofit columns. (optional, default to false)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaveResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsSaveAsPostDocumentSaveAsWithHttpInfo($name, $save_options = null, $newfilename = null, $is_auto_fit_rows = 'false', $is_auto_fit_columns = 'false', $folder = null, $storage_name = null, $out_storage_name = null, $extended_query_parameters = null,$check_excel_restriction='true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaveResponse';
        $request = $this->cellsSaveAsPostDocumentSaveAsRequest($name, $save_options, $newfilename, $is_auto_fit_rows, $is_auto_fit_columns, $folder, $storage_name, $out_storage_name, $extended_query_parameters,$check_excel_restriction );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaveResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsSaveAsPostDocumentSaveAsAsync
     *
     * Convert document and save result to storage.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\SaveOptions $save_options Save options. (optional)
     * @param  string $newfilename The new file name. (optional)
     * @param  bool $is_auto_fit_rows Autofit rows. (optional, default to false)
     * @param  bool $is_auto_fit_columns Autofit columns. (optional, default to false)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSaveAsPostDocumentSaveAsAsync($name, $save_options = null, $newfilename = null, $is_auto_fit_rows = 'false', $is_auto_fit_columns = 'false', $folder = null, $storage_name = null, $out_storage_name = null, $extended_query_parameters = null,$check_excel_restriction='true')
    {
        return $this->cellsSaveAsPostDocumentSaveAsAsyncWithHttpInfo($name, $save_options, $newfilename, $is_auto_fit_rows, $is_auto_fit_columns, $folder, $storage_name, $out_storage_name, $extended_query_parameters,$check_excel_restriction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsSaveAsPostDocumentSaveAsAsyncWithHttpInfo
     *
     * Convert document and save result to storage.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\SaveOptions $save_options Save options. (optional)
     * @param  string $newfilename The new file name. (optional)
     * @param  bool $is_auto_fit_rows Autofit rows. (optional, default to false)
     * @param  bool $is_auto_fit_columns Autofit columns. (optional, default to false)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSaveAsPostDocumentSaveAsAsyncWithHttpInfo($name, $save_options = null, $newfilename = null, $is_auto_fit_rows = 'false', $is_auto_fit_columns = 'false', $folder = null, $storage_name = null, $out_storage_name = null, $extended_query_parameters = null,$check_excel_restriction ='true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaveResponse';
        $request = $this->cellsSaveAsPostDocumentSaveAsRequest($name, $save_options, $newfilename, $is_auto_fit_rows, $is_auto_fit_columns, $folder, $storage_name, $out_storage_name, $extended_query_parameters,$check_excel_restriction );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsSaveAsPostDocumentSaveAs'
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\SaveOptions $save_options Save options. (optional)
     * @param  string $newfilename The new file name. (optional)
     * @param  bool $is_auto_fit_rows Autofit rows. (optional, default to false)
     * @param  bool $is_auto_fit_columns Autofit columns. (optional, default to false)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsSaveAsPostDocumentSaveAsRequest($name, $save_options = null, $newfilename = null, $is_auto_fit_rows = 'false', $is_auto_fit_columns = 'false', $folder = null, $storage_name = null, $out_storage_name = null, $extended_query_parameters = null,$check_excel_restriction='true')
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsSaveAsPostDocumentSaveAs'
            );
        }

        $resourcePath = '/cells/{name}/SaveAs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($newfilename !== null) {
            $queryParams['newfilename'] = ObjectSerializer::toQueryValue($newfilename);
        }
        // query params
        if ($is_auto_fit_rows !== null) {
            $queryParams['isAutoFitRows'] = ObjectSerializer::toQueryValue($is_auto_fit_rows);
        }
        // query params
        if ($is_auto_fit_columns !== null) {
            $queryParams['isAutoFitColumns'] = ObjectSerializer::toQueryValue($is_auto_fit_columns);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }
        // query params
        if ($out_storage_name !== null) {
            $queryParams['outStorageName'] = ObjectSerializer::toQueryValue($out_storage_name);
        }
        if($extended_query_parameters !== null){
            foreach($extended_query_parameters as $key => $value) {
                $queryParams[$key] = ObjectSerializer::toQueryValue($value);
            }
        }
        // query params
        if ($check_excel_restriction !== null) {
            $queryParams['checkExcelRestriction'] = ObjectSerializer::toQueryValue($check_excel_restriction);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($save_options)) {
            $_tempBody = $save_options;
            $_tempBodyName =str_replace('_','', 'save_options');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsSaveAsPostDocumentSaveAs'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsShapesDeleteWorksheetShape
     *
     * Delete a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsShapesDeleteWorksheetShape($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsShapesDeleteWorksheetShapeWithHttpInfo($name, $sheet_name, $shapeindex, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapeWithHttpInfo
     *
     * Delete a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsShapesDeleteWorksheetShapeWithHttpInfo($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsShapesDeleteWorksheetShapeRequest($name, $sheet_name, $shapeindex, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapeAsync
     *
     * Delete a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesDeleteWorksheetShapeAsync($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        return $this->cellsShapesDeleteWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapeAsyncWithHttpInfo
     *
     * Delete a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesDeleteWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsShapesDeleteWorksheetShapeRequest($name, $sheet_name, $shapeindex, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesDeleteWorksheetShape'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsShapesDeleteWorksheetShapeRequest($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesDeleteWorksheetShape'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesDeleteWorksheetShape'
            );
        }
        // verify the required parameter 'shapeindex' is set
        if ($shapeindex === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shapeindex when calling cellsShapesDeleteWorksheetShape'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($shapeindex !== null) {
            $resourcePath = str_replace(
                '{' . 'shapeindex' . '}',
                ObjectSerializer::toPathValue($shapeindex),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsShapesDeleteWorksheetShape'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapes
     *
     * delete all shapes in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsShapesDeleteWorksheetShapes($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsShapesDeleteWorksheetShapesWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapesWithHttpInfo
     *
     * delete all shapes in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsShapesDeleteWorksheetShapesWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsShapesDeleteWorksheetShapesRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapesAsync
     *
     * delete all shapes in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesDeleteWorksheetShapesAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsShapesDeleteWorksheetShapesAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapesAsyncWithHttpInfo
     *
     * delete all shapes in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesDeleteWorksheetShapesAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsShapesDeleteWorksheetShapesRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesDeleteWorksheetShapes'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsShapesDeleteWorksheetShapesRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesDeleteWorksheetShapes'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesDeleteWorksheetShapes'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsShapesDeleteWorksheetShapes'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsShapesGetWorksheetShape
     *
     * Get worksheet shape
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ShapeResponse
     */
     /**
     * @deprecated 
     */
    public function cellsShapesGetWorksheetShape($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsShapesGetWorksheetShapeWithHttpInfo($name, $sheet_name, $shapeindex, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsShapesGetWorksheetShapeWithHttpInfo
     *
     * Get worksheet shape
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ShapeResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsShapesGetWorksheetShapeWithHttpInfo($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ShapeResponse';
        $request = $this->cellsShapesGetWorksheetShapeRequest($name, $sheet_name, $shapeindex, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ShapeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesGetWorksheetShapeAsync
     *
     * Get worksheet shape
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesGetWorksheetShapeAsync($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        return $this->cellsShapesGetWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesGetWorksheetShapeAsyncWithHttpInfo
     *
     * Get worksheet shape
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesGetWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ShapeResponse';
        $request = $this->cellsShapesGetWorksheetShapeRequest($name, $sheet_name, $shapeindex, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesGetWorksheetShape'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsShapesGetWorksheetShapeRequest($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesGetWorksheetShape'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesGetWorksheetShape'
            );
        }
        // verify the required parameter 'shapeindex' is set
        if ($shapeindex === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shapeindex when calling cellsShapesGetWorksheetShape'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($shapeindex !== null) {
            $resourcePath = str_replace(
                '{' . 'shapeindex' . '}',
                ObjectSerializer::toPathValue($shapeindex),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsShapesGetWorksheetShape'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsShapesGetWorksheetShapes
     *
     * Get worksheet shapes
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ShapesResponse
     */
     /**
     * @deprecated 
     */
    public function cellsShapesGetWorksheetShapes($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsShapesGetWorksheetShapesWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsShapesGetWorksheetShapesWithHttpInfo
     *
     * Get worksheet shapes
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ShapesResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsShapesGetWorksheetShapesWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ShapesResponse';
        $request = $this->cellsShapesGetWorksheetShapesRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ShapesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesGetWorksheetShapesAsync
     *
     * Get worksheet shapes
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesGetWorksheetShapesAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsShapesGetWorksheetShapesAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesGetWorksheetShapesAsyncWithHttpInfo
     *
     * Get worksheet shapes
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesGetWorksheetShapesAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ShapesResponse';
        $request = $this->cellsShapesGetWorksheetShapesRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesGetWorksheetShapes'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsShapesGetWorksheetShapesRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesGetWorksheetShapes'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesGetWorksheetShapes'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsShapesGetWorksheetShapes'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsShapesPostWorksheetGroupShape
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int[] $list_shape group shape indexs in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPostWorksheetGroupShape($name, $sheet_name, $list_shape, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsShapesPostWorksheetGroupShapeWithHttpInfo($name, $sheet_name, $list_shape, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsShapesPostWorksheetGroupShapeWithHttpInfo
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int[] $list_shape group shape indexs in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPostWorksheetGroupShapeWithHttpInfo($name, $sheet_name, $list_shape, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsShapesPostWorksheetGroupShapeRequest($name, $sheet_name, $list_shape, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesPostWorksheetGroupShapeAsync
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int[] $list_shape group shape indexs in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPostWorksheetGroupShapeAsync($name, $sheet_name, $list_shape, $folder = null, $storage_name = null)
    {
        return $this->cellsShapesPostWorksheetGroupShapeAsyncWithHttpInfo($name, $sheet_name, $list_shape, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesPostWorksheetGroupShapeAsyncWithHttpInfo
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int[] $list_shape group shape indexs in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPostWorksheetGroupShapeAsyncWithHttpInfo($name, $sheet_name, $list_shape, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsShapesPostWorksheetGroupShapeRequest($name, $sheet_name, $list_shape, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesPostWorksheetGroupShape'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int[] $list_shape group shape indexs in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsShapesPostWorksheetGroupShapeRequest($name, $sheet_name, $list_shape, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesPostWorksheetGroupShape'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesPostWorksheetGroupShape'
            );
        }
        // verify the required parameter 'list_shape' is set
        if ($list_shape === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_shape when calling cellsShapesPostWorksheetGroupShape'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes/group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($list_shape)) {
            $_tempBody = $list_shape;
            $_tempBodyName =str_replace('_','', 'list_shape');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsShapesPostWorksheetGroupShape'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsShapesPostWorksheetShape
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $dto dto (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPostWorksheetShape($name, $sheet_name, $shapeindex, $dto = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsShapesPostWorksheetShapeWithHttpInfo($name, $sheet_name, $shapeindex, $dto, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsShapesPostWorksheetShapeWithHttpInfo
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $dto (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPostWorksheetShapeWithHttpInfo($name, $sheet_name, $shapeindex, $dto = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsShapesPostWorksheetShapeRequest($name, $sheet_name, $shapeindex, $dto, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesPostWorksheetShapeAsync
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $dto (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPostWorksheetShapeAsync($name, $sheet_name, $shapeindex, $dto = null, $folder = null, $storage_name = null)
    {
        return $this->cellsShapesPostWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $dto, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesPostWorksheetShapeAsyncWithHttpInfo
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $dto (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPostWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $dto = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsShapesPostWorksheetShapeRequest($name, $sheet_name, $shapeindex, $dto, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesPostWorksheetShape'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $dto (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsShapesPostWorksheetShapeRequest($name, $sheet_name, $shapeindex, $dto = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesPostWorksheetShape'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesPostWorksheetShape'
            );
        }
        // verify the required parameter 'shapeindex' is set
        if ($shapeindex === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shapeindex when calling cellsShapesPostWorksheetShape'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($shapeindex !== null) {
            $resourcePath = str_replace(
                '{' . 'shapeindex' . '}',
                ObjectSerializer::toPathValue($shapeindex),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($dto)) {
            $_tempBody = $dto;
            $_tempBodyName =str_replace('_','', 'dto');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsShapesPostWorksheetShape'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsShapesPostWorksheetUngroupShape
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPostWorksheetUngroupShape($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsShapesPostWorksheetUngroupShapeWithHttpInfo($name, $sheet_name, $shapeindex, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsShapesPostWorksheetUngroupShapeWithHttpInfo
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPostWorksheetUngroupShapeWithHttpInfo($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsShapesPostWorksheetUngroupShapeRequest($name, $sheet_name, $shapeindex, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesPostWorksheetUngroupShapeAsync
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPostWorksheetUngroupShapeAsync($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        return $this->cellsShapesPostWorksheetUngroupShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesPostWorksheetUngroupShapeAsyncWithHttpInfo
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPostWorksheetUngroupShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsShapesPostWorksheetUngroupShapeRequest($name, $sheet_name, $shapeindex, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesPostWorksheetUngroupShape'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsShapesPostWorksheetUngroupShapeRequest($name, $sheet_name, $shapeindex, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesPostWorksheetUngroupShape'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesPostWorksheetUngroupShape'
            );
        }
        // verify the required parameter 'shapeindex' is set
        if ($shapeindex === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shapeindex when calling cellsShapesPostWorksheetUngroupShape'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}/ungroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($shapeindex !== null) {
            $resourcePath = str_replace(
                '{' . 'shapeindex' . '}',
                ObjectSerializer::toPathValue($shapeindex),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsShapesPostWorksheetUngroupShape'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsShapesPutWorksheetShape
     *
     * Add shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $shape_dto shape_dto (optional)
     * @param  string $drawing_type shape object type (optional)
     * @param  int $upper_left_row Upper left row index. (optional)
     * @param  int $upper_left_column Upper left column index. (optional)
     * @param  int $top Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)
     * @param  int $left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)
     * @param  int $width Represents the height of Spinner, in unit of pixel. (optional)
     * @param  int $height Represents the width of Spinner, in unit of pixel. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPutWorksheetShape($name, $sheet_name, $shape_dto = null, $drawing_type = null, $upper_left_row = null, $upper_left_column = null, $top = null, $left = null, $width = null, $height = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsShapesPutWorksheetShapeWithHttpInfo($name, $sheet_name, $shape_dto, $drawing_type, $upper_left_row, $upper_left_column, $top, $left, $width, $height, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsShapesPutWorksheetShapeWithHttpInfo
     *
     * Add shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $shape_dto (optional)
     * @param  string $drawing_type shape object type (optional)
     * @param  int $upper_left_row Upper left row index. (optional)
     * @param  int $upper_left_column Upper left column index. (optional)
     * @param  int $top Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)
     * @param  int $left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)
     * @param  int $width Represents the height of Spinner, in unit of pixel. (optional)
     * @param  int $height Represents the width of Spinner, in unit of pixel. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPutWorksheetShapeWithHttpInfo($name, $sheet_name, $shape_dto = null, $drawing_type = null, $upper_left_row = null, $upper_left_column = null, $top = null, $left = null, $width = null, $height = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsShapesPutWorksheetShapeRequest($name, $sheet_name, $shape_dto, $drawing_type, $upper_left_row, $upper_left_column, $top, $left, $width, $height, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesPutWorksheetShapeAsync
     *
     * Add shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $shape_dto (optional)
     * @param  string $drawing_type shape object type (optional)
     * @param  int $upper_left_row Upper left row index. (optional)
     * @param  int $upper_left_column Upper left column index. (optional)
     * @param  int $top Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)
     * @param  int $left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)
     * @param  int $width Represents the height of Spinner, in unit of pixel. (optional)
     * @param  int $height Represents the width of Spinner, in unit of pixel. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPutWorksheetShapeAsync($name, $sheet_name, $shape_dto = null, $drawing_type = null, $upper_left_row = null, $upper_left_column = null, $top = null, $left = null, $width = null, $height = null, $folder = null, $storage_name = null)
    {
        return $this->cellsShapesPutWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shape_dto, $drawing_type, $upper_left_row, $upper_left_column, $top, $left, $width, $height, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesPutWorksheetShapeAsyncWithHttpInfo
     *
     * Add shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $shape_dto (optional)
     * @param  string $drawing_type shape object type (optional)
     * @param  int $upper_left_row Upper left row index. (optional)
     * @param  int $upper_left_column Upper left column index. (optional)
     * @param  int $top Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)
     * @param  int $left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)
     * @param  int $width Represents the height of Spinner, in unit of pixel. (optional)
     * @param  int $height Represents the width of Spinner, in unit of pixel. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsShapesPutWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shape_dto = null, $drawing_type = null, $upper_left_row = null, $upper_left_column = null, $top = null, $left = null, $width = null, $height = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsShapesPutWorksheetShapeRequest($name, $sheet_name, $shape_dto, $drawing_type, $upper_left_row, $upper_left_column, $top, $left, $width, $height, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesPutWorksheetShape'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $shape_dto (optional)
     * @param  string $drawing_type shape object type (optional)
     * @param  int $upper_left_row Upper left row index. (optional)
     * @param  int $upper_left_column Upper left column index. (optional)
     * @param  int $top Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)
     * @param  int $left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)
     * @param  int $width Represents the height of Spinner, in unit of pixel. (optional)
     * @param  int $height Represents the width of Spinner, in unit of pixel. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsShapesPutWorksheetShapeRequest($name, $sheet_name, $shape_dto = null, $drawing_type = null, $upper_left_row = null, $upper_left_column = null, $top = null, $left = null, $width = null, $height = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesPutWorksheetShape'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesPutWorksheetShape'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($drawing_type !== null) {
            $queryParams['drawingType'] = ObjectSerializer::toQueryValue($drawing_type);
        }
        // query params
        if ($upper_left_row !== null) {
            $queryParams['upperLeftRow'] = ObjectSerializer::toQueryValue($upper_left_row);
        }
        // query params
        if ($upper_left_column !== null) {
            $queryParams['upperLeftColumn'] = ObjectSerializer::toQueryValue($upper_left_column);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($left !== null) {
            $queryParams['left'] = ObjectSerializer::toQueryValue($left);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($shape_dto)) {
            $_tempBody = $shape_dto;
            $_tempBodyName =str_replace('_','', 'shape_dto');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsShapesPutWorksheetShape'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsSparklineGroupsDeleteWorksheetSparklineGroup
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $sparkline_group_index sparkline_group_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsDeleteWorksheetSparklineGroup($name, $sheet_name, $sparkline_group_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsSparklineGroupsDeleteWorksheetSparklineGroupWithHttpInfo($name, $sheet_name, $sparkline_group_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsSparklineGroupsDeleteWorksheetSparklineGroupWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $sparkline_group_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsDeleteWorksheetSparklineGroupWithHttpInfo($name, $sheet_name, $sparkline_group_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsSparklineGroupsDeleteWorksheetSparklineGroupRequest($name, $sheet_name, $sparkline_group_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsSparklineGroupsDeleteWorksheetSparklineGroupAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $sparkline_group_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsDeleteWorksheetSparklineGroupAsync($name, $sheet_name, $sparkline_group_index, $folder = null, $storage_name = null)
    {
        return $this->cellsSparklineGroupsDeleteWorksheetSparklineGroupAsyncWithHttpInfo($name, $sheet_name, $sparkline_group_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsSparklineGroupsDeleteWorksheetSparklineGroupAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $sparkline_group_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsDeleteWorksheetSparklineGroupAsyncWithHttpInfo($name, $sheet_name, $sparkline_group_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsSparklineGroupsDeleteWorksheetSparklineGroupRequest($name, $sheet_name, $sparkline_group_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsSparklineGroupsDeleteWorksheetSparklineGroup'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $sparkline_group_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsSparklineGroupsDeleteWorksheetSparklineGroupRequest($name, $sheet_name, $sparkline_group_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsSparklineGroupsDeleteWorksheetSparklineGroup'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsSparklineGroupsDeleteWorksheetSparklineGroup'
            );
        }
        // verify the required parameter 'sparkline_group_index' is set
        if ($sparkline_group_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sparkline_group_index when calling cellsSparklineGroupsDeleteWorksheetSparklineGroup'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/sparklinegroups/{sparklineGroupIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($sparkline_group_index !== null) {
            $resourcePath = str_replace(
                '{' . 'sparklineGroupIndex' . '}',
                ObjectSerializer::toPathValue($sparkline_group_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsSparklineGroupsDeleteWorksheetSparklineGroup'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsSparklineGroupsDeleteWorksheetSparklineGroups
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsDeleteWorksheetSparklineGroups($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsSparklineGroupsDeleteWorksheetSparklineGroupsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsSparklineGroupsDeleteWorksheetSparklineGroupsWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsDeleteWorksheetSparklineGroupsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsSparklineGroupsDeleteWorksheetSparklineGroupsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsSparklineGroupsDeleteWorksheetSparklineGroupsAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsDeleteWorksheetSparklineGroupsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsSparklineGroupsDeleteWorksheetSparklineGroupsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsSparklineGroupsDeleteWorksheetSparklineGroupsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsDeleteWorksheetSparklineGroupsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsSparklineGroupsDeleteWorksheetSparklineGroupsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsSparklineGroupsDeleteWorksheetSparklineGroups'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsSparklineGroupsDeleteWorksheetSparklineGroupsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsSparklineGroupsDeleteWorksheetSparklineGroups'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsSparklineGroupsDeleteWorksheetSparklineGroups'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/sparklinegroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsSparklineGroupsDeleteWorksheetSparklineGroups'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsSparklineGroupsGetWorksheetSparklineGroup
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $sparkline_group_index sparkline_group_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SparklineGroupResponse
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsGetWorksheetSparklineGroup($name, $sheet_name, $sparkline_group_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsSparklineGroupsGetWorksheetSparklineGroupWithHttpInfo($name, $sheet_name, $sparkline_group_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsSparklineGroupsGetWorksheetSparklineGroupWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $sparkline_group_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SparklineGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsGetWorksheetSparklineGroupWithHttpInfo($name, $sheet_name, $sparkline_group_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SparklineGroupResponse';
        $request = $this->cellsSparklineGroupsGetWorksheetSparklineGroupRequest($name, $sheet_name, $sparkline_group_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SparklineGroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsSparklineGroupsGetWorksheetSparklineGroupAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $sparkline_group_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsGetWorksheetSparklineGroupAsync($name, $sheet_name, $sparkline_group_index, $folder = null, $storage_name = null)
    {
        return $this->cellsSparklineGroupsGetWorksheetSparklineGroupAsyncWithHttpInfo($name, $sheet_name, $sparkline_group_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsSparklineGroupsGetWorksheetSparklineGroupAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $sparkline_group_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsGetWorksheetSparklineGroupAsyncWithHttpInfo($name, $sheet_name, $sparkline_group_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SparklineGroupResponse';
        $request = $this->cellsSparklineGroupsGetWorksheetSparklineGroupRequest($name, $sheet_name, $sparkline_group_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsSparklineGroupsGetWorksheetSparklineGroup'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $sparkline_group_index (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsSparklineGroupsGetWorksheetSparklineGroupRequest($name, $sheet_name, $sparkline_group_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsSparklineGroupsGetWorksheetSparklineGroup'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsSparklineGroupsGetWorksheetSparklineGroup'
            );
        }
        // verify the required parameter 'sparkline_group_index' is set
        if ($sparkline_group_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sparkline_group_index when calling cellsSparklineGroupsGetWorksheetSparklineGroup'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/sparklinegroups/{sparklineGroupIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($sparkline_group_index !== null) {
            $resourcePath = str_replace(
                '{' . 'sparklineGroupIndex' . '}',
                ObjectSerializer::toPathValue($sparkline_group_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsSparklineGroupsGetWorksheetSparklineGroup'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsSparklineGroupsGetWorksheetSparklineGroups
     *
     * Get worksheet charts description.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SparklineGroupsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsGetWorksheetSparklineGroups($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsSparklineGroupsGetWorksheetSparklineGroupsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsSparklineGroupsGetWorksheetSparklineGroupsWithHttpInfo
     *
     * Get worksheet charts description.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SparklineGroupsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsGetWorksheetSparklineGroupsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SparklineGroupsResponse';
        $request = $this->cellsSparklineGroupsGetWorksheetSparklineGroupsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SparklineGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsSparklineGroupsGetWorksheetSparklineGroupsAsync
     *
     * Get worksheet charts description.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsGetWorksheetSparklineGroupsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsSparklineGroupsGetWorksheetSparklineGroupsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsSparklineGroupsGetWorksheetSparklineGroupsAsyncWithHttpInfo
     *
     * Get worksheet charts description.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsGetWorksheetSparklineGroupsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SparklineGroupsResponse';
        $request = $this->cellsSparklineGroupsGetWorksheetSparklineGroupsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsSparklineGroupsGetWorksheetSparklineGroups'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsSparklineGroupsGetWorksheetSparklineGroupsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsSparklineGroupsGetWorksheetSparklineGroups'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsSparklineGroupsGetWorksheetSparklineGroups'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/sparklinegroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsSparklineGroupsGetWorksheetSparklineGroups'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsSparklineGroupsPostWorksheetSparklineGroup
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $sparkline_group_index sparkline_group_index (required)
     * @param  \Aspose\Cells\Cloud\Model\SparklineGroup $sparkline_group sparkline_group (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsPostWorksheetSparklineGroup($name, $sheet_name, $sparkline_group_index, $sparkline_group, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsSparklineGroupsPostWorksheetSparklineGroupWithHttpInfo($name, $sheet_name, $sparkline_group_index, $sparkline_group, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsSparklineGroupsPostWorksheetSparklineGroupWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $sparkline_group_index (required)
     * @param  \Aspose\Cells\Cloud\Model\SparklineGroup $sparkline_group (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsPostWorksheetSparklineGroupWithHttpInfo($name, $sheet_name, $sparkline_group_index, $sparkline_group, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsSparklineGroupsPostWorksheetSparklineGroupRequest($name, $sheet_name, $sparkline_group_index, $sparkline_group, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsSparklineGroupsPostWorksheetSparklineGroupAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $sparkline_group_index (required)
     * @param  \Aspose\Cells\Cloud\Model\SparklineGroup $sparkline_group (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsPostWorksheetSparklineGroupAsync($name, $sheet_name, $sparkline_group_index, $sparkline_group, $folder = null, $storage_name = null)
    {
        return $this->cellsSparklineGroupsPostWorksheetSparklineGroupAsyncWithHttpInfo($name, $sheet_name, $sparkline_group_index, $sparkline_group, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsSparklineGroupsPostWorksheetSparklineGroupAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $sparkline_group_index (required)
     * @param  \Aspose\Cells\Cloud\Model\SparklineGroup $sparkline_group (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsPostWorksheetSparklineGroupAsyncWithHttpInfo($name, $sheet_name, $sparkline_group_index, $sparkline_group, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsSparklineGroupsPostWorksheetSparklineGroupRequest($name, $sheet_name, $sparkline_group_index, $sparkline_group, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsSparklineGroupsPostWorksheetSparklineGroup'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $sparkline_group_index (required)
     * @param  \Aspose\Cells\Cloud\Model\SparklineGroup $sparkline_group (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsSparklineGroupsPostWorksheetSparklineGroupRequest($name, $sheet_name, $sparkline_group_index, $sparkline_group, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsSparklineGroupsPostWorksheetSparklineGroup'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsSparklineGroupsPostWorksheetSparklineGroup'
            );
        }
        // verify the required parameter 'sparkline_group_index' is set
        if ($sparkline_group_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sparkline_group_index when calling cellsSparklineGroupsPostWorksheetSparklineGroup'
            );
        }
        // verify the required parameter 'sparkline_group' is set
        if ($sparkline_group === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sparkline_group when calling cellsSparklineGroupsPostWorksheetSparklineGroup'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/sparklinegroups/{sparklineGroupIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($sparkline_group_index !== null) {
            $resourcePath = str_replace(
                '{' . 'sparklineGroupIndex' . '}',
                ObjectSerializer::toPathValue($sparkline_group_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($sparkline_group)) {
            $_tempBody = $sparkline_group;
            $_tempBodyName =str_replace('_','', 'sparkline_group');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsSparklineGroupsPostWorksheetSparklineGroup'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsSparklineGroupsPutWorksheetSparklineGroup
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $type type (required)
     * @param  string $data_range data_range (required)
     * @param  bool $is_vertical is_vertical (required)
     * @param  string $location_range location_range (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsPutWorksheetSparklineGroup($name, $sheet_name, $type, $data_range, $is_vertical, $location_range, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsSparklineGroupsPutWorksheetSparklineGroupWithHttpInfo($name, $sheet_name, $type, $data_range, $is_vertical, $location_range, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsSparklineGroupsPutWorksheetSparklineGroupWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $type (required)
     * @param  string $data_range (required)
     * @param  bool $is_vertical (required)
     * @param  string $location_range (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsPutWorksheetSparklineGroupWithHttpInfo($name, $sheet_name, $type, $data_range, $is_vertical, $location_range, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsSparklineGroupsPutWorksheetSparklineGroupRequest($name, $sheet_name, $type, $data_range, $is_vertical, $location_range, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsSparklineGroupsPutWorksheetSparklineGroupAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $type (required)
     * @param  string $data_range (required)
     * @param  bool $is_vertical (required)
     * @param  string $location_range (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsPutWorksheetSparklineGroupAsync($name, $sheet_name, $type, $data_range, $is_vertical, $location_range, $folder = null, $storage_name = null)
    {
        return $this->cellsSparklineGroupsPutWorksheetSparklineGroupAsyncWithHttpInfo($name, $sheet_name, $type, $data_range, $is_vertical, $location_range, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsSparklineGroupsPutWorksheetSparklineGroupAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $type (required)
     * @param  string $data_range (required)
     * @param  bool $is_vertical (required)
     * @param  string $location_range (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsSparklineGroupsPutWorksheetSparklineGroupAsyncWithHttpInfo($name, $sheet_name, $type, $data_range, $is_vertical, $location_range, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsSparklineGroupsPutWorksheetSparklineGroupRequest($name, $sheet_name, $type, $data_range, $is_vertical, $location_range, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsSparklineGroupsPutWorksheetSparklineGroup'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $type (required)
     * @param  string $data_range (required)
     * @param  bool $is_vertical (required)
     * @param  string $location_range (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsSparklineGroupsPutWorksheetSparklineGroupRequest($name, $sheet_name, $type, $data_range, $is_vertical, $location_range, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsSparklineGroupsPutWorksheetSparklineGroup'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsSparklineGroupsPutWorksheetSparklineGroup'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling cellsSparklineGroupsPutWorksheetSparklineGroup'
            );
        }
        // verify the required parameter 'data_range' is set
        if ($data_range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_range when calling cellsSparklineGroupsPutWorksheetSparklineGroup'
            );
        }
        // verify the required parameter 'is_vertical' is set
        if ($is_vertical === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_vertical when calling cellsSparklineGroupsPutWorksheetSparklineGroup'
            );
        }
        // verify the required parameter 'location_range' is set
        if ($location_range === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_range when calling cellsSparklineGroupsPutWorksheetSparklineGroup'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/sparklinegroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($data_range !== null) {
            $queryParams['dataRange'] = ObjectSerializer::toQueryValue($data_range);
        }
        // query params
        if ($is_vertical !== null) {
            $queryParams['isVertical'] = ObjectSerializer::toQueryValue($is_vertical);
        }
        // query params
        if ($location_range !== null) {
            $queryParams['locationRange'] = ObjectSerializer::toQueryValue($location_range);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsSparklineGroupsPutWorksheetSparklineGroup'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsTaskPostRunTask
     *
     * Run tasks
     *
     * @param  \Aspose\Cells\Cloud\Model\TaskData $task_data task_data (required)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
     /**
     * @deprecated 
     */
    public function cellsTaskPostRunTask($task_data)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsTaskPostRunTaskWithHttpInfo($task_data);
        return $response;
    }

    /**
     * Operation cellsTaskPostRunTaskWithHttpInfo
     *
     * Run tasks
     *
     * @param  \Aspose\Cells\Cloud\Model\TaskData $task_data (required)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsTaskPostRunTaskWithHttpInfo($task_data)
    {
        $returnType = 'object';
        $request = $this->cellsTaskPostRunTaskRequest($task_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsTaskPostRunTaskAsync
     *
     * Run tasks
     *
     * @param  \Aspose\Cells\Cloud\Model\TaskData $task_data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsTaskPostRunTaskAsync($task_data)
    {
        return $this->cellsTaskPostRunTaskAsyncWithHttpInfo($task_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsTaskPostRunTaskAsyncWithHttpInfo
     *
     * Run tasks
     *
     * @param  \Aspose\Cells\Cloud\Model\TaskData $task_data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsTaskPostRunTaskAsyncWithHttpInfo($task_data)
    {
        $returnType = 'object';
        $request = $this->cellsTaskPostRunTaskRequest($task_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsTaskPostRunTask'
     *
     * @param  \Aspose\Cells\Cloud\Model\TaskData $task_data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsTaskPostRunTaskRequest($task_data)
    {
        // verify the required parameter 'task_data' is set
        if ($task_data === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_data when calling cellsTaskPostRunTask'
            );
        }

        $resourcePath = '/cells/task/runtask';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($task_data)) {
            $_tempBody = $task_data;
            $_tempBodyName =str_replace('_','', 'task_data');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsTaskPostRunTask'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookDeleteDecryptDocument
     *
     * Decrypt document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookEncryptionRequest $encryption Encryption settings, only password can be specified. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteDecryptDocument($name, $encryption = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookDeleteDecryptDocumentWithHttpInfo($name, $encryption, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookDeleteDecryptDocumentWithHttpInfo
     *
     * Decrypt document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookEncryptionRequest $encryption Encryption settings, only password can be specified. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteDecryptDocumentWithHttpInfo($name, $encryption = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookDeleteDecryptDocumentRequest($name, $encryption, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookDeleteDecryptDocumentAsync
     *
     * Decrypt document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookEncryptionRequest $encryption Encryption settings, only password can be specified. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteDecryptDocumentAsync($name, $encryption = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookDeleteDecryptDocumentAsyncWithHttpInfo($name, $encryption, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookDeleteDecryptDocumentAsyncWithHttpInfo
     *
     * Decrypt document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookEncryptionRequest $encryption Encryption settings, only password can be specified. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteDecryptDocumentAsyncWithHttpInfo($name, $encryption = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookDeleteDecryptDocumentRequest($name, $encryption, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookDeleteDecryptDocument'
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookEncryptionRequest $encryption Encryption settings, only password can be specified. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookDeleteDecryptDocumentRequest($name, $encryption = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookDeleteDecryptDocument'
            );
        }

        $resourcePath = '/cells/{name}/encryption';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($encryption)) {
            $_tempBody = $encryption;
            $_tempBodyName =str_replace('_','', 'encryption');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookDeleteDecryptDocument'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookDeleteDocumentUnprotectFromChanges
     *
     * Unprotect document from changes.
     *
     * @param  string $name The document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteDocumentUnprotectFromChanges($name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookDeleteDocumentUnprotectFromChangesWithHttpInfo($name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookDeleteDocumentUnprotectFromChangesWithHttpInfo
     *
     * Unprotect document from changes.
     *
     * @param  string $name The document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteDocumentUnprotectFromChangesWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookDeleteDocumentUnprotectFromChangesRequest($name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookDeleteDocumentUnprotectFromChangesAsync
     *
     * Unprotect document from changes.
     *
     * @param  string $name The document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteDocumentUnprotectFromChangesAsync($name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookDeleteDocumentUnprotectFromChangesAsyncWithHttpInfo($name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookDeleteDocumentUnprotectFromChangesAsyncWithHttpInfo
     *
     * Unprotect document from changes.
     *
     * @param  string $name The document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteDocumentUnprotectFromChangesAsyncWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookDeleteDocumentUnprotectFromChangesRequest($name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookDeleteDocumentUnprotectFromChanges'
     *
     * @param  string $name The document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookDeleteDocumentUnprotectFromChangesRequest($name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookDeleteDocumentUnprotectFromChanges'
            );
        }

        $resourcePath = '/cells/{name}/writeProtection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookDeleteDocumentUnprotectFromChanges'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookDeleteUnprotectDocument
     *
     * Unprotect document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookProtectionRequest $protection Protection settings, only password can be specified. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteUnprotectDocument($name, $protection = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookDeleteUnprotectDocumentWithHttpInfo($name, $protection, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookDeleteUnprotectDocumentWithHttpInfo
     *
     * Unprotect document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookProtectionRequest $protection Protection settings, only password can be specified. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteUnprotectDocumentWithHttpInfo($name, $protection = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookDeleteUnprotectDocumentRequest($name, $protection, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookDeleteUnprotectDocumentAsync
     *
     * Unprotect document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookProtectionRequest $protection Protection settings, only password can be specified. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteUnprotectDocumentAsync($name, $protection = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookDeleteUnprotectDocumentAsyncWithHttpInfo($name, $protection, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookDeleteUnprotectDocumentAsyncWithHttpInfo
     *
     * Unprotect document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookProtectionRequest $protection Protection settings, only password can be specified. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteUnprotectDocumentAsyncWithHttpInfo($name, $protection = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookDeleteUnprotectDocumentRequest($name, $protection, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookDeleteUnprotectDocument'
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookProtectionRequest $protection Protection settings, only password can be specified. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookDeleteUnprotectDocumentRequest($name, $protection = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookDeleteUnprotectDocument'
            );
        }

        $resourcePath = '/cells/{name}/protection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($protection)) {
            $_tempBody = $protection;
            $_tempBodyName =str_replace('_','', 'protection');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookDeleteUnprotectDocument'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookDeleteWorkbookBackground
     *
     * Set worksheet background image.
     *
     * @param  string $name name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteWorkbookBackground($name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookDeleteWorkbookBackgroundWithHttpInfo($name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookDeleteWorkbookBackgroundWithHttpInfo
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteWorkbookBackgroundWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookDeleteWorkbookBackgroundRequest($name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookDeleteWorkbookBackgroundAsync
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteWorkbookBackgroundAsync($name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookDeleteWorkbookBackgroundAsyncWithHttpInfo($name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookDeleteWorkbookBackgroundAsyncWithHttpInfo
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteWorkbookBackgroundAsyncWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookDeleteWorkbookBackgroundRequest($name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookDeleteWorkbookBackground'
     *
     * @param  string $name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookDeleteWorkbookBackgroundRequest($name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookDeleteWorkbookBackground'
            );
        }

        $resourcePath = '/cells/{name}/background';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookDeleteWorkbookBackground'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookDeleteWorkbookName
     *
     * Clean workbook's names.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteWorkbookName($name, $name_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookDeleteWorkbookNameWithHttpInfo($name, $name_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookDeleteWorkbookNameWithHttpInfo
     *
     * Clean workbook's names.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteWorkbookNameWithHttpInfo($name, $name_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookDeleteWorkbookNameRequest($name, $name_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookDeleteWorkbookNameAsync
     *
     * Clean workbook's names.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteWorkbookNameAsync($name, $name_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookDeleteWorkbookNameAsyncWithHttpInfo($name, $name_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookDeleteWorkbookNameAsyncWithHttpInfo
     *
     * Clean workbook's names.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteWorkbookNameAsyncWithHttpInfo($name, $name_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookDeleteWorkbookNameRequest($name, $name_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookDeleteWorkbookName'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookDeleteWorkbookNameRequest($name, $name_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookDeleteWorkbookName'
            );
        }
        // verify the required parameter 'name_name' is set
        if ($name_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_name when calling cellsWorkbookDeleteWorkbookName'
            );
        }

        $resourcePath = '/cells/{name}/names/{nameName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($name_name !== null) {
            $resourcePath = str_replace(
                '{' . 'nameName' . '}',
                ObjectSerializer::toPathValue($name_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookDeleteWorkbookName'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookDeleteWorkbookNames
     *
     * Clean workbook's names.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteWorkbookNames($name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookDeleteWorkbookNamesWithHttpInfo($name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookDeleteWorkbookNamesWithHttpInfo
     *
     * Clean workbook's names.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteWorkbookNamesWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookDeleteWorkbookNamesRequest($name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookDeleteWorkbookNamesAsync
     *
     * Clean workbook's names.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteWorkbookNamesAsync($name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookDeleteWorkbookNamesAsyncWithHttpInfo($name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookDeleteWorkbookNamesAsyncWithHttpInfo
     *
     * Clean workbook's names.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookDeleteWorkbookNamesAsyncWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookDeleteWorkbookNamesRequest($name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookDeleteWorkbookNames'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookDeleteWorkbookNamesRequest($name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookDeleteWorkbookNames'
            );
        }

        $resourcePath = '/cells/{name}/names';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookDeleteWorkbookNames'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookGetPageCount
     *
     * Get page count for workbook.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetPageCount($name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookGetPageCountWithHttpInfo($name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookGetPageCountWithHttpInfo
     *
     * Get page count for workbook.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetPageCountWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = 'object';
        $request = $this->cellsWorkbookGetPageCountRequest($name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookGetPageCountAsync
     *
     * Get page count for workbook.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetPageCountAsync($name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookGetPageCountAsyncWithHttpInfo($name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookGetPageCountAsyncWithHttpInfo
     *
     * Get page count for workbook.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetPageCountAsyncWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = 'object';
        $request = $this->cellsWorkbookGetPageCountRequest($name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookGetPageCount'
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookGetPageCountRequest($name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookGetPageCount'
            );
        }

        $resourcePath = '/cells/{name}/pagecount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookGetPageCount'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookGetWorkbook
     *
     * Read workbook info or export.
     *
     * @param  string $name The document name. (required)
     * @param  string $password The document password. (optional)
     * @param  string $format The exported file format. (optional)
     * @param  bool $is_auto_fit Set document rows to be autofit. (optional, default to false)
     * @param  bool $only_save_table Only save table data. (optional, default to false)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_path The document output folder. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbook($name, $password = null, $format = null, $is_auto_fit = 'false', $only_save_table = 'false', $folder = null, $storage_name = null, $out_path = null, $out_storage_name = null, $extended_query_parameters = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookGetWorkbookWithHttpInfo($name, $password, $format, $is_auto_fit, $only_save_table, $folder, $storage_name, $out_path, $out_storage_name, $extended_query_parameters );
        return $response;
    }

    /**
     * Operation cellsWorkbookGetWorkbookWithHttpInfo
     *
     * Read workbook info or export.
     *
     * @param  string $name The document name. (required)
     * @param  string $password The document password. (optional)
     * @param  string $format The exported file format. (optional)
     * @param  bool $is_auto_fit Set document rows to be autofit. (optional, default to false)
     * @param  bool $only_save_table Only save table data. (optional, default to false)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_path The document output folder. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookWithHttpInfo($name, $password = null, $format = null, $is_auto_fit = 'false', $only_save_table = 'false', $folder = null, $storage_name = null, $out_path = null, $out_storage_name = null, $extended_query_parameters = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsWorkbookGetWorkbookRequest($name, $password, $format, $is_auto_fit, $only_save_table, $folder, $storage_name, $out_path, $out_storage_name, $extended_query_parameters );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookGetWorkbookAsync
     *
     * Read workbook info or export.
     *
     * @param  string $name The document name. (required)
     * @param  string $password The document password. (optional)
     * @param  string $format The exported file format. (optional)
     * @param  bool $is_auto_fit Set document rows to be autofit. (optional, default to false)
     * @param  bool $only_save_table Only save table data. (optional, default to false)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_path The document output folder. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookAsync($name, $password = null, $format = null, $is_auto_fit = 'false', $only_save_table = 'false', $folder = null, $storage_name = null, $out_path = null, $out_storage_name = null, $extended_query_parameters = null)
    {
        return $this->cellsWorkbookGetWorkbookAsyncWithHttpInfo($name, $password, $format, $is_auto_fit, $only_save_table, $folder, $storage_name, $out_path, $out_storage_name, $extended_query_parameters )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookGetWorkbookAsyncWithHttpInfo
     *
     * Read workbook info or export.
     *
     * @param  string $name The document name. (required)
     * @param  string $password The document password. (optional)
     * @param  string $format The exported file format. (optional)
     * @param  bool $is_auto_fit Set document rows to be autofit. (optional, default to false)
     * @param  bool $only_save_table Only save table data. (optional, default to false)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_path The document output folder. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookAsyncWithHttpInfo($name, $password = null, $format = null, $is_auto_fit = 'false', $only_save_table = 'false', $folder = null, $storage_name = null, $out_path = null, $out_storage_name = null, $extended_query_parameters = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsWorkbookGetWorkbookRequest($name, $password, $format, $is_auto_fit, $only_save_table, $folder, $storage_name, $out_path, $out_storage_name, $extended_query_parameters );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookGetWorkbook'
     *
     * @param  string $name The document name. (required)
     * @param  string $password The document password. (optional)
     * @param  string $format The exported file format. (optional)
     * @param  bool $is_auto_fit Set document rows to be autofit. (optional, default to false)
     * @param  bool $only_save_table Only save table data. (optional, default to false)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_path The document output folder. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookGetWorkbookRequest($name, $password = null, $format = null, $is_auto_fit = 'false', $only_save_table = 'false', $folder = null, $storage_name = null, $out_path = null, $out_storage_name = null, $extended_query_parameters = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookGetWorkbook'
            );
        }

        $resourcePath = '/cells/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($is_auto_fit !== null) {
            $queryParams['isAutoFit'] = ObjectSerializer::toQueryValue($is_auto_fit);
        }
        // query params
        if ($only_save_table !== null) {
            $queryParams['onlySaveTable'] = ObjectSerializer::toQueryValue($only_save_table);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }
        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($out_path);
        }
        // query params
        if ($out_storage_name !== null) {
            $queryParams['outStorageName'] = ObjectSerializer::toQueryValue($out_storage_name);
        }
        if($extended_query_parameters !== null){
            foreach($extended_query_parameters as $key => $value) {
                $queryParams[$key] = ObjectSerializer::toQueryValue($value);
            }
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookGetWorkbook'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookGetWorkbookDefaultStyle
     *
     * Read workbook default style info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\StyleResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookDefaultStyle($name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookGetWorkbookDefaultStyleWithHttpInfo($name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookGetWorkbookDefaultStyleWithHttpInfo
     *
     * Read workbook default style info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\StyleResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookDefaultStyleWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\StyleResponse';
        $request = $this->cellsWorkbookGetWorkbookDefaultStyleRequest($name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\StyleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookGetWorkbookDefaultStyleAsync
     *
     * Read workbook default style info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookDefaultStyleAsync($name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookGetWorkbookDefaultStyleAsyncWithHttpInfo($name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookGetWorkbookDefaultStyleAsyncWithHttpInfo
     *
     * Read workbook default style info.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookDefaultStyleAsyncWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\StyleResponse';
        $request = $this->cellsWorkbookGetWorkbookDefaultStyleRequest($name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookGetWorkbookDefaultStyle'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookGetWorkbookDefaultStyleRequest($name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookGetWorkbookDefaultStyle'
            );
        }

        $resourcePath = '/cells/{name}/defaultstyle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookGetWorkbookDefaultStyle'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookGetWorkbookName
     *
     * Read workbook's name.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\NameResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookName($name, $name_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookGetWorkbookNameWithHttpInfo($name, $name_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookGetWorkbookNameWithHttpInfo
     *
     * Read workbook's name.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\NameResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookNameWithHttpInfo($name, $name_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\NameResponse';
        $request = $this->cellsWorkbookGetWorkbookNameRequest($name, $name_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\NameResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookGetWorkbookNameAsync
     *
     * Read workbook's name.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookNameAsync($name, $name_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookGetWorkbookNameAsyncWithHttpInfo($name, $name_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookGetWorkbookNameAsyncWithHttpInfo
     *
     * Read workbook's name.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookNameAsyncWithHttpInfo($name, $name_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\NameResponse';
        $request = $this->cellsWorkbookGetWorkbookNameRequest($name, $name_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookGetWorkbookName'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookGetWorkbookNameRequest($name, $name_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookGetWorkbookName'
            );
        }
        // verify the required parameter 'name_name' is set
        if ($name_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_name when calling cellsWorkbookGetWorkbookName'
            );
        }

        $resourcePath = '/cells/{name}/names/{nameName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($name_name !== null) {
            $resourcePath = str_replace(
                '{' . 'nameName' . '}',
                ObjectSerializer::toPathValue($name_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookGetWorkbookName'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookGetWorkbookNameValue
     *
     * Get workbook's name value.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\RangeValueResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookNameValue($name, $name_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookGetWorkbookNameValueWithHttpInfo($name, $name_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookGetWorkbookNameValueWithHttpInfo
     *
     * Get workbook's name value.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\RangeValueResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookNameValueWithHttpInfo($name, $name_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RangeValueResponse';
        $request = $this->cellsWorkbookGetWorkbookNameValueRequest($name, $name_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\RangeValueResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookGetWorkbookNameValueAsync
     *
     * Get workbook's name value.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookNameValueAsync($name, $name_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookGetWorkbookNameValueAsyncWithHttpInfo($name, $name_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookGetWorkbookNameValueAsyncWithHttpInfo
     *
     * Get workbook's name value.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookNameValueAsyncWithHttpInfo($name, $name_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RangeValueResponse';
        $request = $this->cellsWorkbookGetWorkbookNameValueRequest($name, $name_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookGetWorkbookNameValue'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $name_name The name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookGetWorkbookNameValueRequest($name, $name_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookGetWorkbookNameValue'
            );
        }
        // verify the required parameter 'name_name' is set
        if ($name_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_name when calling cellsWorkbookGetWorkbookNameValue'
            );
        }

        $resourcePath = '/cells/{name}/names/{nameName}/value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($name_name !== null) {
            $resourcePath = str_replace(
                '{' . 'nameName' . '}',
                ObjectSerializer::toPathValue($name_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookGetWorkbookNameValue'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookGetWorkbookNames
     *
     * Read workbook's names.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\NamesResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookNames($name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookGetWorkbookNamesWithHttpInfo($name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookGetWorkbookNamesWithHttpInfo
     *
     * Read workbook's names.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\NamesResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookNamesWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\NamesResponse';
        $request = $this->cellsWorkbookGetWorkbookNamesRequest($name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\NamesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookGetWorkbookNamesAsync
     *
     * Read workbook's names.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookNamesAsync($name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookGetWorkbookNamesAsyncWithHttpInfo($name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookGetWorkbookNamesAsyncWithHttpInfo
     *
     * Read workbook's names.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookNamesAsyncWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\NamesResponse';
        $request = $this->cellsWorkbookGetWorkbookNamesRequest($name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookGetWorkbookNames'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookGetWorkbookNamesRequest($name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookGetWorkbookNames'
            );
        }

        $resourcePath = '/cells/{name}/names';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookGetWorkbookNames'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookGetWorkbookSettings
     *
     * Get Workbook Settings DTO
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorkbookSettingsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookSettings($name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookGetWorkbookSettingsWithHttpInfo($name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookGetWorkbookSettingsWithHttpInfo
     *
     * Get Workbook Settings DTO
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorkbookSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookSettingsWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorkbookSettingsResponse';
        $request = $this->cellsWorkbookGetWorkbookSettingsRequest($name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorkbookSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookGetWorkbookSettingsAsync
     *
     * Get Workbook Settings DTO
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookSettingsAsync($name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookGetWorkbookSettingsAsyncWithHttpInfo($name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookGetWorkbookSettingsAsyncWithHttpInfo
     *
     * Get Workbook Settings DTO
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookSettingsAsyncWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorkbookSettingsResponse';
        $request = $this->cellsWorkbookGetWorkbookSettingsRequest($name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookGetWorkbookSettings'
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookGetWorkbookSettingsRequest($name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookGetWorkbookSettings'
            );
        }

        $resourcePath = '/cells/{name}/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookGetWorkbookSettings'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookGetWorkbookTextItems
     *
     * Read workbook's text items.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\TextItemsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookTextItems($name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookGetWorkbookTextItemsWithHttpInfo($name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookGetWorkbookTextItemsWithHttpInfo
     *
     * Read workbook's text items.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\TextItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookTextItemsWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $request = $this->cellsWorkbookGetWorkbookTextItemsRequest($name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\TextItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookGetWorkbookTextItemsAsync
     *
     * Read workbook's text items.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookTextItemsAsync($name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookGetWorkbookTextItemsAsyncWithHttpInfo($name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookGetWorkbookTextItemsAsyncWithHttpInfo
     *
     * Read workbook's text items.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookGetWorkbookTextItemsAsyncWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $request = $this->cellsWorkbookGetWorkbookTextItemsRequest($name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookGetWorkbookTextItems'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookGetWorkbookTextItemsRequest($name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookGetWorkbookTextItems'
            );
        }

        $resourcePath = '/cells/{name}/textItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookGetWorkbookTextItems'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPostAutofitWorkbookColumns
     *
     * Autofit workbook columns.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_column Start column. (optional)
     * @param  int $end_column End column. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostAutofitWorkbookColumns($name, $auto_fitter_options = null, $start_column = null, $end_column = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPostAutofitWorkbookColumnsWithHttpInfo($name, $auto_fitter_options, $start_column, $end_column, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPostAutofitWorkbookColumnsWithHttpInfo
     *
     * Autofit workbook columns.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_column Start column. (optional)
     * @param  int $end_column End column. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostAutofitWorkbookColumnsWithHttpInfo($name, $auto_fitter_options = null, $start_column = null, $end_column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostAutofitWorkbookColumnsRequest($name, $auto_fitter_options, $start_column, $end_column, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPostAutofitWorkbookColumnsAsync
     *
     * Autofit workbook columns.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_column Start column. (optional)
     * @param  int $end_column End column. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostAutofitWorkbookColumnsAsync($name, $auto_fitter_options = null, $start_column = null, $end_column = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookPostAutofitWorkbookColumnsAsyncWithHttpInfo($name, $auto_fitter_options, $start_column, $end_column, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPostAutofitWorkbookColumnsAsyncWithHttpInfo
     *
     * Autofit workbook columns.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_column Start column. (optional)
     * @param  int $end_column End column. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostAutofitWorkbookColumnsAsyncWithHttpInfo($name, $auto_fitter_options = null, $start_column = null, $end_column = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostAutofitWorkbookColumnsRequest($name, $auto_fitter_options, $start_column, $end_column, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPostAutofitWorkbookColumns'
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_column Start column. (optional)
     * @param  int $end_column End column. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPostAutofitWorkbookColumnsRequest($name, $auto_fitter_options = null, $start_column = null, $end_column = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPostAutofitWorkbookColumns'
            );
        }

        $resourcePath = '/cells/{name}/autofitcolumns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($end_column !== null) {
            $queryParams['endColumn'] = ObjectSerializer::toQueryValue($end_column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($auto_fitter_options)) {
            $_tempBody = $auto_fitter_options;
            $_tempBodyName =str_replace('_','', 'auto_fitter_options');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPostAutofitWorkbookColumns'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPostAutofitWorkbookRows
     *
     * Autofit workbook rows.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostAutofitWorkbookRows($name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPostAutofitWorkbookRowsWithHttpInfo($name, $auto_fitter_options, $start_row, $end_row, $only_auto, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPostAutofitWorkbookRowsWithHttpInfo
     *
     * Autofit workbook rows.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostAutofitWorkbookRowsWithHttpInfo($name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostAutofitWorkbookRowsRequest($name, $auto_fitter_options, $start_row, $end_row, $only_auto, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPostAutofitWorkbookRowsAsync
     *
     * Autofit workbook rows.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostAutofitWorkbookRowsAsync($name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookPostAutofitWorkbookRowsAsyncWithHttpInfo($name, $auto_fitter_options, $start_row, $end_row, $only_auto, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPostAutofitWorkbookRowsAsyncWithHttpInfo
     *
     * Autofit workbook rows.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostAutofitWorkbookRowsAsyncWithHttpInfo($name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostAutofitWorkbookRowsRequest($name, $auto_fitter_options, $start_row, $end_row, $only_auto, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPostAutofitWorkbookRows'
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPostAutofitWorkbookRowsRequest($name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPostAutofitWorkbookRows'
            );
        }

        $resourcePath = '/cells/{name}/autofitrows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($end_row !== null) {
            $queryParams['endRow'] = ObjectSerializer::toQueryValue($end_row);
        }
        // query params
        if ($only_auto !== null) {
            $queryParams['onlyAuto'] = ObjectSerializer::toQueryValue($only_auto);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($auto_fitter_options)) {
            $_tempBody = $auto_fitter_options;
            $_tempBodyName =str_replace('_','', 'auto_fitter_options');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPostAutofitWorkbookRows'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPostDigitalSignature
     *
     * Add digital signature.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $digitalsignaturefile Digital signature file parameters. (required)
     * @param  string $password password (required)
     * @param  string $folder Workbook&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostDigitalSignature($name, $digitalsignaturefile, $password, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPostDigitalSignatureWithHttpInfo($name, $digitalsignaturefile, $password, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPostDigitalSignatureWithHttpInfo
     *
     * Add digital signature.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $digitalsignaturefile Digital signature file parameters. (required)
     * @param  string $password (required)
     * @param  string $folder Workbook&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostDigitalSignatureWithHttpInfo($name, $digitalsignaturefile, $password, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostDigitalSignatureRequest($name, $digitalsignaturefile, $password, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPostDigitalSignatureAsync
     *
     * Add digital signature.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $digitalsignaturefile Digital signature file parameters. (required)
     * @param  string $password (required)
     * @param  string $folder Workbook&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostDigitalSignatureAsync($name, $digitalsignaturefile, $password, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookPostDigitalSignatureAsyncWithHttpInfo($name, $digitalsignaturefile, $password, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPostDigitalSignatureAsyncWithHttpInfo
     *
     * Add digital signature.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $digitalsignaturefile Digital signature file parameters. (required)
     * @param  string $password (required)
     * @param  string $folder Workbook&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostDigitalSignatureAsyncWithHttpInfo($name, $digitalsignaturefile, $password, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostDigitalSignatureRequest($name, $digitalsignaturefile, $password, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPostDigitalSignature'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $digitalsignaturefile Digital signature file parameters. (required)
     * @param  string $password (required)
     * @param  string $folder Workbook&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPostDigitalSignatureRequest($name, $digitalsignaturefile, $password, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPostDigitalSignature'
            );
        }
        // verify the required parameter 'digitalsignaturefile' is set
        if ($digitalsignaturefile === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $digitalsignaturefile when calling cellsWorkbookPostDigitalSignature'
            );
        }
        // verify the required parameter 'password' is set
        if ($password === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $password when calling cellsWorkbookPostDigitalSignature'
            );
        }

        $resourcePath = '/cells/{name}/digitalsignature';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($digitalsignaturefile !== null) {
            $queryParams['digitalsignaturefile'] = ObjectSerializer::toQueryValue($digitalsignaturefile);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPostDigitalSignature'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPostEncryptDocument
     *
     * Encript document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookEncryptionRequest $encryption Encryption parameters. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostEncryptDocument($name, $encryption = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPostEncryptDocumentWithHttpInfo($name, $encryption, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPostEncryptDocumentWithHttpInfo
     *
     * Encript document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookEncryptionRequest $encryption Encryption parameters. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostEncryptDocumentWithHttpInfo($name, $encryption = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostEncryptDocumentRequest($name, $encryption, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPostEncryptDocumentAsync
     *
     * Encript document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookEncryptionRequest $encryption Encryption parameters. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostEncryptDocumentAsync($name, $encryption = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookPostEncryptDocumentAsyncWithHttpInfo($name, $encryption, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPostEncryptDocumentAsyncWithHttpInfo
     *
     * Encript document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookEncryptionRequest $encryption Encryption parameters. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostEncryptDocumentAsyncWithHttpInfo($name, $encryption = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostEncryptDocumentRequest($name, $encryption, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPostEncryptDocument'
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookEncryptionRequest $encryption Encryption parameters. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPostEncryptDocumentRequest($name, $encryption = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPostEncryptDocument'
            );
        }

        $resourcePath = '/cells/{name}/encryption';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($encryption)) {
            $_tempBody = $encryption;
            $_tempBodyName =str_replace('_','', 'encryption');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPostEncryptDocument'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPostImportData
     *
     * @param  string $name name (required)
     * @param  \Aspose\Cells\Cloud\Model\ImportOption $import_data import_data (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostImportData($name, $import_data, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPostImportDataWithHttpInfo($name, $import_data, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPostImportDataWithHttpInfo
     *
     * @param  string $name (required)
     * @param  \Aspose\Cells\Cloud\Model\ImportOption $import_data (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostImportDataWithHttpInfo($name, $import_data, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostImportDataRequest($name, $import_data, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPostImportDataAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  \Aspose\Cells\Cloud\Model\ImportOption $import_data (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostImportDataAsync($name, $import_data, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookPostImportDataAsyncWithHttpInfo($name, $import_data, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPostImportDataAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  \Aspose\Cells\Cloud\Model\ImportOption $import_data (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostImportDataAsyncWithHttpInfo($name, $import_data, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostImportDataRequest($name, $import_data, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPostImportData'
     *
     * @param  string $name (required)
     * @param  \Aspose\Cells\Cloud\Model\ImportOption $import_data (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPostImportDataRequest($name, $import_data, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPostImportData'
            );
        }
        // verify the required parameter 'import_data' is set
        if ($import_data === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $import_data when calling cellsWorkbookPostImportData'
            );
        }

        $resourcePath = '/cells/{name}/importdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($import_data)) {
            $_tempBody = $import_data;
            $_tempBodyName =str_replace('_','', 'import_data');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPostImportData'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPostProtectDocument
     *
     * Protect document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookProtectionRequest $protection The protection settings. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostProtectDocument($name, $protection = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPostProtectDocumentWithHttpInfo($name, $protection, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPostProtectDocumentWithHttpInfo
     *
     * Protect document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookProtectionRequest $protection The protection settings. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostProtectDocumentWithHttpInfo($name, $protection = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostProtectDocumentRequest($name, $protection, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPostProtectDocumentAsync
     *
     * Protect document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookProtectionRequest $protection The protection settings. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostProtectDocumentAsync($name, $protection = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookPostProtectDocumentAsyncWithHttpInfo($name, $protection, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPostProtectDocumentAsyncWithHttpInfo
     *
     * Protect document.
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookProtectionRequest $protection The protection settings. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostProtectDocumentAsyncWithHttpInfo($name, $protection = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostProtectDocumentRequest($name, $protection, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPostProtectDocument'
     *
     * @param  string $name The document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookProtectionRequest $protection The protection settings. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPostProtectDocumentRequest($name, $protection = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPostProtectDocument'
            );
        }

        $resourcePath = '/cells/{name}/protection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($protection)) {
            $_tempBody = $protection;
            $_tempBodyName =str_replace('_','', 'protection');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPostProtectDocument'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPostWorkbookCalculateFormula
     *
     * Calculate all formulas in workbook.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options Calculation Options. (optional)
     * @param  bool $ignore_error ignore Error. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookCalculateFormula($name, $options = null, $ignore_error = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPostWorkbookCalculateFormulaWithHttpInfo($name, $options, $ignore_error, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPostWorkbookCalculateFormulaWithHttpInfo
     *
     * Calculate all formulas in workbook.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options Calculation Options. (optional)
     * @param  bool $ignore_error ignore Error. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookCalculateFormulaWithHttpInfo($name, $options = null, $ignore_error = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostWorkbookCalculateFormulaRequest($name, $options, $ignore_error, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPostWorkbookCalculateFormulaAsync
     *
     * Calculate all formulas in workbook.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options Calculation Options. (optional)
     * @param  bool $ignore_error ignore Error. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookCalculateFormulaAsync($name, $options = null, $ignore_error = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookPostWorkbookCalculateFormulaAsyncWithHttpInfo($name, $options, $ignore_error, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPostWorkbookCalculateFormulaAsyncWithHttpInfo
     *
     * Calculate all formulas in workbook.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options Calculation Options. (optional)
     * @param  bool $ignore_error ignore Error. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookCalculateFormulaAsyncWithHttpInfo($name, $options = null, $ignore_error = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostWorkbookCalculateFormulaRequest($name, $options, $ignore_error, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPostWorkbookCalculateFormula'
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\CalculationOptions $options Calculation Options. (optional)
     * @param  bool $ignore_error ignore Error. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPostWorkbookCalculateFormulaRequest($name, $options = null, $ignore_error = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPostWorkbookCalculateFormula'
            );
        }

        $resourcePath = '/cells/{name}/calculateformula';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ignore_error !== null) {
            $queryParams['ignoreError'] = ObjectSerializer::toQueryValue($ignore_error);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($options)) {
            $_tempBody = $options;
            $_tempBodyName =str_replace('_','', 'options');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPostWorkbookCalculateFormula'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPostWorkbookGetSmartMarkerResult
     *
     * Smart marker processing result.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $xml_file The xml file full path, if empty the data is read from request body. (optional)
     * @param  string $folder The workbook folder full path. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_path Path to save result (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookGetSmartMarkerResult($name, $xml_file = null, $folder = null, $storage_name = null, $out_path = null, $out_storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPostWorkbookGetSmartMarkerResultWithHttpInfo($name, $xml_file, $folder, $storage_name, $out_path, $out_storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPostWorkbookGetSmartMarkerResultWithHttpInfo
     *
     * Smart marker processing result.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $xml_file The xml file full path, if empty the data is read from request body. (optional)
     * @param  string $folder The workbook folder full path. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_path Path to save result (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookGetSmartMarkerResultWithHttpInfo($name, $xml_file = null, $folder = null, $storage_name = null, $out_path = null, $out_storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsWorkbookPostWorkbookGetSmartMarkerResultRequest($name, $xml_file, $folder, $storage_name, $out_path, $out_storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPostWorkbookGetSmartMarkerResultAsync
     *
     * Smart marker processing result.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $xml_file The xml file full path, if empty the data is read from request body. (optional)
     * @param  string $folder The workbook folder full path. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_path Path to save result (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookGetSmartMarkerResultAsync($name, $xml_file = null, $folder = null, $storage_name = null, $out_path = null, $out_storage_name = null)
    {
        return $this->cellsWorkbookPostWorkbookGetSmartMarkerResultAsyncWithHttpInfo($name, $xml_file, $folder, $storage_name, $out_path, $out_storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPostWorkbookGetSmartMarkerResultAsyncWithHttpInfo
     *
     * Smart marker processing result.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $xml_file The xml file full path, if empty the data is read from request body. (optional)
     * @param  string $folder The workbook folder full path. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_path Path to save result (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookGetSmartMarkerResultAsyncWithHttpInfo($name, $xml_file = null, $folder = null, $storage_name = null, $out_path = null, $out_storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsWorkbookPostWorkbookGetSmartMarkerResultRequest($name, $xml_file, $folder, $storage_name, $out_path, $out_storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPostWorkbookGetSmartMarkerResult'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $xml_file The xml file full path, if empty the data is read from request body. (optional)
     * @param  string $folder The workbook folder full path. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_path Path to save result (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPostWorkbookGetSmartMarkerResultRequest($name, $xml_file = null, $folder = null, $storage_name = null, $out_path = null, $out_storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPostWorkbookGetSmartMarkerResult'
            );
        }

        $resourcePath = '/cells/{name}/smartmarker';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($xml_file !== null) {
            $queryParams['xmlFile'] = ObjectSerializer::toQueryValue($xml_file);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }
        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($out_path);
        }
        // query params
        if ($out_storage_name !== null) {
            $queryParams['outStorageName'] = ObjectSerializer::toQueryValue($out_storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPostWorkbookGetSmartMarkerResult'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPostWorkbookSettings
     *
     * Update Workbook setting
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookSettings $settings Workbook Setting DTO (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookSettings($name, $settings = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPostWorkbookSettingsWithHttpInfo($name, $settings, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPostWorkbookSettingsWithHttpInfo
     *
     * Update Workbook setting
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookSettings $settings Workbook Setting DTO (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookSettingsWithHttpInfo($name, $settings = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostWorkbookSettingsRequest($name, $settings, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPostWorkbookSettingsAsync
     *
     * Update Workbook setting
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookSettings $settings Workbook Setting DTO (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookSettingsAsync($name, $settings = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookPostWorkbookSettingsAsyncWithHttpInfo($name, $settings, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPostWorkbookSettingsAsyncWithHttpInfo
     *
     * Update Workbook setting
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookSettings $settings Workbook Setting DTO (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookSettingsAsyncWithHttpInfo($name, $settings = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPostWorkbookSettingsRequest($name, $settings, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPostWorkbookSettings'
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorkbookSettings $settings Workbook Setting DTO (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPostWorkbookSettingsRequest($name, $settings = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPostWorkbookSettings'
            );
        }

        $resourcePath = '/cells/{name}/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($settings)) {
            $_tempBody = $settings;
            $_tempBodyName =str_replace('_','', 'settings');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPostWorkbookSettings'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPostWorkbookSplit
     *
     * Split workbook.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $format Split format. (optional)
     * @param  int $from Start worksheet index. (optional, default to 0)
     * @param  int $to End worksheet index. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $out_folder out Folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SplitResultResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookSplit($name, $format = null, $from = '0', $to = '0', $horizontal_resolution = '0', $vertical_resolution = '0', $folder = null, $out_folder = null, $storage_name = null, $out_storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPostWorkbookSplitWithHttpInfo($name, $format, $from, $to, $horizontal_resolution, $vertical_resolution, $folder, $out_folder, $storage_name, $out_storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPostWorkbookSplitWithHttpInfo
     *
     * Split workbook.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $format Split format. (optional)
     * @param  int $from Start worksheet index. (optional, default to 0)
     * @param  int $to End worksheet index. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $out_folder out Folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SplitResultResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookSplitWithHttpInfo($name, $format = null, $from = '0', $to = '0', $horizontal_resolution = '0', $vertical_resolution = '0', $folder = null, $out_folder = null, $storage_name = null, $out_storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SplitResultResponse';
        $request = $this->cellsWorkbookPostWorkbookSplitRequest($name, $format, $from, $to, $horizontal_resolution, $vertical_resolution, $folder, $out_folder, $storage_name, $out_storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SplitResultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPostWorkbookSplitAsync
     *
     * Split workbook.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $format Split format. (optional)
     * @param  int $from Start worksheet index. (optional, default to 0)
     * @param  int $to End worksheet index. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $out_folder out Folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookSplitAsync($name, $format = null, $from = '0', $to = '0', $horizontal_resolution = '0', $vertical_resolution = '0', $folder = null, $out_folder = null, $storage_name = null, $out_storage_name = null)
    {
        return $this->cellsWorkbookPostWorkbookSplitAsyncWithHttpInfo($name, $format, $from, $to, $horizontal_resolution, $vertical_resolution, $folder, $out_folder, $storage_name, $out_storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPostWorkbookSplitAsyncWithHttpInfo
     *
     * Split workbook.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $format Split format. (optional)
     * @param  int $from Start worksheet index. (optional, default to 0)
     * @param  int $to End worksheet index. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $out_folder out Folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbookSplitAsyncWithHttpInfo($name, $format = null, $from = '0', $to = '0', $horizontal_resolution = '0', $vertical_resolution = '0', $folder = null, $out_folder = null, $storage_name = null, $out_storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SplitResultResponse';
        $request = $this->cellsWorkbookPostWorkbookSplitRequest($name, $format, $from, $to, $horizontal_resolution, $vertical_resolution, $folder, $out_folder, $storage_name, $out_storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPostWorkbookSplit'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $format Split format. (optional)
     * @param  int $from Start worksheet index. (optional, default to 0)
     * @param  int $to End worksheet index. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $out_folder out Folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $out_storage_name output storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPostWorkbookSplitRequest($name, $format = null, $from = '0', $to = '0', $horizontal_resolution = '0', $vertical_resolution = '0', $folder = null, $out_folder = null, $storage_name = null, $out_storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPostWorkbookSplit'
            );
        }

        $resourcePath = '/cells/{name}/split';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($horizontal_resolution !== null) {
            $queryParams['horizontalResolution'] = ObjectSerializer::toQueryValue($horizontal_resolution);
        }
        // query params
        if ($vertical_resolution !== null) {
            $queryParams['verticalResolution'] = ObjectSerializer::toQueryValue($vertical_resolution);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($out_folder !== null) {
            $queryParams['outFolder'] = ObjectSerializer::toQueryValue($out_folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }
        // query params
        if ($out_storage_name !== null) {
            $queryParams['outStorageName'] = ObjectSerializer::toQueryValue($out_storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPostWorkbookSplit'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPostWorkbooksMerge
     *
     * Merge workbooks.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $merge_with The workbook to merge with. (required)
     * @param  string $folder Source workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $merged_storage_name merged file storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorkbookResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbooksMerge($name, $merge_with, $folder = null, $storage_name = null, $merged_storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPostWorkbooksMergeWithHttpInfo($name, $merge_with, $folder, $storage_name, $merged_storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPostWorkbooksMergeWithHttpInfo
     *
     * Merge workbooks.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $merge_with The workbook to merge with. (required)
     * @param  string $folder Source workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $merged_storage_name merged file storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorkbookResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbooksMergeWithHttpInfo($name, $merge_with, $folder = null, $storage_name = null, $merged_storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorkbookResponse';
        $request = $this->cellsWorkbookPostWorkbooksMergeRequest($name, $merge_with, $folder, $storage_name, $merged_storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorkbookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPostWorkbooksMergeAsync
     *
     * Merge workbooks.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $merge_with The workbook to merge with. (required)
     * @param  string $folder Source workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $merged_storage_name merged file storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbooksMergeAsync($name, $merge_with, $folder = null, $storage_name = null, $merged_storage_name = null)
    {
        return $this->cellsWorkbookPostWorkbooksMergeAsyncWithHttpInfo($name, $merge_with, $folder, $storage_name, $merged_storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPostWorkbooksMergeAsyncWithHttpInfo
     *
     * Merge workbooks.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $merge_with The workbook to merge with. (required)
     * @param  string $folder Source workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $merged_storage_name merged file storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbooksMergeAsyncWithHttpInfo($name, $merge_with, $folder = null, $storage_name = null, $merged_storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorkbookResponse';
        $request = $this->cellsWorkbookPostWorkbooksMergeRequest($name, $merge_with, $folder, $storage_name, $merged_storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPostWorkbooksMerge'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $merge_with The workbook to merge with. (required)
     * @param  string $folder Source workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  string $merged_storage_name merged file storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPostWorkbooksMergeRequest($name, $merge_with, $folder = null, $storage_name = null, $merged_storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPostWorkbooksMerge'
            );
        }
        // verify the required parameter 'merge_with' is set
        if ($merge_with === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merge_with when calling cellsWorkbookPostWorkbooksMerge'
            );
        }

        $resourcePath = '/cells/{name}/merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merge_with !== null) {
            $queryParams['mergeWith'] = ObjectSerializer::toQueryValue($merge_with);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }
        // query params
        if ($merged_storage_name !== null) {
            $queryParams['mergedStorageName'] = ObjectSerializer::toQueryValue($merged_storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPostWorkbooksMerge'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPostWorkbooksTextReplace
     *
     * Replace text.
     *
     * @param  string $name Document name. (required)
     * @param  string $old_value The old value. (required)
     * @param  string $new_value The new value. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorkbookReplaceResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbooksTextReplace($name, $old_value, $new_value, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPostWorkbooksTextReplaceWithHttpInfo($name, $old_value, $new_value, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPostWorkbooksTextReplaceWithHttpInfo
     *
     * Replace text.
     *
     * @param  string $name Document name. (required)
     * @param  string $old_value The old value. (required)
     * @param  string $new_value The new value. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorkbookReplaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbooksTextReplaceWithHttpInfo($name, $old_value, $new_value, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorkbookReplaceResponse';
        $request = $this->cellsWorkbookPostWorkbooksTextReplaceRequest($name, $old_value, $new_value, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorkbookReplaceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPostWorkbooksTextReplaceAsync
     *
     * Replace text.
     *
     * @param  string $name Document name. (required)
     * @param  string $old_value The old value. (required)
     * @param  string $new_value The new value. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbooksTextReplaceAsync($name, $old_value, $new_value, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookPostWorkbooksTextReplaceAsyncWithHttpInfo($name, $old_value, $new_value, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPostWorkbooksTextReplaceAsyncWithHttpInfo
     *
     * Replace text.
     *
     * @param  string $name Document name. (required)
     * @param  string $old_value The old value. (required)
     * @param  string $new_value The new value. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbooksTextReplaceAsyncWithHttpInfo($name, $old_value, $new_value, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorkbookReplaceResponse';
        $request = $this->cellsWorkbookPostWorkbooksTextReplaceRequest($name, $old_value, $new_value, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPostWorkbooksTextReplace'
     *
     * @param  string $name Document name. (required)
     * @param  string $old_value The old value. (required)
     * @param  string $new_value The new value. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPostWorkbooksTextReplaceRequest($name, $old_value, $new_value, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPostWorkbooksTextReplace'
            );
        }
        // verify the required parameter 'old_value' is set
        if ($old_value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $old_value when calling cellsWorkbookPostWorkbooksTextReplace'
            );
        }
        // verify the required parameter 'new_value' is set
        if ($new_value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_value when calling cellsWorkbookPostWorkbooksTextReplace'
            );
        }

        $resourcePath = '/cells/{name}/replaceText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($old_value !== null) {
            $queryParams['oldValue'] = ObjectSerializer::toQueryValue($old_value);
        }
        // query params
        if ($new_value !== null) {
            $queryParams['newValue'] = ObjectSerializer::toQueryValue($new_value);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPostWorkbooksTextReplace'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPostWorkbooksTextSearch
     *
     * Search text.
     *
     * @param  string $name Document name. (required)
     * @param  string $text Text sample. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\TextItemsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbooksTextSearch($name, $text, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPostWorkbooksTextSearchWithHttpInfo($name, $text, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPostWorkbooksTextSearchWithHttpInfo
     *
     * Search text.
     *
     * @param  string $name Document name. (required)
     * @param  string $text Text sample. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\TextItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbooksTextSearchWithHttpInfo($name, $text, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $request = $this->cellsWorkbookPostWorkbooksTextSearchRequest($name, $text, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\TextItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPostWorkbooksTextSearchAsync
     *
     * Search text.
     *
     * @param  string $name Document name. (required)
     * @param  string $text Text sample. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbooksTextSearchAsync($name, $text, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookPostWorkbooksTextSearchAsyncWithHttpInfo($name, $text, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPostWorkbooksTextSearchAsyncWithHttpInfo
     *
     * Search text.
     *
     * @param  string $name Document name. (required)
     * @param  string $text Text sample. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPostWorkbooksTextSearchAsyncWithHttpInfo($name, $text, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $request = $this->cellsWorkbookPostWorkbooksTextSearchRequest($name, $text, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPostWorkbooksTextSearch'
     *
     * @param  string $name Document name. (required)
     * @param  string $text Text sample. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPostWorkbooksTextSearchRequest($name, $text, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPostWorkbooksTextSearch'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling cellsWorkbookPostWorkbooksTextSearch'
            );
        }

        $resourcePath = '/cells/{name}/findText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPostWorkbooksTextSearch'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPutConvertWorkbook
     *
     * Convert workbook from request content to some format.
     *
     * @param  \SplFileObject $file file (required)
     * @param  string $format The format to convert. (optional)
     * @param  string $password The workbook password. (optional)
     * @param  string $out_path Path to save result (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutConvertWorkbook($file, $format = null, $password = null, $out_path = null, $storage_name = null,$extended_query_parameters =null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPutConvertWorkbookWithHttpInfo($file, $format, $password, $out_path, $storage_name,$extended_query_parameters);
        return $response;
    }

    /**
     * Operation cellsWorkbookPutConvertWorkbookWithHttpInfo
     *
     * Convert workbook from request content to some format.
     *
     * @param  \SplFileObject $file (required)
     * @param  string $format The format to convert. (optional)
     * @param  string $password The workbook password. (optional)
     * @param  string $out_path Path to save result (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutConvertWorkbookWithHttpInfo($file, $format = null, $password = null, $out_path = null, $storage_name = null,$extended_query_parameters =null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsWorkbookPutConvertWorkbookRequest($file, $format, $password, $out_path, $storage_name,$extended_query_parameters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPutConvertWorkbookAsync
     *
     * Convert workbook from request content to some format.
     *
     * @param  \SplFileObject $file (required)
     * @param  string $format The format to convert. (optional)
     * @param  string $password The workbook password. (optional)
     * @param  string $out_path Path to save result (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutConvertWorkbookAsync($file, $format = null, $password = null, $out_path = null, $storage_name = null,$extended_query_parameters =null)
    {
        return $this->cellsWorkbookPutConvertWorkbookAsyncWithHttpInfo($file, $format, $password, $out_path, $storage_name,$extended_query_parameters )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPutConvertWorkbookAsyncWithHttpInfo
     *
     * Convert workbook from request content to some format.
     *
     * @param  \SplFileObject $file (required)
     * @param  string $format The format to convert. (optional)
     * @param  string $password The workbook password. (optional)
     * @param  string $out_path Path to save result (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutConvertWorkbookAsyncWithHttpInfo($file, $format = null, $password = null, $out_path = null, $storage_name = null,$extended_query_parameters =null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsWorkbookPutConvertWorkbookRequest($file, $format, $password, $out_path, $storage_name,$extended_query_parameters );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPutConvertWorkbook'
     *
     * @param  \SplFileObject $file (required)
     * @param  string $format The format to convert. (optional)
     * @param  string $password The workbook password. (optional)
     * @param  string $out_path Path to save result (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPutConvertWorkbookRequest($file, $format = null, $password = null, $out_path = null, $storage_name = null,$extended_query_parameters =null)
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling cellsWorkbookPutConvertWorkbook'
            );
        }

        $resourcePath = '/cells/convert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($out_path);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        if($extended_query_parameters !== null){
            foreach($extended_query_parameters as $key => $value) {
                $queryParams[$key] = ObjectSerializer::toQueryValue($value);
            }
        }
        // form params
        if ($file !== null) {
            $multipart = true;
            if( is_array($file)){
                foreach($file as $key => $value) {
                    $formParams[$key] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($value), 'rb');
                }
            }else {
                $formParams['file'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($file), 'rb');
            }
            
        }
        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPutConvertWorkbook'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPutDocumentProtectFromChanges
     *
     * Protect document from changes.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\PasswordRequest $password Modification password. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutDocumentProtectFromChanges($name, $password = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPutDocumentProtectFromChangesWithHttpInfo($name, $password, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPutDocumentProtectFromChangesWithHttpInfo
     *
     * Protect document from changes.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\PasswordRequest $password Modification password. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutDocumentProtectFromChangesWithHttpInfo($name, $password = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPutDocumentProtectFromChangesRequest($name, $password, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPutDocumentProtectFromChangesAsync
     *
     * Protect document from changes.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\PasswordRequest $password Modification password. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutDocumentProtectFromChangesAsync($name, $password = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookPutDocumentProtectFromChangesAsyncWithHttpInfo($name, $password, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPutDocumentProtectFromChangesAsyncWithHttpInfo
     *
     * Protect document from changes.
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\PasswordRequest $password Modification password. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutDocumentProtectFromChangesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPutDocumentProtectFromChangesRequest($name, $password, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPutDocumentProtectFromChanges'
     *
     * @param  string $name Document name. (required)
     * @param  \Aspose\Cells\Cloud\Model\PasswordRequest $password Modification password. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPutDocumentProtectFromChangesRequest($name, $password = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPutDocumentProtectFromChanges'
            );
        }

        $resourcePath = '/cells/{name}/writeProtection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($password)) {
            $_tempBody = $password;
            $_tempBodyName =str_replace('_','', 'password');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPutDocumentProtectFromChanges'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPutWorkbookBackground
     *
     * Set workbook background image.
     *
     * @param  string $name name (required)
     * @param  string $png png (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutWorkbookBackground($name, $png, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPutWorkbookBackgroundWithHttpInfo($name, $png, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPutWorkbookBackgroundWithHttpInfo
     *
     * Set workbook background image.
     *
     * @param  string $name (required)
     * @param  string $png (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutWorkbookBackgroundWithHttpInfo($name, $png, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPutWorkbookBackgroundRequest($name, $png, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPutWorkbookBackgroundAsync
     *
     * Set workbook background image.
     *
     * @param  string $name (required)
     * @param  string $png (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutWorkbookBackgroundAsync($name, $png, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookPutWorkbookBackgroundAsyncWithHttpInfo($name, $png, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPutWorkbookBackgroundAsyncWithHttpInfo
     *
     * Set workbook background image.
     *
     * @param  string $name (required)
     * @param  string $png (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutWorkbookBackgroundAsyncWithHttpInfo($name, $png, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPutWorkbookBackgroundRequest($name, $png, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPutWorkbookBackground'
     *
     * @param  string $name (required)
     * @param  string $png (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPutWorkbookBackgroundRequest($name, $png, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPutWorkbookBackground'
            );
        }
        // verify the required parameter 'png' is set
        if ($png === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $png when calling cellsWorkbookPutWorkbookBackground'
            );
        }

        $resourcePath = '/cells/{name}/background';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($png)) {
            $_tempBody = $png;
            $_tempBodyName =str_replace('_','', 'png');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPutWorkbookBackground'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPutWorkbookCreate
     *
     * Create new workbook using deferent methods.
     *
     * @param  string $name The new document name. (required)
     * @param  string $template_file The template file, if the data not provided default workbook is created. (optional)
     * @param  string $data_file Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     * @param  bool $is_write_over write over file. (optional)
     * @param  string $folder The new document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorkbookResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutWorkbookCreate($name, $template_file = null, $data_file = null, $is_write_over = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPutWorkbookCreateWithHttpInfo($name, $template_file, $data_file, $is_write_over, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorkbookPutWorkbookCreateWithHttpInfo
     *
     * Create new workbook using deferent methods.
     *
     * @param  string $name The new document name. (required)
     * @param  string $template_file The template file, if the data not provided default workbook is created. (optional)
     * @param  string $data_file Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     * @param  bool $is_write_over write over file. (optional)
     * @param  string $folder The new document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorkbookResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutWorkbookCreateWithHttpInfo($name, $template_file = null, $data_file = null, $is_write_over = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorkbookResponse';
        $request = $this->cellsWorkbookPutWorkbookCreateRequest($name, $template_file, $data_file, $is_write_over, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorkbookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPutWorkbookCreateAsync
     *
     * Create new workbook using deferent methods.
     *
     * @param  string $name The new document name. (required)
     * @param  string $template_file The template file, if the data not provided default workbook is created. (optional)
     * @param  string $data_file Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     * @param  bool $is_write_over write over file. (optional)
     * @param  string $folder The new document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutWorkbookCreateAsync($name, $template_file = null, $data_file = null, $is_write_over = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorkbookPutWorkbookCreateAsyncWithHttpInfo($name, $template_file, $data_file, $is_write_over, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPutWorkbookCreateAsyncWithHttpInfo
     *
     * Create new workbook using deferent methods.
     *
     * @param  string $name The new document name. (required)
     * @param  string $template_file The template file, if the data not provided default workbook is created. (optional)
     * @param  string $data_file Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     * @param  bool $is_write_over write over file. (optional)
     * @param  string $folder The new document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutWorkbookCreateAsyncWithHttpInfo($name, $template_file = null, $data_file = null, $is_write_over = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorkbookResponse';
        $request = $this->cellsWorkbookPutWorkbookCreateRequest($name, $template_file, $data_file, $is_write_over, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPutWorkbookCreate'
     *
     * @param  string $name The new document name. (required)
     * @param  string $template_file The template file, if the data not provided default workbook is created. (optional)
     * @param  string $data_file Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     * @param  bool $is_write_over write over file. (optional)
     * @param  string $folder The new document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPutWorkbookCreateRequest($name, $template_file = null, $data_file = null, $is_write_over = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPutWorkbookCreate'
            );
        }

        $resourcePath = '/cells/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($template_file !== null) {
            $queryParams['templateFile'] = ObjectSerializer::toQueryValue($template_file);
        }
        // query params
        if ($data_file !== null) {
            $queryParams['dataFile'] = ObjectSerializer::toQueryValue($data_file);
        }
        // query params
        if ($is_write_over !== null) {
            $queryParams['isWriteOver'] = ObjectSerializer::toQueryValue($is_write_over);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPutWorkbookCreate'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorkbookPutWorkbookWaterMarker
     *
     * Set workbook background image.
     *
     * @param  string $name name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  \Aspose\Cells\Cloud\Model\TextWaterMarkerRequest $text_water_marker_request The text water marker request. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutWorkbookWaterMarker($name, $folder = null, $storage_name = null, $text_water_marker_request = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorkbookPutWorkbookWaterMarkerWithHttpInfo($name, $folder, $storage_name, $text_water_marker_request);
        return $response;
    }

    /**
     * Operation cellsWorkbookPutWorkbookWaterMarkerWithHttpInfo
     *
     * Set workbook background image.
     *
     * @param  string $name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  \Aspose\Cells\Cloud\Model\TextWaterMarkerRequest $text_water_marker_request The text water marker request. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutWorkbookWaterMarkerWithHttpInfo($name, $folder = null, $storage_name = null, $text_water_marker_request = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPutWorkbookWaterMarkerRequest($name, $folder, $storage_name, $text_water_marker_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorkbookPutWorkbookWaterMarkerAsync
     *
     * Set workbook background image.
     *
     * @param  string $name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  \Aspose\Cells\Cloud\Model\TextWaterMarkerRequest $text_water_marker_request The text water marker request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutWorkbookWaterMarkerAsync($name, $folder = null, $storage_name = null, $text_water_marker_request = null)
    {
        return $this->cellsWorkbookPutWorkbookWaterMarkerAsyncWithHttpInfo($name, $folder, $storage_name, $text_water_marker_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorkbookPutWorkbookWaterMarkerAsyncWithHttpInfo
     *
     * Set workbook background image.
     *
     * @param  string $name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  \Aspose\Cells\Cloud\Model\TextWaterMarkerRequest $text_water_marker_request The text water marker request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorkbookPutWorkbookWaterMarkerAsyncWithHttpInfo($name, $folder = null, $storage_name = null, $text_water_marker_request = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorkbookPutWorkbookWaterMarkerRequest($name, $folder, $storage_name, $text_water_marker_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorkbookPutWorkbookWaterMarker'
     *
     * @param  string $name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     * @param  \Aspose\Cells\Cloud\Model\TextWaterMarkerRequest $text_water_marker_request The text water marker request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorkbookPutWorkbookWaterMarkerRequest($name, $folder = null, $storage_name = null, $text_water_marker_request = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorkbookPutWorkbookWaterMarker'
            );
        }

        $resourcePath = '/cells/{name}/watermarker';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($text_water_marker_request)) {
            $_tempBody = $text_water_marker_request;
            $_tempBodyName =str_replace('_','', 'text_water_marker_request');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorkbookPutWorkbookWaterMarker'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetValidationsDeleteWorksheetValidation
     *
     * Delete worksheet validation by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsDeleteWorksheetValidation($name, $sheet_name, $validation_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetValidationsDeleteWorksheetValidationWithHttpInfo($name, $sheet_name, $validation_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetValidationsDeleteWorksheetValidationWithHttpInfo
     *
     * Delete worksheet validation by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsDeleteWorksheetValidationWithHttpInfo($name, $sheet_name, $validation_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetValidationsDeleteWorksheetValidationRequest($name, $sheet_name, $validation_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetValidationsDeleteWorksheetValidationAsync
     *
     * Delete worksheet validation by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsDeleteWorksheetValidationAsync($name, $sheet_name, $validation_index, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetValidationsDeleteWorksheetValidationAsyncWithHttpInfo($name, $sheet_name, $validation_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetValidationsDeleteWorksheetValidationAsyncWithHttpInfo
     *
     * Delete worksheet validation by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsDeleteWorksheetValidationAsyncWithHttpInfo($name, $sheet_name, $validation_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetValidationsDeleteWorksheetValidationRequest($name, $sheet_name, $validation_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetValidationsDeleteWorksheetValidation'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetValidationsDeleteWorksheetValidationRequest($name, $sheet_name, $validation_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetValidationsDeleteWorksheetValidation'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetValidationsDeleteWorksheetValidation'
            );
        }
        // verify the required parameter 'validation_index' is set
        if ($validation_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validation_index when calling cellsWorksheetValidationsDeleteWorksheetValidation'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($validation_index !== null) {
            $resourcePath = str_replace(
                '{' . 'validationIndex' . '}',
                ObjectSerializer::toPathValue($validation_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetValidationsDeleteWorksheetValidation'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetValidationsDeleteWorksheetValidations
     *
     * Clear all validation in worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsDeleteWorksheetValidations($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetValidationsDeleteWorksheetValidationsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetValidationsDeleteWorksheetValidationsWithHttpInfo
     *
     * Clear all validation in worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsDeleteWorksheetValidationsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetValidationsDeleteWorksheetValidationsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetValidationsDeleteWorksheetValidationsAsync
     *
     * Clear all validation in worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsDeleteWorksheetValidationsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetValidationsDeleteWorksheetValidationsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetValidationsDeleteWorksheetValidationsAsyncWithHttpInfo
     *
     * Clear all validation in worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsDeleteWorksheetValidationsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetValidationsDeleteWorksheetValidationsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetValidationsDeleteWorksheetValidations'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetValidationsDeleteWorksheetValidationsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetValidationsDeleteWorksheetValidations'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetValidationsDeleteWorksheetValidations'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/validations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetValidationsDeleteWorksheetValidations'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetValidationsGetWorksheetValidation
     *
     * Get worksheet validation by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ValidationResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsGetWorksheetValidation($name, $sheet_name, $validation_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetValidationsGetWorksheetValidationWithHttpInfo($name, $sheet_name, $validation_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetValidationsGetWorksheetValidationWithHttpInfo
     *
     * Get worksheet validation by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ValidationResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsGetWorksheetValidationWithHttpInfo($name, $sheet_name, $validation_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ValidationResponse';
        $request = $this->cellsWorksheetValidationsGetWorksheetValidationRequest($name, $sheet_name, $validation_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ValidationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetValidationsGetWorksheetValidationAsync
     *
     * Get worksheet validation by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsGetWorksheetValidationAsync($name, $sheet_name, $validation_index, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetValidationsGetWorksheetValidationAsyncWithHttpInfo($name, $sheet_name, $validation_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetValidationsGetWorksheetValidationAsyncWithHttpInfo
     *
     * Get worksheet validation by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsGetWorksheetValidationAsyncWithHttpInfo($name, $sheet_name, $validation_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ValidationResponse';
        $request = $this->cellsWorksheetValidationsGetWorksheetValidationRequest($name, $sheet_name, $validation_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetValidationsGetWorksheetValidation'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetValidationsGetWorksheetValidationRequest($name, $sheet_name, $validation_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetValidationsGetWorksheetValidation'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetValidationsGetWorksheetValidation'
            );
        }
        // verify the required parameter 'validation_index' is set
        if ($validation_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validation_index when calling cellsWorksheetValidationsGetWorksheetValidation'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($validation_index !== null) {
            $resourcePath = str_replace(
                '{' . 'validationIndex' . '}',
                ObjectSerializer::toPathValue($validation_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetValidationsGetWorksheetValidation'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetValidationsGetWorksheetValidations
     *
     * Get worksheet validations.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ValidationsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsGetWorksheetValidations($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetValidationsGetWorksheetValidationsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetValidationsGetWorksheetValidationsWithHttpInfo
     *
     * Get worksheet validations.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ValidationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsGetWorksheetValidationsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ValidationsResponse';
        $request = $this->cellsWorksheetValidationsGetWorksheetValidationsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ValidationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetValidationsGetWorksheetValidationsAsync
     *
     * Get worksheet validations.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsGetWorksheetValidationsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetValidationsGetWorksheetValidationsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetValidationsGetWorksheetValidationsAsyncWithHttpInfo
     *
     * Get worksheet validations.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsGetWorksheetValidationsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ValidationsResponse';
        $request = $this->cellsWorksheetValidationsGetWorksheetValidationsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetValidationsGetWorksheetValidations'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetValidationsGetWorksheetValidationsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetValidationsGetWorksheetValidations'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetValidationsGetWorksheetValidations'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/validations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetValidationsGetWorksheetValidations'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetValidationsPostWorksheetValidation
     *
     * Update worksheet validation by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Validation $validation validation (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ValidationResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsPostWorksheetValidation($name, $sheet_name, $validation_index, $validation = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetValidationsPostWorksheetValidationWithHttpInfo($name, $sheet_name, $validation_index, $validation, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetValidationsPostWorksheetValidationWithHttpInfo
     *
     * Update worksheet validation by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Validation $validation (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ValidationResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsPostWorksheetValidationWithHttpInfo($name, $sheet_name, $validation_index, $validation = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ValidationResponse';
        $request = $this->cellsWorksheetValidationsPostWorksheetValidationRequest($name, $sheet_name, $validation_index, $validation, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ValidationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetValidationsPostWorksheetValidationAsync
     *
     * Update worksheet validation by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Validation $validation (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsPostWorksheetValidationAsync($name, $sheet_name, $validation_index, $validation = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetValidationsPostWorksheetValidationAsyncWithHttpInfo($name, $sheet_name, $validation_index, $validation, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetValidationsPostWorksheetValidationAsyncWithHttpInfo
     *
     * Update worksheet validation by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Validation $validation (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsPostWorksheetValidationAsyncWithHttpInfo($name, $sheet_name, $validation_index, $validation = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ValidationResponse';
        $request = $this->cellsWorksheetValidationsPostWorksheetValidationRequest($name, $sheet_name, $validation_index, $validation, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetValidationsPostWorksheetValidation'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $validation_index The validation index. (required)
     * @param  \Aspose\Cells\Cloud\Model\Validation $validation (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetValidationsPostWorksheetValidationRequest($name, $sheet_name, $validation_index, $validation = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetValidationsPostWorksheetValidation'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetValidationsPostWorksheetValidation'
            );
        }
        // verify the required parameter 'validation_index' is set
        if ($validation_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validation_index when calling cellsWorksheetValidationsPostWorksheetValidation'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($validation_index !== null) {
            $resourcePath = str_replace(
                '{' . 'validationIndex' . '}',
                ObjectSerializer::toPathValue($validation_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($validation)) {
            $_tempBody = $validation;
            $_tempBodyName =str_replace('_','', 'validation');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetValidationsPostWorksheetValidation'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetValidationsPutWorksheetValidation
     *
     * Add worksheet validation at index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range Specified cells area (optional)
     * @param  \Aspose\Cells\Cloud\Model\Validation $validation validation (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ValidationResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsPutWorksheetValidation($name, $sheet_name, $range = null, $validation = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetValidationsPutWorksheetValidationWithHttpInfo($name, $sheet_name, $range, $validation, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetValidationsPutWorksheetValidationWithHttpInfo
     *
     * Add worksheet validation at index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range Specified cells area (optional)
     * @param  \Aspose\Cells\Cloud\Model\Validation $validation validation (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ValidationResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsPutWorksheetValidationWithHttpInfo($name, $sheet_name, $range = null, $validation = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ValidationResponse';
        $request = $this->cellsWorksheetValidationsPutWorksheetValidationRequest($name, $sheet_name, $range, $validation, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ValidationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetValidationsPutWorksheetValidationAsync
     *
     * Add worksheet validation at index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range Specified cells area (optional)
     * @param  \Aspose\Cells\Cloud\Model\Validation $validation validation (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsPutWorksheetValidationAsync($name, $sheet_name, $range = null, $validation = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetValidationsPutWorksheetValidationAsyncWithHttpInfo($name, $sheet_name, $range, $validation, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetValidationsPutWorksheetValidationAsyncWithHttpInfo
     *
     * Add worksheet validation at index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range Specified cells area (optional)
     * @param  \Aspose\Cells\Cloud\Model\Validation $validation validation (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetValidationsPutWorksheetValidationAsyncWithHttpInfo($name, $sheet_name, $range = null, $validation = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ValidationResponse';
        $request = $this->cellsWorksheetValidationsPutWorksheetValidationRequest($name, $sheet_name, $range, $validation, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetValidationsPutWorksheetValidation'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $range Specified cells area (optional)
     * @param  \Aspose\Cells\Cloud\Model\Validation $validation validation (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetValidationsPutWorksheetValidationRequest($name, $sheet_name, $range = null, $validation = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetValidationsPutWorksheetValidation'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetValidationsPutWorksheetValidation'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/validations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($validation)) {
            $_tempBody = $validation;
            $_tempBodyName =str_replace('_','', 'validation');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetValidationsPutWorksheetValidation'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsDeleteUnprotectWorksheet
     *
     * Unprotect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. Only password is used here. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteUnprotectWorksheet($name, $sheet_name, $protect_parameter = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsDeleteUnprotectWorksheetWithHttpInfo($name, $sheet_name, $protect_parameter, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsDeleteUnprotectWorksheetWithHttpInfo
     *
     * Unprotect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. Only password is used here. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteUnprotectWorksheetWithHttpInfo($name, $sheet_name, $protect_parameter = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteUnprotectWorksheetRequest($name, $sheet_name, $protect_parameter, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsDeleteUnprotectWorksheetAsync
     *
     * Unprotect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. Only password is used here. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteUnprotectWorksheetAsync($name, $sheet_name, $protect_parameter = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsDeleteUnprotectWorksheetAsyncWithHttpInfo($name, $sheet_name, $protect_parameter, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsDeleteUnprotectWorksheetAsyncWithHttpInfo
     *
     * Unprotect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. Only password is used here. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteUnprotectWorksheetAsyncWithHttpInfo($name, $sheet_name, $protect_parameter = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteUnprotectWorksheetRequest($name, $sheet_name, $protect_parameter, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsDeleteUnprotectWorksheet'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. Only password is used here. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsDeleteUnprotectWorksheetRequest($name, $sheet_name, $protect_parameter = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsDeleteUnprotectWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsDeleteUnprotectWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/protection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($protect_parameter)) {
            $_tempBody = $protect_parameter;
            $_tempBodyName =str_replace('_','', 'protect_parameter');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsDeleteUnprotectWorksheet'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheet
     *
     * Delete worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheet($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsDeleteWorksheetWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetWithHttpInfo
     *
     * Delete worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetAsync
     *
     * Delete worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsDeleteWorksheetAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetAsyncWithHttpInfo
     *
     * Delete worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsDeleteWorksheet'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsDeleteWorksheetRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsDeleteWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsDeleteWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsDeleteWorksheet'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetBackground
     *
     * Set worksheet background image.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetBackground($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsDeleteWorksheetBackgroundWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetBackgroundWithHttpInfo
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetBackgroundWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetBackgroundRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetBackgroundAsync
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetBackgroundAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsDeleteWorksheetBackgroundAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetBackgroundAsyncWithHttpInfo
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetBackgroundAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetBackgroundRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsDeleteWorksheetBackground'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsDeleteWorksheetBackgroundRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsDeleteWorksheetBackground'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsDeleteWorksheetBackground'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/background';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsDeleteWorksheetBackground'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetComment
     *
     * Delete worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetComment($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsDeleteWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetCommentWithHttpInfo
     *
     * Delete worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetCommentRequest($name, $sheet_name, $cell_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetCommentAsync
     *
     * Delete worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetCommentAsync($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsDeleteWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetCommentAsyncWithHttpInfo
     *
     * Delete worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetCommentRequest($name, $sheet_name, $cell_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsDeleteWorksheetComment'
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsDeleteWorksheetCommentRequest($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsDeleteWorksheetComment'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsDeleteWorksheetComment'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsWorksheetsDeleteWorksheetComment'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/comments/{cellName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsDeleteWorksheetComment'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetComments
     *
     * Delete all comments for worksheet.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetComments($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsDeleteWorksheetCommentsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetCommentsWithHttpInfo
     *
     * Delete all comments for worksheet.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetCommentsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetCommentsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetCommentsAsync
     *
     * Delete all comments for worksheet.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetCommentsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsDeleteWorksheetCommentsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetCommentsAsyncWithHttpInfo
     *
     * Delete all comments for worksheet.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetCommentsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetCommentsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsDeleteWorksheetComments'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsDeleteWorksheetCommentsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsDeleteWorksheetComments'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsDeleteWorksheetComments'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsDeleteWorksheetComments'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetFreezePanes
     *
     * Unfreeze panes
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $row row (required)
     * @param  int $column column (required)
     * @param  int $freezed_rows freezed_rows (required)
     * @param  int $freezed_columns freezed_columns (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetFreezePanes($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsDeleteWorksheetFreezePanesWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetFreezePanesWithHttpInfo
     *
     * Unfreeze panes
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetFreezePanesWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetFreezePanesRequest($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetFreezePanesAsync
     *
     * Unfreeze panes
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetFreezePanesAsync($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsDeleteWorksheetFreezePanesAsyncWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetFreezePanesAsyncWithHttpInfo
     *
     * Unfreeze panes
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetFreezePanesAsyncWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetFreezePanesRequest($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsDeleteWorksheetFreezePanes'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsDeleteWorksheetFreezePanesRequest($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsDeleteWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsDeleteWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'row' is set
        if ($row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row when calling cellsWorksheetsDeleteWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'column' is set
        if ($column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column when calling cellsWorksheetsDeleteWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'freezed_rows' is set
        if ($freezed_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freezed_rows when calling cellsWorksheetsDeleteWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'freezed_columns' is set
        if ($freezed_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freezed_columns when calling cellsWorksheetsDeleteWorksheetFreezePanes'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/freezepanes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($freezed_rows !== null) {
            $queryParams['freezedRows'] = ObjectSerializer::toQueryValue($freezed_rows);
        }
        // query params
        if ($freezed_columns !== null) {
            $queryParams['freezedColumns'] = ObjectSerializer::toQueryValue($freezed_columns);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsDeleteWorksheetFreezePanes'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheets
     *
     * Read worksheets info.
     *
     * @param  string $name name (required)
     * @param  \Aspose\Cells\Cloud\Model\MatchConditionRequest $match_condition match_condition (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheets($name, $match_condition, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsDeleteWorksheetsWithHttpInfo($name, $match_condition, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetsWithHttpInfo
     *
     * Read worksheets info.
     *
     * @param  string $name (required)
     * @param  \Aspose\Cells\Cloud\Model\MatchConditionRequest $match_condition (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetsWithHttpInfo($name, $match_condition, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetsRequest($name, $match_condition, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetsAsync
     *
     * Read worksheets info.
     *
     * @param  string $name (required)
     * @param  \Aspose\Cells\Cloud\Model\MatchConditionRequest $match_condition (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetsAsync($name, $match_condition, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsDeleteWorksheetsAsyncWithHttpInfo($name, $match_condition, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetsAsyncWithHttpInfo
     *
     * Read worksheets info.
     *
     * @param  string $name (required)
     * @param  \Aspose\Cells\Cloud\Model\MatchConditionRequest $match_condition (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsDeleteWorksheetsAsyncWithHttpInfo($name, $match_condition, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetsRequest($name, $match_condition, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsDeleteWorksheets'
     *
     * @param  string $name (required)
     * @param  \Aspose\Cells\Cloud\Model\MatchConditionRequest $match_condition (required)
     * @param  string $folder (optional)
     * @param  string $storage_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsDeleteWorksheetsRequest($name, $match_condition, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsDeleteWorksheets'
            );
        }
        // verify the required parameter 'match_condition' is set
        if ($match_condition === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $match_condition when calling cellsWorksheetsDeleteWorksheets'
            );
        }

        $resourcePath = '/cells/{name}/worksheets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($match_condition)) {
            $_tempBody = $match_condition;
            $_tempBodyName =str_replace('_','', 'match_condition');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsDeleteWorksheets'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetNamedRanges
     *
     * Read worksheets ranges info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\RangesResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetNamedRanges($name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsGetNamedRangesWithHttpInfo($name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetNamedRangesWithHttpInfo
     *
     * Read worksheets ranges info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\RangesResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetNamedRangesWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RangesResponse';
        $request = $this->cellsWorksheetsGetNamedRangesRequest($name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\RangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetNamedRangesAsync
     *
     * Read worksheets ranges info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetNamedRangesAsync($name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsGetNamedRangesAsyncWithHttpInfo($name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetNamedRangesAsyncWithHttpInfo
     *
     * Read worksheets ranges info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetNamedRangesAsyncWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RangesResponse';
        $request = $this->cellsWorksheetsGetNamedRangesRequest($name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetNamedRanges'
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsGetNamedRangesRequest($name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetNamedRanges'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/ranges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsGetNamedRanges'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetPageCount
     *
     * Get page count for worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetPageCount($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsGetPageCountWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetPageCountWithHttpInfo
     *
     * Get page count for worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetPageCountWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = 'object';
        $request = $this->cellsWorksheetsGetPageCountRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetPageCountAsync
     *
     * Get page count for worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetPageCountAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsGetPageCountAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetPageCountAsyncWithHttpInfo
     *
     * Get page count for worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetPageCountAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = 'object';
        $request = $this->cellsWorksheetsGetPageCountRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetPageCount'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsGetPageCountRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetPageCount'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetPageCount'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/pagecount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsGetPageCount'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheet
     *
     * Read worksheet info or export.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $format The exported file format. (optional)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  string $area Exported area. (optional)
     * @param  int $page_index Exported page index. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheet($name, $sheet_name, $format = null, $vertical_resolution = '0', $horizontal_resolution = '0', $area = null, $page_index = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsGetWorksheetWithHttpInfo($name, $sheet_name, $format, $vertical_resolution, $horizontal_resolution, $area, $page_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetWithHttpInfo
     *
     * Read worksheet info or export.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $format The exported file format. (optional)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  string $area Exported area. (optional)
     * @param  int $page_index Exported page index. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetWithHttpInfo($name, $sheet_name, $format = null, $vertical_resolution = '0', $horizontal_resolution = '0', $area = null, $page_index = null, $folder = null, $storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsWorksheetsGetWorksheetRequest($name, $sheet_name, $format, $vertical_resolution, $horizontal_resolution, $area, $page_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetAsync
     *
     * Read worksheet info or export.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $format The exported file format. (optional)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  string $area Exported area. (optional)
     * @param  int $page_index Exported page index. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetAsync($name, $sheet_name, $format = null, $vertical_resolution = '0', $horizontal_resolution = '0', $area = null, $page_index = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsGetWorksheetAsyncWithHttpInfo($name, $sheet_name, $format, $vertical_resolution, $horizontal_resolution, $area, $page_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetAsyncWithHttpInfo
     *
     * Read worksheet info or export.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $format The exported file format. (optional)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  string $area Exported area. (optional)
     * @param  int $page_index Exported page index. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetAsyncWithHttpInfo($name, $sheet_name, $format = null, $vertical_resolution = '0', $horizontal_resolution = '0', $area = null, $page_index = null, $folder = null, $storage_name = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsWorksheetsGetWorksheetRequest($name, $sheet_name, $format, $vertical_resolution, $horizontal_resolution, $area, $page_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheet'
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $format The exported file format. (optional)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  string $area Exported area. (optional)
     * @param  int $page_index Exported page index. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsGetWorksheetRequest($name, $sheet_name, $format = null, $vertical_resolution = '0', $horizontal_resolution = '0', $area = null, $page_index = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($vertical_resolution !== null) {
            $queryParams['verticalResolution'] = ObjectSerializer::toQueryValue($vertical_resolution);
        }
        // query params
        if ($horizontal_resolution !== null) {
            $queryParams['horizontalResolution'] = ObjectSerializer::toQueryValue($horizontal_resolution);
        }
        // query params
        if ($area !== null) {
            $queryParams['area'] = ObjectSerializer::toQueryValue($area);
        }
        // query params
        if ($page_index !== null) {
            $queryParams['pageIndex'] = ObjectSerializer::toQueryValue($page_index);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsGetWorksheet'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCalculateFormula
     *
     * Calculate formula value.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $formula The formula. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SingleValueResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetCalculateFormula($name, $sheet_name, $formula, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsGetWorksheetCalculateFormulaWithHttpInfo($name, $sheet_name, $formula, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCalculateFormulaWithHttpInfo
     *
     * Calculate formula value.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $formula The formula. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SingleValueResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetCalculateFormulaWithHttpInfo($name, $sheet_name, $formula, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SingleValueResponse';
        $request = $this->cellsWorksheetsGetWorksheetCalculateFormulaRequest($name, $sheet_name, $formula, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SingleValueResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCalculateFormulaAsync
     *
     * Calculate formula value.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $formula The formula. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetCalculateFormulaAsync($name, $sheet_name, $formula, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsGetWorksheetCalculateFormulaAsyncWithHttpInfo($name, $sheet_name, $formula, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCalculateFormulaAsyncWithHttpInfo
     *
     * Calculate formula value.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $formula The formula. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetCalculateFormulaAsyncWithHttpInfo($name, $sheet_name, $formula, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SingleValueResponse';
        $request = $this->cellsWorksheetsGetWorksheetCalculateFormulaRequest($name, $sheet_name, $formula, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheetCalculateFormula'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $formula The formula. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsGetWorksheetCalculateFormulaRequest($name, $sheet_name, $formula, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheetCalculateFormula'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheetCalculateFormula'
            );
        }
        // verify the required parameter 'formula' is set
        if ($formula === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formula when calling cellsWorksheetsGetWorksheetCalculateFormula'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/formulaResult';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($formula !== null) {
            $queryParams['formula'] = ObjectSerializer::toQueryValue($formula);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsGetWorksheetCalculateFormula'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetComment
     *
     * Get worksheet comment by cell name.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CommentResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetComment($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsGetWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCommentWithHttpInfo
     *
     * Get worksheet comment by cell name.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CommentResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CommentResponse';
        $request = $this->cellsWorksheetsGetWorksheetCommentRequest($name, $sheet_name, $cell_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CommentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCommentAsync
     *
     * Get worksheet comment by cell name.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetCommentAsync($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsGetWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCommentAsyncWithHttpInfo
     *
     * Get worksheet comment by cell name.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CommentResponse';
        $request = $this->cellsWorksheetsGetWorksheetCommentRequest($name, $sheet_name, $cell_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheetComment'
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsGetWorksheetCommentRequest($name, $sheet_name, $cell_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheetComment'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheetComment'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsWorksheetsGetWorksheetComment'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/comments/{cellName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsGetWorksheetComment'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetComments
     *
     * Get worksheet comments.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CommentsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetComments($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsGetWorksheetCommentsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCommentsWithHttpInfo
     *
     * Get worksheet comments.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CommentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetCommentsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CommentsResponse';
        $request = $this->cellsWorksheetsGetWorksheetCommentsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CommentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCommentsAsync
     *
     * Get worksheet comments.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetCommentsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsGetWorksheetCommentsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCommentsAsyncWithHttpInfo
     *
     * Get worksheet comments.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetCommentsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CommentsResponse';
        $request = $this->cellsWorksheetsGetWorksheetCommentsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheetComments'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsGetWorksheetCommentsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheetComments'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheetComments'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsGetWorksheetComments'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCell
     *
     * Get worksheet merged cell by its index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $merged_cell_index Merged cell index. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\MergedCellResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetMergedCell($name, $sheet_name, $merged_cell_index, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsGetWorksheetMergedCellWithHttpInfo($name, $sheet_name, $merged_cell_index, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCellWithHttpInfo
     *
     * Get worksheet merged cell by its index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $merged_cell_index Merged cell index. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\MergedCellResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetMergedCellWithHttpInfo($name, $sheet_name, $merged_cell_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\MergedCellResponse';
        $request = $this->cellsWorksheetsGetWorksheetMergedCellRequest($name, $sheet_name, $merged_cell_index, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\MergedCellResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCellAsync
     *
     * Get worksheet merged cell by its index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $merged_cell_index Merged cell index. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetMergedCellAsync($name, $sheet_name, $merged_cell_index, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsGetWorksheetMergedCellAsyncWithHttpInfo($name, $sheet_name, $merged_cell_index, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCellAsyncWithHttpInfo
     *
     * Get worksheet merged cell by its index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $merged_cell_index Merged cell index. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetMergedCellAsyncWithHttpInfo($name, $sheet_name, $merged_cell_index, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\MergedCellResponse';
        $request = $this->cellsWorksheetsGetWorksheetMergedCellRequest($name, $sheet_name, $merged_cell_index, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheetMergedCell'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $merged_cell_index Merged cell index. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsGetWorksheetMergedCellRequest($name, $sheet_name, $merged_cell_index, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheetMergedCell'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheetMergedCell'
            );
        }
        // verify the required parameter 'merged_cell_index' is set
        if ($merged_cell_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merged_cell_index when calling cellsWorksheetsGetWorksheetMergedCell'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/mergedCells/{mergedCellIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($merged_cell_index !== null) {
            $resourcePath = str_replace(
                '{' . 'mergedCellIndex' . '}',
                ObjectSerializer::toPathValue($merged_cell_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsGetWorksheetMergedCell'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCells
     *
     * Get worksheet merged cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The workseet name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\MergedCellsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetMergedCells($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsGetWorksheetMergedCellsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCellsWithHttpInfo
     *
     * Get worksheet merged cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The workseet name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\MergedCellsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetMergedCellsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\MergedCellsResponse';
        $request = $this->cellsWorksheetsGetWorksheetMergedCellsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\MergedCellsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCellsAsync
     *
     * Get worksheet merged cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The workseet name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetMergedCellsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsGetWorksheetMergedCellsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCellsAsyncWithHttpInfo
     *
     * Get worksheet merged cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The workseet name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetMergedCellsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\MergedCellsResponse';
        $request = $this->cellsWorksheetsGetWorksheetMergedCellsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheetMergedCells'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The workseet name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsGetWorksheetMergedCellsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheetMergedCells'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheetMergedCells'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/mergedCells';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsGetWorksheetMergedCells'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetTextItems
     *
     * Get worksheet text items.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\TextItemsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetTextItems($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsGetWorksheetTextItemsWithHttpInfo($name, $sheet_name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetTextItemsWithHttpInfo
     *
     * Get worksheet text items.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\TextItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetTextItemsWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $request = $this->cellsWorksheetsGetWorksheetTextItemsRequest($name, $sheet_name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\TextItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetTextItemsAsync
     *
     * Get worksheet text items.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetTextItemsAsync($name, $sheet_name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsGetWorksheetTextItemsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetTextItemsAsyncWithHttpInfo
     *
     * Get worksheet text items.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetTextItemsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $request = $this->cellsWorksheetsGetWorksheetTextItemsRequest($name, $sheet_name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheetTextItems'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsGetWorksheetTextItemsRequest($name, $sheet_name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheetTextItems'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheetTextItems'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/textItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsGetWorksheetTextItems'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheets
     *
     * Read worksheets info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorksheetsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheets($name, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsGetWorksheetsWithHttpInfo($name, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetsWithHttpInfo
     *
     * Read worksheets info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorksheetsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetsWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetsResponse';
        $request = $this->cellsWorksheetsGetWorksheetsRequest($name, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorksheetsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetsAsync
     *
     * Read worksheets info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetsAsync($name, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsGetWorksheetsAsyncWithHttpInfo($name, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetsAsyncWithHttpInfo
     *
     * Read worksheets info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsGetWorksheetsAsyncWithHttpInfo($name, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetsResponse';
        $request = $this->cellsWorksheetsGetWorksheetsRequest($name, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheets'
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsGetWorksheetsRequest($name, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheets'
            );
        }

        $resourcePath = '/cells/{name}/worksheets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsGetWorksheets'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetColumns
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $first_column first_column (required)
     * @param  int $last_column last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options auto_fitter_options (optional)
     * @param  int $first_row first_row (optional)
     * @param  int $last_row last_row (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostAutofitWorksheetColumns($name, $sheet_name, $first_column, $last_column, $auto_fitter_options = null, $first_row = null, $last_row = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPostAutofitWorksheetColumnsWithHttpInfo($name, $sheet_name, $first_column, $last_column, $auto_fitter_options, $first_row, $last_row, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetColumnsWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  int $first_row (optional)
     * @param  int $last_row (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostAutofitWorksheetColumnsWithHttpInfo($name, $sheet_name, $first_column, $last_column, $auto_fitter_options = null, $first_row = null, $last_row = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostAutofitWorksheetColumnsRequest($name, $sheet_name, $first_column, $last_column, $auto_fitter_options, $first_row, $last_row, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetColumnsAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  int $first_row (optional)
     * @param  int $last_row (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostAutofitWorksheetColumnsAsync($name, $sheet_name, $first_column, $last_column, $auto_fitter_options = null, $first_row = null, $last_row = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPostAutofitWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $first_column, $last_column, $auto_fitter_options, $first_row, $last_row, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetColumnsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  int $first_row (optional)
     * @param  int $last_row (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostAutofitWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $first_column, $last_column, $auto_fitter_options = null, $first_row = null, $last_row = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostAutofitWorksheetColumnsRequest($name, $sheet_name, $first_column, $last_column, $auto_fitter_options, $first_row, $last_row, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostAutofitWorksheetColumns'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  int $first_row (optional)
     * @param  int $last_row (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPostAutofitWorksheetColumnsRequest($name, $sheet_name, $first_column, $last_column, $auto_fitter_options = null, $first_row = null, $last_row = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostAutofitWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostAutofitWorksheetColumns'
            );
        }
        // verify the required parameter 'first_column' is set
        if ($first_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_column when calling cellsWorksheetsPostAutofitWorksheetColumns'
            );
        }
        // verify the required parameter 'last_column' is set
        if ($last_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_column when calling cellsWorksheetsPostAutofitWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autofitcolumns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_column !== null) {
            $queryParams['firstColumn'] = ObjectSerializer::toQueryValue($first_column);
        }
        // query params
        if ($last_column !== null) {
            $queryParams['lastColumn'] = ObjectSerializer::toQueryValue($last_column);
        }
        // query params
        if ($first_row !== null) {
            $queryParams['firstRow'] = ObjectSerializer::toQueryValue($first_row);
        }
        // query params
        if ($last_row !== null) {
            $queryParams['lastRow'] = ObjectSerializer::toQueryValue($last_row);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($auto_fitter_options)) {
            $_tempBody = $auto_fitter_options;
            $_tempBodyName =str_replace('_','', 'auto_fitter_options');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPostAutofitWorksheetColumns'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRow
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $row_index row_index (required)
     * @param  int $first_column first_column (required)
     * @param  int $last_column last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options auto_fitter_options (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostAutofitWorksheetRow($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPostAutofitWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRowWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row_index (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostAutofitWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostAutofitWorksheetRowRequest($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRowAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row_index (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostAutofitWorksheetRowAsync($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPostAutofitWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRowAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row_index (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostAutofitWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostAutofitWorksheetRowRequest($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostAutofitWorksheetRow'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row_index (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPostAutofitWorksheetRowRequest($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostAutofitWorksheetRow'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostAutofitWorksheetRow'
            );
        }
        // verify the required parameter 'row_index' is set
        if ($row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_index when calling cellsWorksheetsPostAutofitWorksheetRow'
            );
        }
        // verify the required parameter 'first_column' is set
        if ($first_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_column when calling cellsWorksheetsPostAutofitWorksheetRow'
            );
        }
        // verify the required parameter 'last_column' is set
        if ($last_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_column when calling cellsWorksheetsPostAutofitWorksheetRow'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autofitrow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($row_index !== null) {
            $queryParams['rowIndex'] = ObjectSerializer::toQueryValue($row_index);
        }
        // query params
        if ($first_column !== null) {
            $queryParams['firstColumn'] = ObjectSerializer::toQueryValue($first_column);
        }
        // query params
        if ($last_column !== null) {
            $queryParams['lastColumn'] = ObjectSerializer::toQueryValue($last_column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($auto_fitter_options)) {
            $_tempBody = $auto_fitter_options;
            $_tempBodyName =str_replace('_','', 'auto_fitter_options');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPostAutofitWorksheetRow'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRows
     *
     * Autofit worksheet rows.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostAutofitWorksheetRows($name, $sheet_name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPostAutofitWorksheetRowsWithHttpInfo($name, $sheet_name, $auto_fitter_options, $start_row, $end_row, $only_auto, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRowsWithHttpInfo
     *
     * Autofit worksheet rows.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostAutofitWorksheetRowsWithHttpInfo($name, $sheet_name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostAutofitWorksheetRowsRequest($name, $sheet_name, $auto_fitter_options, $start_row, $end_row, $only_auto, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRowsAsync
     *
     * Autofit worksheet rows.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostAutofitWorksheetRowsAsync($name, $sheet_name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPostAutofitWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $auto_fitter_options, $start_row, $end_row, $only_auto, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRowsAsyncWithHttpInfo
     *
     * Autofit worksheet rows.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostAutofitWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostAutofitWorksheetRowsRequest($name, $sheet_name, $auto_fitter_options, $start_row, $end_row, $only_auto, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostAutofitWorksheetRows'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPostAutofitWorksheetRowsRequest($name, $sheet_name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostAutofitWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostAutofitWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autofitrows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($end_row !== null) {
            $queryParams['endRow'] = ObjectSerializer::toQueryValue($end_row);
        }
        // query params
        if ($only_auto !== null) {
            $queryParams['onlyAuto'] = ObjectSerializer::toQueryValue($only_auto);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($auto_fitter_options)) {
            $_tempBody = $auto_fitter_options;
            $_tempBodyName =str_replace('_','', 'auto_fitter_options');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPostAutofitWorksheetRows'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostCopyWorksheet
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $source_sheet source_sheet (required)
     * @param  \Aspose\Cells\Cloud\Model\CopyOptions $options options (optional)
     * @param  string $source_workbook source_workbook (optional)
     * @param  string $source_folder source_folder (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostCopyWorksheet($name, $sheet_name, $source_sheet, $options = null, $source_workbook = null, $source_folder = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPostCopyWorksheetWithHttpInfo($name, $sheet_name, $source_sheet, $options, $source_workbook, $source_folder, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostCopyWorksheetWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $source_sheet (required)
     * @param  \Aspose\Cells\Cloud\Model\CopyOptions $options (optional)
     * @param  string $source_workbook (optional)
     * @param  string $source_folder (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostCopyWorksheetWithHttpInfo($name, $sheet_name, $source_sheet, $options = null, $source_workbook = null, $source_folder = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostCopyWorksheetRequest($name, $sheet_name, $source_sheet, $options, $source_workbook, $source_folder, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostCopyWorksheetAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $source_sheet (required)
     * @param  \Aspose\Cells\Cloud\Model\CopyOptions $options (optional)
     * @param  string $source_workbook (optional)
     * @param  string $source_folder (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostCopyWorksheetAsync($name, $sheet_name, $source_sheet, $options = null, $source_workbook = null, $source_folder = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPostCopyWorksheetAsyncWithHttpInfo($name, $sheet_name, $source_sheet, $options, $source_workbook, $source_folder, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostCopyWorksheetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $source_sheet (required)
     * @param  \Aspose\Cells\Cloud\Model\CopyOptions $options (optional)
     * @param  string $source_workbook (optional)
     * @param  string $source_folder (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostCopyWorksheetAsyncWithHttpInfo($name, $sheet_name, $source_sheet, $options = null, $source_workbook = null, $source_folder = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostCopyWorksheetRequest($name, $sheet_name, $source_sheet, $options, $source_workbook, $source_folder, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostCopyWorksheet'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $source_sheet (required)
     * @param  \Aspose\Cells\Cloud\Model\CopyOptions $options (optional)
     * @param  string $source_workbook (optional)
     * @param  string $source_folder (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPostCopyWorksheetRequest($name, $sheet_name, $source_sheet, $options = null, $source_workbook = null, $source_folder = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostCopyWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostCopyWorksheet'
            );
        }
        // verify the required parameter 'source_sheet' is set
        if ($source_sheet === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_sheet when calling cellsWorksheetsPostCopyWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($source_sheet !== null) {
            $queryParams['sourceSheet'] = ObjectSerializer::toQueryValue($source_sheet);
        }
        // query params
        if ($source_workbook !== null) {
            $queryParams['sourceWorkbook'] = ObjectSerializer::toQueryValue($source_workbook);
        }
        // query params
        if ($source_folder !== null) {
            $queryParams['sourceFolder'] = ObjectSerializer::toQueryValue($source_folder);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($options)) {
            $_tempBody = $options;
            $_tempBodyName =str_replace('_','', 'options');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPostCopyWorksheet'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostMoveWorksheet
     *
     * Move worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorksheetMovingRequest $moving with moving parameters. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostMoveWorksheet($name, $sheet_name, $moving = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPostMoveWorksheetWithHttpInfo($name, $sheet_name, $moving, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostMoveWorksheetWithHttpInfo
     *
     * Move worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorksheetMovingRequest $moving with moving parameters. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostMoveWorksheetWithHttpInfo($name, $sheet_name, $moving = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostMoveWorksheetRequest($name, $sheet_name, $moving, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostMoveWorksheetAsync
     *
     * Move worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorksheetMovingRequest $moving with moving parameters. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostMoveWorksheetAsync($name, $sheet_name, $moving = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPostMoveWorksheetAsyncWithHttpInfo($name, $sheet_name, $moving, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostMoveWorksheetAsyncWithHttpInfo
     *
     * Move worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorksheetMovingRequest $moving with moving parameters. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostMoveWorksheetAsyncWithHttpInfo($name, $sheet_name, $moving = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostMoveWorksheetRequest($name, $sheet_name, $moving, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostMoveWorksheet'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorksheetMovingRequest $moving with moving parameters. (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPostMoveWorksheetRequest($name, $sheet_name, $moving = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostMoveWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostMoveWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/position';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($moving)) {
            $_tempBody = $moving;
            $_tempBodyName =str_replace('_','', 'moving');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPostMoveWorksheet'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostRenameWorksheet
     *
     * Rename worksheet
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $newname newname (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostRenameWorksheet($name, $sheet_name, $newname, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPostRenameWorksheetWithHttpInfo($name, $sheet_name, $newname, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostRenameWorksheetWithHttpInfo
     *
     * Rename worksheet
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $newname (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostRenameWorksheetWithHttpInfo($name, $sheet_name, $newname, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostRenameWorksheetRequest($name, $sheet_name, $newname, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostRenameWorksheetAsync
     *
     * Rename worksheet
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $newname (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostRenameWorksheetAsync($name, $sheet_name, $newname, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPostRenameWorksheetAsyncWithHttpInfo($name, $sheet_name, $newname, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostRenameWorksheetAsyncWithHttpInfo
     *
     * Rename worksheet
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $newname (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostRenameWorksheetAsyncWithHttpInfo($name, $sheet_name, $newname, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostRenameWorksheetRequest($name, $sheet_name, $newname, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostRenameWorksheet'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $newname (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPostRenameWorksheetRequest($name, $sheet_name, $newname, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostRenameWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostRenameWorksheet'
            );
        }
        // verify the required parameter 'newname' is set
        if ($newname === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newname when calling cellsWorksheetsPostRenameWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/rename';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($newname !== null) {
            $queryParams['newname'] = ObjectSerializer::toQueryValue($newname);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPostRenameWorksheet'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetProperty
     *
     * Update worksheet property
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\Worksheet $sheet sheet (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostUpdateWorksheetProperty($name, $sheet_name, $sheet = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPostUpdateWorksheetPropertyWithHttpInfo($name, $sheet_name, $sheet, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetPropertyWithHttpInfo
     *
     * Update worksheet property
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\Worksheet $sheet (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostUpdateWorksheetPropertyWithHttpInfo($name, $sheet_name, $sheet = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostUpdateWorksheetPropertyRequest($name, $sheet_name, $sheet, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetPropertyAsync
     *
     * Update worksheet property
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\Worksheet $sheet (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostUpdateWorksheetPropertyAsync($name, $sheet_name, $sheet = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPostUpdateWorksheetPropertyAsyncWithHttpInfo($name, $sheet_name, $sheet, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetPropertyAsyncWithHttpInfo
     *
     * Update worksheet property
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\Worksheet $sheet (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostUpdateWorksheetPropertyAsyncWithHttpInfo($name, $sheet_name, $sheet = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostUpdateWorksheetPropertyRequest($name, $sheet_name, $sheet, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostUpdateWorksheetProperty'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\Worksheet $sheet (optional)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPostUpdateWorksheetPropertyRequest($name, $sheet_name, $sheet = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostUpdateWorksheetProperty'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostUpdateWorksheetProperty'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($sheet)) {
            $_tempBody = $sheet;
            $_tempBodyName =str_replace('_','', 'sheet');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPostUpdateWorksheetProperty'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetZoom
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $value value (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostUpdateWorksheetZoom($name, $sheet_name, $value, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPostUpdateWorksheetZoomWithHttpInfo($name, $sheet_name, $value, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetZoomWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $value (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostUpdateWorksheetZoomWithHttpInfo($name, $sheet_name, $value, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostUpdateWorksheetZoomRequest($name, $sheet_name, $value, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetZoomAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $value (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostUpdateWorksheetZoomAsync($name, $sheet_name, $value, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPostUpdateWorksheetZoomAsyncWithHttpInfo($name, $sheet_name, $value, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetZoomAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $value (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostUpdateWorksheetZoomAsyncWithHttpInfo($name, $sheet_name, $value, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostUpdateWorksheetZoomRequest($name, $sheet_name, $value, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostUpdateWorksheetZoom'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $value (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPostUpdateWorksheetZoomRequest($name, $sheet_name, $value, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostUpdateWorksheetZoom'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostUpdateWorksheetZoom'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling cellsWorksheetsPostUpdateWorksheetZoom'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/zoom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPostUpdateWorksheetZoom'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostWorksheetComment
     *
     * Update worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorksheetComment($name, $sheet_name, $cell_name, $comment = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPostWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $comment, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostWorksheetCommentWithHttpInfo
     *
     * Update worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $comment = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostWorksheetCommentRequest($name, $sheet_name, $cell_name, $comment, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostWorksheetCommentAsync
     *
     * Update worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorksheetCommentAsync($name, $sheet_name, $cell_name, $comment = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPostWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $comment, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostWorksheetCommentAsyncWithHttpInfo
     *
     * Update worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $comment = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostWorksheetCommentRequest($name, $sheet_name, $cell_name, $comment, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostWorksheetComment'
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPostWorksheetCommentRequest($name, $sheet_name, $cell_name, $comment = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostWorksheetComment'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostWorksheetComment'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsWorksheetsPostWorksheetComment'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/comments/{cellName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($comment)) {
            $_tempBody = $comment;
            $_tempBodyName =str_replace('_','', 'comment');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPostWorksheetComment'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostWorksheetRangeSort
     *
     * Sort worksheet range.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_area The range to sort. (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter with sorting settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorksheetRangeSort($name, $sheet_name, $cell_area, $data_sorter = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPostWorksheetRangeSortWithHttpInfo($name, $sheet_name, $cell_area, $data_sorter, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostWorksheetRangeSortWithHttpInfo
     *
     * Sort worksheet range.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_area The range to sort. (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter with sorting settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorksheetRangeSortWithHttpInfo($name, $sheet_name, $cell_area, $data_sorter = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostWorksheetRangeSortRequest($name, $sheet_name, $cell_area, $data_sorter, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostWorksheetRangeSortAsync
     *
     * Sort worksheet range.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_area The range to sort. (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter with sorting settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorksheetRangeSortAsync($name, $sheet_name, $cell_area, $data_sorter = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPostWorksheetRangeSortAsyncWithHttpInfo($name, $sheet_name, $cell_area, $data_sorter, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostWorksheetRangeSortAsyncWithHttpInfo
     *
     * Sort worksheet range.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_area The range to sort. (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter with sorting settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorksheetRangeSortAsyncWithHttpInfo($name, $sheet_name, $cell_area, $data_sorter = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPostWorksheetRangeSortRequest($name, $sheet_name, $cell_area, $data_sorter, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostWorksheetRangeSort'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_area The range to sort. (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter with sorting settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPostWorksheetRangeSortRequest($name, $sheet_name, $cell_area, $data_sorter = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostWorksheetRangeSort'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostWorksheetRangeSort'
            );
        }
        // verify the required parameter 'cell_area' is set
        if ($cell_area === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_area when calling cellsWorksheetsPostWorksheetRangeSort'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/sort';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cell_area !== null) {
            $queryParams['cellArea'] = ObjectSerializer::toQueryValue($cell_area);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($data_sorter)) {
            $_tempBody = $data_sorter;
            $_tempBodyName =str_replace('_','', 'data_sorter');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPostWorksheetRangeSort'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostWorksheetTextSearch
     *
     * Search text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $text Text to search. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\TextItemsResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorksheetTextSearch($name, $sheet_name, $text, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPostWorksheetTextSearchWithHttpInfo($name, $sheet_name, $text, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostWorksheetTextSearchWithHttpInfo
     *
     * Search text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $text Text to search. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\TextItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorksheetTextSearchWithHttpInfo($name, $sheet_name, $text, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $request = $this->cellsWorksheetsPostWorksheetTextSearchRequest($name, $sheet_name, $text, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\TextItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostWorksheetTextSearchAsync
     *
     * Search text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $text Text to search. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorksheetTextSearchAsync($name, $sheet_name, $text, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPostWorksheetTextSearchAsyncWithHttpInfo($name, $sheet_name, $text, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostWorksheetTextSearchAsyncWithHttpInfo
     *
     * Search text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $text Text to search. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorksheetTextSearchAsyncWithHttpInfo($name, $sheet_name, $text, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $request = $this->cellsWorksheetsPostWorksheetTextSearchRequest($name, $sheet_name, $text, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostWorksheetTextSearch'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $text Text to search. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPostWorksheetTextSearchRequest($name, $sheet_name, $text, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostWorksheetTextSearch'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostWorksheetTextSearch'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling cellsWorksheetsPostWorksheetTextSearch'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/findText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPostWorksheetTextSearch'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostWorsheetTextReplace
     *
     * Replace text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $old_value The old text to replace. (required)
     * @param  string $new_value The new text to replace by. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorksheetReplaceResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorsheetTextReplace($name, $sheet_name, $old_value, $new_value, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPostWorsheetTextReplaceWithHttpInfo($name, $sheet_name, $old_value, $new_value, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostWorsheetTextReplaceWithHttpInfo
     *
     * Replace text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $old_value The old text to replace. (required)
     * @param  string $new_value The new text to replace by. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorksheetReplaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorsheetTextReplaceWithHttpInfo($name, $sheet_name, $old_value, $new_value, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetReplaceResponse';
        $request = $this->cellsWorksheetsPostWorsheetTextReplaceRequest($name, $sheet_name, $old_value, $new_value, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorksheetReplaceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostWorsheetTextReplaceAsync
     *
     * Replace text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $old_value The old text to replace. (required)
     * @param  string $new_value The new text to replace by. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorsheetTextReplaceAsync($name, $sheet_name, $old_value, $new_value, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPostWorsheetTextReplaceAsyncWithHttpInfo($name, $sheet_name, $old_value, $new_value, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostWorsheetTextReplaceAsyncWithHttpInfo
     *
     * Replace text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $old_value The old text to replace. (required)
     * @param  string $new_value The new text to replace by. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPostWorsheetTextReplaceAsyncWithHttpInfo($name, $sheet_name, $old_value, $new_value, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetReplaceResponse';
        $request = $this->cellsWorksheetsPostWorsheetTextReplaceRequest($name, $sheet_name, $old_value, $new_value, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostWorsheetTextReplace'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $old_value The old text to replace. (required)
     * @param  string $new_value The new text to replace by. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPostWorsheetTextReplaceRequest($name, $sheet_name, $old_value, $new_value, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostWorsheetTextReplace'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostWorsheetTextReplace'
            );
        }
        // verify the required parameter 'old_value' is set
        if ($old_value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $old_value when calling cellsWorksheetsPostWorsheetTextReplace'
            );
        }
        // verify the required parameter 'new_value' is set
        if ($new_value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_value when calling cellsWorksheetsPostWorsheetTextReplace'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/replaceText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($old_value !== null) {
            $queryParams['oldValue'] = ObjectSerializer::toQueryValue($old_value);
        }
        // query params
        if ($new_value !== null) {
            $queryParams['newValue'] = ObjectSerializer::toQueryValue($new_value);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPostWorsheetTextReplace'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPutAddNewWorksheet
     *
     * Add new worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The new sheet name. (required)
     * @param  int $position The new sheet position. (optional)
     * @param  string $sheettype The new sheet type. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutAddNewWorksheet($name, $sheet_name, $position = null, $sheettype = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPutAddNewWorksheetWithHttpInfo($name, $sheet_name, $position, $sheettype, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPutAddNewWorksheetWithHttpInfo
     *
     * Add new worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The new sheet name. (required)
     * @param  int $position The new sheet position. (optional)
     * @param  string $sheettype The new sheet type. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutAddNewWorksheetWithHttpInfo($name, $sheet_name, $position = null, $sheettype = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPutAddNewWorksheetRequest($name, $sheet_name, $position, $sheettype, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPutAddNewWorksheetAsync
     *
     * Add new worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The new sheet name. (required)
     * @param  int $position The new sheet position. (optional)
     * @param  string $sheettype The new sheet type. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutAddNewWorksheetAsync($name, $sheet_name, $position = null, $sheettype = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPutAddNewWorksheetAsyncWithHttpInfo($name, $sheet_name, $position, $sheettype, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPutAddNewWorksheetAsyncWithHttpInfo
     *
     * Add new worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The new sheet name. (required)
     * @param  int $position The new sheet position. (optional)
     * @param  string $sheettype The new sheet type. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutAddNewWorksheetAsyncWithHttpInfo($name, $sheet_name, $position = null, $sheettype = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPutAddNewWorksheetRequest($name, $sheet_name, $position, $sheettype, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPutAddNewWorksheet'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The new sheet name. (required)
     * @param  int $position The new sheet position. (optional)
     * @param  string $sheettype The new sheet type. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPutAddNewWorksheetRequest($name, $sheet_name, $position = null, $sheettype = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPutAddNewWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPutAddNewWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($sheettype !== null) {
            $queryParams['sheettype'] = ObjectSerializer::toQueryValue($sheettype);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPutAddNewWorksheet'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPutChangeVisibilityWorksheet
     *
     * Change worksheet visibility.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  bool $is_visible New worksheet visibility value. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutChangeVisibilityWorksheet($name, $sheet_name, $is_visible, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPutChangeVisibilityWorksheetWithHttpInfo($name, $sheet_name, $is_visible, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPutChangeVisibilityWorksheetWithHttpInfo
     *
     * Change worksheet visibility.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  bool $is_visible New worksheet visibility value. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutChangeVisibilityWorksheetWithHttpInfo($name, $sheet_name, $is_visible, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPutChangeVisibilityWorksheetRequest($name, $sheet_name, $is_visible, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPutChangeVisibilityWorksheetAsync
     *
     * Change worksheet visibility.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  bool $is_visible New worksheet visibility value. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutChangeVisibilityWorksheetAsync($name, $sheet_name, $is_visible, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPutChangeVisibilityWorksheetAsyncWithHttpInfo($name, $sheet_name, $is_visible, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPutChangeVisibilityWorksheetAsyncWithHttpInfo
     *
     * Change worksheet visibility.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  bool $is_visible New worksheet visibility value. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutChangeVisibilityWorksheetAsyncWithHttpInfo($name, $sheet_name, $is_visible, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPutChangeVisibilityWorksheetRequest($name, $sheet_name, $is_visible, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPutChangeVisibilityWorksheet'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  bool $is_visible New worksheet visibility value. (required)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPutChangeVisibilityWorksheetRequest($name, $sheet_name, $is_visible, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPutChangeVisibilityWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPutChangeVisibilityWorksheet'
            );
        }
        // verify the required parameter 'is_visible' is set
        if ($is_visible === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_visible when calling cellsWorksheetsPutChangeVisibilityWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/visible';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($is_visible !== null) {
            $queryParams['isVisible'] = ObjectSerializer::toQueryValue($is_visible);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPutChangeVisibilityWorksheet'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPutProtectWorksheet
     *
     * Protect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutProtectWorksheet($name, $sheet_name, $protect_parameter = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPutProtectWorksheetWithHttpInfo($name, $sheet_name, $protect_parameter, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPutProtectWorksheetWithHttpInfo
     *
     * Protect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutProtectWorksheetWithHttpInfo($name, $sheet_name, $protect_parameter = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPutProtectWorksheetRequest($name, $sheet_name, $protect_parameter, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPutProtectWorksheetAsync
     *
     * Protect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutProtectWorksheetAsync($name, $sheet_name, $protect_parameter = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPutProtectWorksheetAsyncWithHttpInfo($name, $sheet_name, $protect_parameter, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPutProtectWorksheetAsyncWithHttpInfo
     *
     * Protect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutProtectWorksheetAsyncWithHttpInfo($name, $sheet_name, $protect_parameter = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPutProtectWorksheetRequest($name, $sheet_name, $protect_parameter, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPutProtectWorksheet'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. (optional)
     * @param  string $folder Document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPutProtectWorksheetRequest($name, $sheet_name, $protect_parameter = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPutProtectWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPutProtectWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/protection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($protect_parameter)) {
            $_tempBody = $protect_parameter;
            $_tempBodyName =str_replace('_','', 'protect_parameter');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPutProtectWorksheet'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPutWorksheetBackground
     *
     * Set worksheet background image.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $png png (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutWorksheetBackground($name, $sheet_name, $png, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPutWorksheetBackgroundWithHttpInfo($name, $sheet_name, $png, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPutWorksheetBackgroundWithHttpInfo
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $png (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutWorksheetBackgroundWithHttpInfo($name, $sheet_name, $png, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPutWorksheetBackgroundRequest($name, $sheet_name, $png, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPutWorksheetBackgroundAsync
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $png (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutWorksheetBackgroundAsync($name, $sheet_name, $png, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPutWorksheetBackgroundAsyncWithHttpInfo($name, $sheet_name, $png, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPutWorksheetBackgroundAsyncWithHttpInfo
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $png (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutWorksheetBackgroundAsyncWithHttpInfo($name, $sheet_name, $png, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPutWorksheetBackgroundRequest($name, $sheet_name, $png, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPutWorksheetBackground'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $png (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPutWorksheetBackgroundRequest($name, $sheet_name, $png, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPutWorksheetBackground'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPutWorksheetBackground'
            );
        }
        // verify the required parameter 'png' is set
        if ($png === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $png when calling cellsWorksheetsPutWorksheetBackground'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/background';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($png)) {
            $_tempBody = $png;
            $_tempBodyName =str_replace('_','', 'png');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPutWorksheetBackground'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPutWorksheetComment
     *
     * Add worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CommentResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutWorksheetComment($name, $sheet_name, $cell_name, $comment = null, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPutWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $comment, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPutWorksheetCommentWithHttpInfo
     *
     * Add worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CommentResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $comment = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CommentResponse';
        $request = $this->cellsWorksheetsPutWorksheetCommentRequest($name, $sheet_name, $cell_name, $comment, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CommentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPutWorksheetCommentAsync
     *
     * Add worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutWorksheetCommentAsync($name, $sheet_name, $cell_name, $comment = null, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPutWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $comment, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPutWorksheetCommentAsyncWithHttpInfo
     *
     * Add worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $comment = null, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CommentResponse';
        $request = $this->cellsWorksheetsPutWorksheetCommentRequest($name, $sheet_name, $cell_name, $comment, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPutWorksheetComment'
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPutWorksheetCommentRequest($name, $sheet_name, $cell_name, $comment = null, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPutWorksheetComment'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPutWorksheetComment'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsWorksheetsPutWorksheetComment'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/comments/{cellName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($comment)) {
            $_tempBody = $comment;
            $_tempBodyName =str_replace('_','', 'comment');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPutWorksheetComment'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPutWorksheetFreezePanes
     *
     * Set freeze panes
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $row row (required)
     * @param  int $column column (required)
     * @param  int $freezed_rows freezed_rows (required)
     * @param  int $freezed_columns freezed_columns (required)
     * @param  string $folder folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CellsCloudResponse
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutWorksheetFreezePanes($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->cellsWorksheetsPutWorksheetFreezePanesWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder, $storage_name);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPutWorksheetFreezePanesWithHttpInfo
     *
     * Set freeze panes
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CellsCloudResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutWorksheetFreezePanesWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPutWorksheetFreezePanesRequest($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CellsCloudResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPutWorksheetFreezePanesAsync
     *
     * Set freeze panes
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutWorksheetFreezePanesAsync($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null, $storage_name = null)
    {
        return $this->cellsWorksheetsPutWorksheetFreezePanesAsyncWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPutWorksheetFreezePanesAsyncWithHttpInfo
     *
     * Set freeze panes
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function cellsWorksheetsPutWorksheetFreezePanesAsyncWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $request = $this->cellsWorksheetsPutWorksheetFreezePanesRequest($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPutWorksheetFreezePanes'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage_name storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function cellsWorksheetsPutWorksheetFreezePanesRequest($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null, $storage_name = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPutWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPutWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'row' is set
        if ($row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row when calling cellsWorksheetsPutWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'column' is set
        if ($column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column when calling cellsWorksheetsPutWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'freezed_rows' is set
        if ($freezed_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freezed_rows when calling cellsWorksheetsPutWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'freezed_columns' is set
        if ($freezed_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freezed_columns when calling cellsWorksheetsPutWorksheetFreezePanes'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/freezepanes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($freezed_rows !== null) {
            $queryParams['freezedRows'] = ObjectSerializer::toQueryValue($freezed_rows);
        }
        // query params
        if ($freezed_columns !== null) {
            $queryParams['freezedColumns'] = ObjectSerializer::toQueryValue($freezed_columns);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('cellsWorksheetsPutWorksheetFreezePanes'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation copyFile
     *
     * Copy file
     *
     * @param  string $src_path Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $dest_path Destination file path (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     * @param  string $version_id File version ID to copy (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
     /**
     * @deprecated 
     */
    public function copyFile_($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null, $version_id = null)
    {
        $this->checkAccessToken();
        $this->copyFileWithHttpInfo($src_path, $dest_path, $src_storage_name, $dest_storage_name, $version_id);
    }

    /**
     * Operation copyFileWithHttpInfo
     *
     * Copy file
     *
     * @param  string $src_path Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $dest_path Destination file path (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     * @param  string $version_id File version ID to copy (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function copyFileWithHttpInfo($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null, $version_id = null)
    {
        $returnType = '';
        $request = $this->copyFileRequest($src_path, $dest_path, $src_storage_name, $dest_storage_name, $version_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation copyFileAsync
     *
     * Copy file
     *
     * @param  string $src_path Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $dest_path Destination file path (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     * @param  string $version_id File version ID to copy (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function copyFileAsync($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null, $version_id = null)
    {
        return $this->copyFileAsyncWithHttpInfo($src_path, $dest_path, $src_storage_name, $dest_storage_name, $version_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation copyFileAsyncWithHttpInfo
     *
     * Copy file
     *
     * @param  string $src_path Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $dest_path Destination file path (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     * @param  string $version_id File version ID to copy (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function copyFileAsyncWithHttpInfo($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null, $version_id = null)
    {
        $returnType = '';
        $request = $this->copyFileRequest($src_path, $dest_path, $src_storage_name, $dest_storage_name, $version_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'copyFile'
     *
     * @param  string $src_path Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $dest_path Destination file path (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     * @param  string $version_id File version ID to copy (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function copyFileRequest($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null, $version_id = null)
    {
        // verify the required parameter 'src_path' is set
        if ($src_path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $src_path when calling copyFile'
            );
        }
        // verify the required parameter 'dest_path' is set
        if ($dest_path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest_path when calling copyFile'
            );
        }

        $resourcePath = '/cells/storage/file/copy/{srcPath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dest_path !== null) {
            $queryParams['destPath'] = ObjectSerializer::toQueryValue($dest_path);
        }
        // query params
        if ($src_storage_name !== null) {
            $queryParams['srcStorageName'] = ObjectSerializer::toQueryValue($src_storage_name);
        }
        // query params
        if ($dest_storage_name !== null) {
            $queryParams['destStorageName'] = ObjectSerializer::toQueryValue($dest_storage_name);
        }
        // query params
        if ($version_id !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($version_id);
        }

        // path params
        if ($src_path !== null) {
            $resourcePath = str_replace(
                '{' . 'srcPath' . '}',
                ObjectSerializer::toPathValue($src_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('copyFile'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation copyFolder
     *
     * Copy folder
     *
     * @param  string $src_path Source folder path e.g. &#39;/src&#39; (required)
     * @param  string $dest_path Destination folder path e.g. &#39;/dst&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
     /**
     * @deprecated 
     */
    public function copyFolder_($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null)
    {
        $this->checkAccessToken();
        $this->copyFolderWithHttpInfo($src_path, $dest_path, $src_storage_name, $dest_storage_name);
    }

    /**
     * Operation copyFolderWithHttpInfo
     *
     * Copy folder
     *
     * @param  string $src_path Source folder path e.g. &#39;/src&#39; (required)
     * @param  string $dest_path Destination folder path e.g. &#39;/dst&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function copyFolderWithHttpInfo($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null)
    {
        $returnType = '';
        $request = $this->copyFolderRequest($src_path, $dest_path, $src_storage_name, $dest_storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation copyFolderAsync
     *
     * Copy folder
     *
     * @param  string $src_path Source folder path e.g. &#39;/src&#39; (required)
     * @param  string $dest_path Destination folder path e.g. &#39;/dst&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function copyFolderAsync($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null)
    {
        return $this->copyFolderAsyncWithHttpInfo($src_path, $dest_path, $src_storage_name, $dest_storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation copyFolderAsyncWithHttpInfo
     *
     * Copy folder
     *
     * @param  string $src_path Source folder path e.g. &#39;/src&#39; (required)
     * @param  string $dest_path Destination folder path e.g. &#39;/dst&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function copyFolderAsyncWithHttpInfo($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null)
    {
        $returnType = '';
        $request = $this->copyFolderRequest($src_path, $dest_path, $src_storage_name, $dest_storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'copyFolder'
     *
     * @param  string $src_path Source folder path e.g. &#39;/src&#39; (required)
     * @param  string $dest_path Destination folder path e.g. &#39;/dst&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function copyFolderRequest($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null)
    {
        // verify the required parameter 'src_path' is set
        if ($src_path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $src_path when calling copyFolder'
            );
        }
        // verify the required parameter 'dest_path' is set
        if ($dest_path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest_path when calling copyFolder'
            );
        }

        $resourcePath = '/cells/storage/folder/copy/{srcPath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dest_path !== null) {
            $queryParams['destPath'] = ObjectSerializer::toQueryValue($dest_path);
        }
        // query params
        if ($src_storage_name !== null) {
            $queryParams['srcStorageName'] = ObjectSerializer::toQueryValue($src_storage_name);
        }
        // query params
        if ($dest_storage_name !== null) {
            $queryParams['destStorageName'] = ObjectSerializer::toQueryValue($dest_storage_name);
        }

        // path params
        if ($src_path !== null) {
            $resourcePath = str_replace(
                '{' . 'srcPath' . '}',
                ObjectSerializer::toPathValue($src_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('copyFolder'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createFolder
     *
     * Create the folder
     *
     * @param  string $path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
     /**
     * @deprecated 
     */
    public function createFolder_($path, $storage_name = null)
    {
        $this->checkAccessToken();
        $this->createFolderWithHttpInfo($path, $storage_name);
    }

    /**
     * Operation createFolderWithHttpInfo
     *
     * Create the folder
     *
     * @param  string $path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function createFolderWithHttpInfo($path, $storage_name = null)
    {
        $returnType = '';
        $request = $this->createFolderRequest($path, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createFolderAsync
     *
     * Create the folder
     *
     * @param  string $path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function createFolderAsync($path, $storage_name = null)
    {
        return $this->createFolderAsyncWithHttpInfo($path, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFolderAsyncWithHttpInfo
     *
     * Create the folder
     *
     * @param  string $path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function createFolderAsyncWithHttpInfo($path, $storage_name = null)
    {
        $returnType = '';
        $request = $this->createFolderRequest($path, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFolder'
     *
     * @param  string $path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function createFolderRequest($path, $storage_name = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling createFolder'
            );
        }

        $resourcePath = '/cells/storage/folder/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('createFolder'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFile
     *
     * Delete file
     *
     * @param  string $path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID to delete (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
     /**
     * @deprecated 
     */
    public function deleteFile_($path, $storage_name = null, $version_id = null)
    {
        $this->checkAccessToken();
        $this->deleteFileWithHttpInfo($path, $storage_name, $version_id);
    }

    /**
     * Operation deleteFileWithHttpInfo
     *
     * Delete file
     *
     * @param  string $path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID to delete (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function deleteFileWithHttpInfo($path, $storage_name = null, $version_id = null)
    {
        $returnType = '';
        $request = $this->deleteFileRequest($path, $storage_name, $version_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFileAsync
     *
     * Delete file
     *
     * @param  string $path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID to delete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function deleteFileAsync($path, $storage_name = null, $version_id = null)
    {
        return $this->deleteFileAsyncWithHttpInfo($path, $storage_name, $version_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFileAsyncWithHttpInfo
     *
     * Delete file
     *
     * @param  string $path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID to delete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function deleteFileAsyncWithHttpInfo($path, $storage_name = null, $version_id = null)
    {
        $returnType = '';
        $request = $this->deleteFileRequest($path, $storage_name, $version_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFile'
     *
     * @param  string $path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID to delete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function deleteFileRequest($path, $storage_name = null, $version_id = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling deleteFile'
            );
        }

        $resourcePath = '/cells/storage/file/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }
        // query params
        if ($version_id !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($version_id);
        }

        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('deleteFile'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFolder
     *
     * Delete folder
     *
     * @param  string $path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  bool $recursive Enable to delete folders, subfolders and files (optional, default to false)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
     /**
     * @deprecated 
     */
    public function deleteFolder_($path, $storage_name = null, $recursive = 'false')
    {
        $this->checkAccessToken();
        $this->deleteFolderWithHttpInfo($path, $storage_name, $recursive);
    }

    /**
     * Operation deleteFolderWithHttpInfo
     *
     * Delete folder
     *
     * @param  string $path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  bool $recursive Enable to delete folders, subfolders and files (optional, default to false)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function deleteFolderWithHttpInfo($path, $storage_name = null, $recursive = 'false')
    {
        $returnType = '';
        $request = $this->deleteFolderRequest($path, $storage_name, $recursive);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFolderAsync
     *
     * Delete folder
     *
     * @param  string $path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  bool $recursive Enable to delete folders, subfolders and files (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function deleteFolderAsync($path, $storage_name = null, $recursive = 'false')
    {
        return $this->deleteFolderAsyncWithHttpInfo($path, $storage_name, $recursive)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFolderAsyncWithHttpInfo
     *
     * Delete folder
     *
     * @param  string $path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  bool $recursive Enable to delete folders, subfolders and files (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function deleteFolderAsyncWithHttpInfo($path, $storage_name = null, $recursive = 'false')
    {
        $returnType = '';
        $request = $this->deleteFolderRequest($path, $storage_name, $recursive);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFolder'
     *
     * @param  string $path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  bool $recursive Enable to delete folders, subfolders and files (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function deleteFolderRequest($path, $storage_name = null, $recursive = 'false')
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling deleteFolder'
            );
        }

        $resourcePath = '/cells/storage/folder/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }
        // query params
        if ($recursive !== null) {
            $queryParams['recursive'] = ObjectSerializer::toQueryValue($recursive);
        }

        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('deleteFolder'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadFile
     *
     * Download file
     *
     * @param  string $path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID to download (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
     /**
     * @deprecated 
     */
    public function downloadFile_($path, $storage_name = null, $version_id = null)
    {
        $this->checkAccessToken();
        list($response) = $this->downloadFileWithHttpInfo($path, $storage_name, $version_id);
        return $response;
    }

    /**
     * Operation downloadFileWithHttpInfo
     *
     * Download file
     *
     * @param  string $path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID to download (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function downloadFileWithHttpInfo($path, $storage_name = null, $version_id = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->downloadFileRequest($path, $storage_name, $version_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadFileAsync
     *
     * Download file
     *
     * @param  string $path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID to download (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function downloadFileAsync($path, $storage_name = null, $version_id = null)
    {
        return $this->downloadFileAsyncWithHttpInfo($path, $storage_name, $version_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadFileAsyncWithHttpInfo
     *
     * Download file
     *
     * @param  string $path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID to download (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function downloadFileAsyncWithHttpInfo($path, $storage_name = null, $version_id = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->downloadFileRequest($path, $storage_name, $version_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadFile'
     *
     * @param  string $path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID to download (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function downloadFileRequest($path, $storage_name = null, $version_id = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling downloadFile'
            );
        }

        $resourcePath = '/cells/storage/file/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }
        // query params
        if ($version_id !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($version_id);
        }

        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['multipart/form-data'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('downloadFile'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDiscUsage
     *
     * Get disc usage
     *
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\DiscUsage
     */
     /**
     * @deprecated 
     */
    public function getDiscUsage_($storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->getDiscUsageWithHttpInfo($storage_name);
        return $response;
    }

    /**
     * Operation getDiscUsageWithHttpInfo
     *
     * Get disc usage
     *
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\DiscUsage, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function getDiscUsageWithHttpInfo($storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\DiscUsage';
        $request = $this->getDiscUsageRequest($storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\DiscUsage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDiscUsageAsync
     *
     * Get disc usage
     *
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function getDiscUsageAsync($storage_name = null)
    {
        return $this->getDiscUsageAsyncWithHttpInfo($storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDiscUsageAsyncWithHttpInfo
     *
     * Get disc usage
     *
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function getDiscUsageAsyncWithHttpInfo($storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\DiscUsage';
        $request = $this->getDiscUsageRequest($storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDiscUsage'
     *
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function getDiscUsageRequest($storage_name = null)
    {

        $resourcePath = '/cells/storage/disc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }


        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('getDiscUsage'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFileVersions
     *
     * Get file versions
     *
     * @param  string $path File path e.g. &#39;/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\FileVersions
     */
     /**
     * @deprecated 
     */
    public function getFileVersions_($path, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->getFileVersionsWithHttpInfo($path, $storage_name);
        return $response;
    }

    /**
     * Operation getFileVersionsWithHttpInfo
     *
     * Get file versions
     *
     * @param  string $path File path e.g. &#39;/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\FileVersions, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function getFileVersionsWithHttpInfo($path, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileVersions';
        $request = $this->getFileVersionsRequest($path, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\FileVersions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFileVersionsAsync
     *
     * Get file versions
     *
     * @param  string $path File path e.g. &#39;/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function getFileVersionsAsync($path, $storage_name = null)
    {
        return $this->getFileVersionsAsyncWithHttpInfo($path, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFileVersionsAsyncWithHttpInfo
     *
     * Get file versions
     *
     * @param  string $path File path e.g. &#39;/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function getFileVersionsAsyncWithHttpInfo($path, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileVersions';
        $request = $this->getFileVersionsRequest($path, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFileVersions'
     *
     * @param  string $path File path e.g. &#39;/file.ext&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function getFileVersionsRequest($path, $storage_name = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling getFileVersions'
            );
        }

        $resourcePath = '/cells/storage/version/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('getFileVersions'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFilesList
     *
     * Get all files and folders within a folder
     *
     * @param  string $path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\FilesList
     */
     /**
     * @deprecated 
     */
    public function _getFilesList($path, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->getFilesListWithHttpInfo($path, $storage_name);
        return $response;
    }

    /**
     * Operation getFilesListWithHttpInfo
     *
     * Get all files and folders within a folder
     *
     * @param  string $path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\FilesList, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function getFilesListWithHttpInfo($path, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FilesList';
        $request = $this->getFilesListRequest($path, $storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\FilesList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFilesListAsync
     *
     * Get all files and folders within a folder
     *
     * @param  string $path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function getFilesListAsync($path, $storage_name = null)
    {
        return $this->getFilesListAsyncWithHttpInfo($path, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFilesListAsyncWithHttpInfo
     *
     * Get all files and folders within a folder
     *
     * @param  string $path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function getFilesListAsyncWithHttpInfo($path, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FilesList';
        $request = $this->getFilesListRequest($path, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFilesList'
     *
     * @param  string $path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function getFilesListRequest($path, $storage_name = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling getFilesList'
            );
        }

        $resourcePath = '/cells/storage/folder/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('getFilesList'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation moveFile
     *
     * Move file
     *
     * @param  string $src_path Source file path e.g. &#39;/src.ext&#39; (required)
     * @param  string $dest_path Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     * @param  string $version_id File version ID to move (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
     /**
     * @deprecated 
     */
    public function moveFile_($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null, $version_id = null)
    {
        $this->checkAccessToken();
        $this->moveFileWithHttpInfo($src_path, $dest_path, $src_storage_name, $dest_storage_name, $version_id);
    }

    /**
     * Operation moveFileWithHttpInfo
     *
     * Move file
     *
     * @param  string $src_path Source file path e.g. &#39;/src.ext&#39; (required)
     * @param  string $dest_path Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     * @param  string $version_id File version ID to move (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function moveFileWithHttpInfo($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null, $version_id = null)
    {
        $returnType = '';
        $request = $this->moveFileRequest($src_path, $dest_path, $src_storage_name, $dest_storage_name, $version_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation moveFileAsync
     *
     * Move file
     *
     * @param  string $src_path Source file path e.g. &#39;/src.ext&#39; (required)
     * @param  string $dest_path Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     * @param  string $version_id File version ID to move (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function moveFileAsync($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null, $version_id = null)
    {
        return $this->moveFileAsyncWithHttpInfo($src_path, $dest_path, $src_storage_name, $dest_storage_name, $version_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moveFileAsyncWithHttpInfo
     *
     * Move file
     *
     * @param  string $src_path Source file path e.g. &#39;/src.ext&#39; (required)
     * @param  string $dest_path Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     * @param  string $version_id File version ID to move (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function moveFileAsyncWithHttpInfo($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null, $version_id = null)
    {
        $returnType = '';
        $request = $this->moveFileRequest($src_path, $dest_path, $src_storage_name, $dest_storage_name, $version_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moveFile'
     *
     * @param  string $src_path Source file path e.g. &#39;/src.ext&#39; (required)
     * @param  string $dest_path Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     * @param  string $version_id File version ID to move (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function moveFileRequest($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null, $version_id = null)
    {
        // verify the required parameter 'src_path' is set
        if ($src_path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $src_path when calling moveFile'
            );
        }
        // verify the required parameter 'dest_path' is set
        if ($dest_path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest_path when calling moveFile'
            );
        }

        $resourcePath = '/cells/storage/file/move/{srcPath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dest_path !== null) {
            $queryParams['destPath'] = ObjectSerializer::toQueryValue($dest_path);
        }
        // query params
        if ($src_storage_name !== null) {
            $queryParams['srcStorageName'] = ObjectSerializer::toQueryValue($src_storage_name);
        }
        // query params
        if ($dest_storage_name !== null) {
            $queryParams['destStorageName'] = ObjectSerializer::toQueryValue($dest_storage_name);
        }
        // query params
        if ($version_id !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($version_id);
        }

        // path params
        if ($src_path !== null) {
            $resourcePath = str_replace(
                '{' . 'srcPath' . '}',
                ObjectSerializer::toPathValue($src_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('moveFile'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation moveFolder
     *
     * Move folder
     *
     * @param  string $src_path Folder path to move e.g. &#39;/folder&#39; (required)
     * @param  string $dest_path Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
     /**
     * @deprecated 
     */
    public function moveFolder_($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null)
    {
        $this->checkAccessToken();
        $this->moveFolderWithHttpInfo($src_path, $dest_path, $src_storage_name, $dest_storage_name);
    }

    /**
     * Operation moveFolderWithHttpInfo
     *
     * Move folder
     *
     * @param  string $src_path Folder path to move e.g. &#39;/folder&#39; (required)
     * @param  string $dest_path Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function moveFolderWithHttpInfo($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null)
    {
        $returnType = '';
        $request = $this->moveFolderRequest($src_path, $dest_path, $src_storage_name, $dest_storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation moveFolderAsync
     *
     * Move folder
     *
     * @param  string $src_path Folder path to move e.g. &#39;/folder&#39; (required)
     * @param  string $dest_path Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function moveFolderAsync($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null)
    {
        return $this->moveFolderAsyncWithHttpInfo($src_path, $dest_path, $src_storage_name, $dest_storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moveFolderAsyncWithHttpInfo
     *
     * Move folder
     *
     * @param  string $src_path Folder path to move e.g. &#39;/folder&#39; (required)
     * @param  string $dest_path Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function moveFolderAsyncWithHttpInfo($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null)
    {
        $returnType = '';
        $request = $this->moveFolderRequest($src_path, $dest_path, $src_storage_name, $dest_storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moveFolder'
     *
     * @param  string $src_path Folder path to move e.g. &#39;/folder&#39; (required)
     * @param  string $dest_path Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param  string $src_storage_name Source storage name (optional)
     * @param  string $dest_storage_name Destination storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function moveFolderRequest($src_path, $dest_path, $src_storage_name = null, $dest_storage_name = null)
    {
        // verify the required parameter 'src_path' is set
        if ($src_path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $src_path when calling moveFolder'
            );
        }
        // verify the required parameter 'dest_path' is set
        if ($dest_path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest_path when calling moveFolder'
            );
        }

        $resourcePath = '/cells/storage/folder/move/{srcPath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dest_path !== null) {
            $queryParams['destPath'] = ObjectSerializer::toQueryValue($dest_path);
        }
        // query params
        if ($src_storage_name !== null) {
            $queryParams['srcStorageName'] = ObjectSerializer::toQueryValue($src_storage_name);
        }
        // query params
        if ($dest_storage_name !== null) {
            $queryParams['destStorageName'] = ObjectSerializer::toQueryValue($dest_storage_name);
        }

        // path params
        if ($src_path !== null) {
            $resourcePath = str_replace(
                '{' . 'srcPath' . '}',
                ObjectSerializer::toPathValue($src_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('moveFolder'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oAuthPost
     *
     * Get Access token
     *
     * @param  string $grant_type Grant Type (required)
     * @param  string $client_id App SID (required)
     * @param  string $client_secret App Key (required)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\AccessTokenResponse
     */
     /**
     * @deprecated 
     */
    public function oAuthPost($grant_type, $client_id, $client_secret)
    {
        $this->checkAccessToken();
        list($response) = $this->oAuthPostWithHttpInfo($grant_type, $client_id, $client_secret);
        return $response;
    }

    /**
     * Operation oAuthPostWithHttpInfo
     *
     * Get Access token
     *
     * @param  string $grant_type Grant Type (required)
     * @param  string $client_id App SID (required)
     * @param  string $client_secret App Key (required)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\AccessTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function oAuthPostWithHttpInfo($grant_type, $client_id, $client_secret)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AccessTokenResponse';
        $request = $this->oAuthPostRequest($grant_type, $client_id, $client_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\AccessTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oAuthPostAsync
     *
     * Get Access token
     *
     * @param  string $grant_type Grant Type (required)
     * @param  string $client_id App SID (required)
     * @param  string $client_secret App Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function oAuthPostAsync($grant_type, $client_id, $client_secret)
    {
        return $this->oAuthPostAsyncWithHttpInfo($grant_type, $client_id, $client_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oAuthPostAsyncWithHttpInfo
     *
     * Get Access token
     *
     * @param  string $grant_type Grant Type (required)
     * @param  string $client_id App SID (required)
     * @param  string $client_secret App Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function oAuthPostAsyncWithHttpInfo($grant_type, $client_id, $client_secret)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AccessTokenResponse';
        $request = $this->oAuthPostRequest($grant_type, $client_id, $client_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oAuthPost'
     *
     * @param  string $grant_type Grant Type (required)
     * @param  string $client_id App SID (required)
     * @param  string $client_secret App Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function oAuthPostRequest($grant_type, $client_id, $client_secret)
    {
        // verify the required parameter 'grant_type' is set
        if ($grant_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grant_type when calling oAuthPost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling oAuthPost'
            );
        }
        // verify the required parameter 'client_secret' is set
        if ($client_secret === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_secret when calling oAuthPost'
            );
        }

        $resourcePath = '/connect/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($grant_type !== null) {
            $formParams['grant_type'] = ObjectSerializer::toFormValue($grant_type);
        }
        // form params
        if ($client_id !== null) {
            $formParams['client_id'] = ObjectSerializer::toFormValue($client_id);
        }
        // form params
        if ($client_secret !== null) {
            $formParams['client_secret'] = ObjectSerializer::toFormValue($client_secret);
        }
        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('oAuthPost'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation objectExists
     *
     * Check if file or folder exists
     *
     * @param  string $path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ObjectExist
     */
     /**
     * @deprecated 
     */
    public function objectExists_($path, $storage_name = null, $version_id = null)
    {
        $this->checkAccessToken();
        list($response) = $this->objectExistsWithHttpInfo($path, $storage_name, $version_id);
        return $response;
    }

    /**
     * Operation objectExistsWithHttpInfo
     *
     * Check if file or folder exists
     *
     * @param  string $path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ObjectExist, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function objectExistsWithHttpInfo($path, $storage_name = null, $version_id = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ObjectExist';
        $request = $this->objectExistsRequest($path, $storage_name, $version_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ObjectExist',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation objectExistsAsync
     *
     * Check if file or folder exists
     *
     * @param  string $path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function objectExistsAsync($path, $storage_name = null, $version_id = null)
    {
        return $this->objectExistsAsyncWithHttpInfo($path, $storage_name, $version_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation objectExistsAsyncWithHttpInfo
     *
     * Check if file or folder exists
     *
     * @param  string $path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function objectExistsAsyncWithHttpInfo($path, $storage_name = null, $version_id = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ObjectExist';
        $request = $this->objectExistsRequest($path, $storage_name, $version_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'objectExists'
     *
     * @param  string $path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param  string $storage_name Storage name (optional)
     * @param  string $version_id File version ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function objectExistsRequest($path, $storage_name = null, $version_id = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling objectExists'
            );
        }

        $resourcePath = '/cells/storage/exist/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }
        // query params
        if ($version_id !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($version_id);
        }

        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('objectExists'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBatchConvert
     *
     * @param  \Aspose\Cells\Cloud\Model\BatchConvertRequest $batch_convert_request batch_convert_request (required)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
     /**
     * @deprecated 
     */
    public function postBatchConvert_($batch_convert_request)
    {
        $this->checkAccessToken();
        list($response) = $this->postBatchConvertWithHttpInfo($batch_convert_request);
        return $response;
    }

    /**
     * Operation postBatchConvertWithHttpInfo
     *
     * @param  \Aspose\Cells\Cloud\Model\BatchConvertRequest $batch_convert_request (required)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function postBatchConvertWithHttpInfo($batch_convert_request)
    {
        $returnType = '\SplFileObject';
        $request = $this->postBatchConvertRequest($batch_convert_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBatchConvertAsync
     *
     * 
     *
     * @param  \Aspose\Cells\Cloud\Model\BatchConvertRequest $batch_convert_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postBatchConvertAsync($batch_convert_request)
    {
        return $this->postBatchConvertAsyncWithHttpInfo($batch_convert_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBatchConvertAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Aspose\Cells\Cloud\Model\BatchConvertRequest $batch_convert_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postBatchConvertAsyncWithHttpInfo($batch_convert_request)
    {
        $returnType = '\SplFileObject';
        $request = $this->postBatchConvertRequest($batch_convert_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBatchConvert'
     *
     * @param  \Aspose\Cells\Cloud\Model\BatchConvertRequest $batch_convert_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function postBatchConvertRequest($batch_convert_request)
    {
        // verify the required parameter 'batch_convert_request' is set
        if ($batch_convert_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_convert_request when calling postBatchConvert'
            );
        }

        $resourcePath = '/cells/batch/convert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        $_tempBodyName ;
        if (isset($batch_convert_request)) {
            $_tempBody = $batch_convert_request;
            $_tempBodyName =str_replace('_','', 'batch_convert_request');
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('postBatchConvert'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    /**
     * Operation postConvertWorkbookToDocx
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password password (optional)
     * @param  bool $check_excel_restriction check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\FileInfo
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToDocx_($file, $password = null, $check_excel_restriction = 'true')
    {
        $this->checkAccessToken();
        list($response) = $this->postConvertWorkbookToDocxWithHttpInfo($file, $password, $check_excel_restriction);
        return $response;
    }

    /**
     * Operation postConvertWorkbookToDocxWithHttpInfo
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\FileInfo, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToDocxWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToDocxRequest($file, $password, $check_excel_restriction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\FileInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConvertWorkbookToDocxAsync
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToDocxAsync($file, $password = null, $check_excel_restriction = 'true')
    {
        return $this->postConvertWorkbookToDocxAsyncWithHttpInfo($file, $password, $check_excel_restriction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConvertWorkbookToDocxAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToDocxAsyncWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToDocxRequest($file, $password, $check_excel_restriction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConvertWorkbookToDocx'
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function postConvertWorkbookToDocxRequest($file, $password = null, $check_excel_restriction = 'true')
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postConvertWorkbookToDocx'
            );
        }

        $resourcePath = '/cells/convert/docx';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($check_excel_restriction !== null) {
            $queryParams['checkExcelRestriction'] = ObjectSerializer::toQueryValue($check_excel_restriction);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            if( is_array($file)){
                foreach($file as $key => $value) {
                    $formParams[$key] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($value), 'rb');
                }
            }else {
                $formParams['file'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($file), 'rb');
            }
            
        }
        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('postConvertWorkbookToDocx'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConvertWorkbookToPDF
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password password (optional)
     * @param  bool $check_excel_restriction check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\FileInfo
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToPDF_($file, $password = null, $check_excel_restriction = 'true')
    {
        $this->checkAccessToken();
        list($response) = $this->postConvertWorkbookToPDFWithHttpInfo($file, $password, $check_excel_restriction);
        return $response;
    }

    /**
     * Operation postConvertWorkbookToPDFWithHttpInfo
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\FileInfo, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToPDFWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToPDFRequest($file, $password, $check_excel_restriction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\FileInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConvertWorkbookToPDFAsync
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToPDFAsync($file, $password = null, $check_excel_restriction = 'true')
    {
        return $this->postConvertWorkbookToPDFAsyncWithHttpInfo($file, $password, $check_excel_restriction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConvertWorkbookToPDFAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToPDFAsyncWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToPDFRequest($file, $password, $check_excel_restriction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConvertWorkbookToPDF'
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function postConvertWorkbookToPDFRequest($file, $password = null, $check_excel_restriction = 'true')
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postConvertWorkbookToPDF'
            );
        }

        $resourcePath = '/cells/convert/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($check_excel_restriction !== null) {
            $queryParams['checkExcelRestriction'] = ObjectSerializer::toQueryValue($check_excel_restriction);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            if( is_array($file)){
                foreach($file as $key => $value) {
                    $formParams[$key] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($value), 'rb');
                }
            }else {
                $formParams['file'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($file), 'rb');
            }
            
        }
        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('postConvertWorkbookToPDF'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConvertWorkbookToPNG
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password password (optional)
     * @param  bool $check_excel_restriction check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\FileInfo
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToPNG_($file, $password = null, $check_excel_restriction = 'true')
    {
        $this->checkAccessToken();
        list($response) = $this->postConvertWorkbookToPNGWithHttpInfo($file, $password, $check_excel_restriction);
        return $response;
    }

    /**
     * Operation postConvertWorkbookToPNGWithHttpInfo
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\FileInfo, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToPNGWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToPNGRequest($file, $password, $check_excel_restriction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\FileInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConvertWorkbookToPNGAsync
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToPNGAsync($file, $password = null, $check_excel_restriction = 'true')
    {
        return $this->postConvertWorkbookToPNGAsyncWithHttpInfo($file, $password, $check_excel_restriction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConvertWorkbookToPNGAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToPNGAsyncWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToPNGRequest($file, $password, $check_excel_restriction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConvertWorkbookToPNG'
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function postConvertWorkbookToPNGRequest($file, $password = null, $check_excel_restriction = 'true')
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postConvertWorkbookToPNG'
            );
        }

        $resourcePath = '/cells/convert/png';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($check_excel_restriction !== null) {
            $queryParams['checkExcelRestriction'] = ObjectSerializer::toQueryValue($check_excel_restriction);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            if( is_array($file)){
                foreach($file as $key => $value) {
                    $formParams[$key] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($value), 'rb');
                }
            }else {
                $formParams['file'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($file), 'rb');
            }
            
        }
        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('postConvertWorkbookToPNG'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConvertWorkbookToPptx
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password password (optional)
     * @param  bool $check_excel_restriction check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\FileInfo
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToPptx_($file, $password = null, $check_excel_restriction = 'true')
    {
        $this->checkAccessToken();
        list($response) = $this->postConvertWorkbookToPptxWithHttpInfo($file, $password, $check_excel_restriction);
        return $response;
    }

    /**
     * Operation postConvertWorkbookToPptxWithHttpInfo
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\FileInfo, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToPptxWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToPptxRequest($file, $password, $check_excel_restriction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\FileInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConvertWorkbookToPptxAsync
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToPptxAsync($file, $password = null, $check_excel_restriction = 'true')
    {
        return $this->postConvertWorkbookToPptxAsyncWithHttpInfo($file, $password, $check_excel_restriction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConvertWorkbookToPptxAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToPptxAsyncWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToPptxRequest($file, $password, $check_excel_restriction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConvertWorkbookToPptx'
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function postConvertWorkbookToPptxRequest($file, $password = null, $check_excel_restriction = 'true')
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postConvertWorkbookToPptx'
            );
        }

        $resourcePath = '/cells/convert/pptx';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($check_excel_restriction !== null) {
            $queryParams['checkExcelRestriction'] = ObjectSerializer::toQueryValue($check_excel_restriction);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            if( is_array($file)){
                foreach($file as $key => $value) {
                    $formParams[$key] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($value), 'rb');
                }
            }else {
                $formParams['file'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($file), 'rb');
            }
            
        }
        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('postConvertWorkbookToPptx'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    /**
     * Operation postConvertWorkbookToHtml
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password password (optional)
     * @param  bool $check_excel_restriction check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\FileInfo
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToHtml_($file, $password = null, $check_excel_restriction = 'true')
    {
        $this->checkAccessToken();
        list($response) = $this->postConvertWorkbookToHtmlWithHttpInfo($file, $password, $check_excel_restriction);
        return $response;
    }

    /**
     * Operation postConvertWorkbookToHtmlWithHttpInfo
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\FileInfo, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToHtmlWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToHtmlRequest($file, $password, $check_excel_restriction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\FileInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConvertWorkbookToHtmlAsync
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToHtmlAsync($file, $password = null, $check_excel_restriction = 'true')
    {
        return $this->postConvertWorkbookToHtmlAsyncWithHttpInfo($file, $password, $check_excel_restriction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConvertWorkbookToHtmlAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToHtmlAsyncWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToHtmlRequest($file, $password, $check_excel_restriction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConvertWorkbookToHtml'
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function postConvertWorkbookToHtmlRequest($file, $password = null, $check_excel_restriction = 'true')
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postConvertWorkbookToHtml'
            );
        }

        $resourcePath = '/cells/convert/html';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($check_excel_restriction !== null) {
            $queryParams['checkExcelRestriction'] = ObjectSerializer::toQueryValue($check_excel_restriction);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            if( is_array($file)){
                foreach($file as $key => $value) {
                    $formParams[$key] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($value), 'rb');
                }
            }else {
                $formParams['file'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($file), 'rb');
            }
            
        }
        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('postConvertWorkbookToHtml'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    /**
     * Operation postConvertWorkbookToMarkdown
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password password (optional)
     * @param  bool $check_excel_restriction check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\FileInfo
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToMarkdown_($file, $password = null, $check_excel_restriction = 'true')
    {
        $this->checkAccessToken();
        list($response) = $this->postConvertWorkbookToMarkdownWithHttpInfo($file, $password, $check_excel_restriction);
        return $response;
    }

    /**
     * Operation postConvertWorkbookToMarkdownWithHttpInfo
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\FileInfo, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToMarkdownWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToMarkdownRequest($file, $password, $check_excel_restriction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\FileInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConvertWorkbookToMarkdownAsync
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToMarkdownAsync($file, $password = null, $check_excel_restriction = 'true')
    {
        return $this->postConvertWorkbookToMarkdownAsyncWithHttpInfo($file, $password, $check_excel_restriction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConvertWorkbookToMarkdownAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToMarkdownAsyncWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToMarkdownRequest($file, $password, $check_excel_restriction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConvertWorkbookToMarkdown'
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function postConvertWorkbookToMarkdownRequest($file, $password = null, $check_excel_restriction = 'true')
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postConvertWorkbookToMarkdown'
            );
        }

        $resourcePath = '/cells/convert/markdown';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($check_excel_restriction !== null) {
            $queryParams['checkExcelRestriction'] = ObjectSerializer::toQueryValue($check_excel_restriction);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            if( is_array($file)){
                foreach($file as $key => $value) {
                    $formParams[$key] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($value), 'rb');
                }
            }else {
                $formParams['file'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($file), 'rb');
            }
            
        }
        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('postConvertWorkbookToMarkdown'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConvertWorkbookToJson
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password password (optional)
     * @param  bool $check_excel_restriction check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\FileInfo
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToJson_($file, $password = null, $check_excel_restriction = 'true')
    {
        $this->checkAccessToken();
        list($response) = $this->postConvertWorkbookToJsonWithHttpInfo($file, $password, $check_excel_restriction);
        return $response;
    }

    /**
     * Operation postConvertWorkbookToJsonWithHttpInfo
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\FileInfo, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToJsonWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToJsonRequest($file, $password, $check_excel_restriction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\FileInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConvertWorkbookToJsonAsync
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToJsonAsync($file, $password = null, $check_excel_restriction = 'true')
    {
        return $this->postConvertWorkbookToJsonAsyncWithHttpInfo($file, $password, $check_excel_restriction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConvertWorkbookToJsonAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToJsonAsyncWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToJsonRequest($file, $password, $check_excel_restriction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConvertWorkbookToJson'
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function postConvertWorkbookToJsonRequest($file, $password = null, $check_excel_restriction = 'true')
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postConvertWorkbookToJson'
            );
        }

        $resourcePath = '/cells/convert/json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($check_excel_restriction !== null) {
            $queryParams['checkExcelRestriction'] = ObjectSerializer::toQueryValue($check_excel_restriction);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            if( is_array($file)){
                foreach($file as $key => $value) {
                    $formParams[$key] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($value), 'rb');
                }
            }else {
                $formParams['file'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($file), 'rb');
            }
            
        }
        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('postConvertWorkbookToJson'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation postConvertWorkbookToSQL
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password password (optional)
     * @param  bool $check_excel_restriction check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\FileInfo
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToSQL_($file, $password = null, $check_excel_restriction = 'true')
    {
        $this->checkAccessToken();
        list($response) = $this->postConvertWorkbookToSQLWithHttpInfo($file, $password, $check_excel_restriction);
        return $response;
    }

    /**
     * Operation postConvertWorkbookToSQLWithHttpInfo
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\FileInfo, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToSQLWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToSQLRequest($file, $password, $check_excel_restriction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\FileInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConvertWorkbookToSQLAsync
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToSQLAsync($file, $password = null, $check_excel_restriction = 'true')
    {
        return $this->postConvertWorkbookToSQLAsyncWithHttpInfo($file, $password, $check_excel_restriction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConvertWorkbookToSQLAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToSQLAsyncWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToSQLRequest($file, $password, $check_excel_restriction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConvertWorkbookToSQL'
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function postConvertWorkbookToSQLRequest($file, $password = null, $check_excel_restriction = 'true')
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postConvertWorkbookToSQL'
            );
        }

        $resourcePath = '/cells/convert/sql';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($check_excel_restriction !== null) {
            $queryParams['checkExcelRestriction'] = ObjectSerializer::toQueryValue($check_excel_restriction);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            if( is_array($file)){
                foreach($file as $key => $value) {
                    $formParams[$key] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($value), 'rb');
                }
            }else {
                $formParams['file'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($file), 'rb');
            }
            
        }
        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('postConvertWorkbookToSQL'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }



    /**
     * Operation postConvertWorkbookToCSV
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password password (optional)
     * @param  bool $check_excel_restriction check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\FileInfo
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToCSV_($file, $password = null, $check_excel_restriction = 'true')
    {
        $this->checkAccessToken();
        list($response) = $this->postConvertWorkbookToCSVWithHttpInfo($file, $password, $check_excel_restriction);
        return $response;
    }

    /**
     * Operation postConvertWorkbookToCSVWithHttpInfo
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\FileInfo, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToCSVWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToCSVRequest($file, $password, $check_excel_restriction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\FileInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConvertWorkbookToCSVAsync
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToCSVAsync($file, $password = null, $check_excel_restriction = 'true')
    {
        return $this->postConvertWorkbookToCSVAsyncWithHttpInfo($file, $password, $check_excel_restriction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConvertWorkbookToCSVAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function postConvertWorkbookToCSVAsyncWithHttpInfo($file, $password = null, $check_excel_restriction = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $request = $this->postConvertWorkbookToCSVRequest($file, $password, $check_excel_restriction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConvertWorkbookToCSV'
     *
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $password (optional)
     * @param  bool $check_excel_restriction (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function postConvertWorkbookToCSVRequest($file, $password = null, $check_excel_restriction = 'true')
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postConvertWorkbookToCSV'
            );
        }

        $resourcePath = '/cells/convert/csv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($check_excel_restriction !== null) {
            $queryParams['checkExcelRestriction'] = ObjectSerializer::toQueryValue($check_excel_restriction);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            if( is_array($file)){
                foreach($file as $key => $value) {
                    $formParams[$key] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($value), 'rb');
                }
            }else {
                $formParams['file'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($file), 'rb');
            }
            
        }
        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody =  \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('postConvertWorkbookToCSV'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    /**
     * Operation storageExists
     *
     * Check if storage exists
     *
     * @param  string $storage_name Storage name (required)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\StorageExist
     */
     /**
     * @deprecated 
     */
    public function storageExists_($storage_name)
    {
        $this->checkAccessToken();
        list($response) = $this->storageExistsWithHttpInfo($storage_name);
        return $response;
    }

    /**
     * Operation storageExistsWithHttpInfo
     *
     * Check if storage exists
     *
     * @param  string $storage_name Storage name (required)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\StorageExist, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function storageExistsWithHttpInfo($storage_name)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\StorageExist';
        $request = $this->storageExistsRequest($storage_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\StorageExist',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storageExistsAsync
     *
     * Check if storage exists
     *
     * @param  string $storage_name Storage name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function storageExistsAsync($storage_name)
    {
        return $this->storageExistsAsyncWithHttpInfo($storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storageExistsAsyncWithHttpInfo
     *
     * Check if storage exists
     *
     * @param  string $storage_name Storage name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function storageExistsAsyncWithHttpInfo($storage_name)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\StorageExist';
        $request = $this->storageExistsRequest($storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storageExists'
     *
     * @param  string $storage_name Storage name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function storageExistsRequest($storage_name)
    {
        // verify the required parameter 'storage_name' is set
        if ($storage_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storage_name when calling storageExists'
            );
        }

        $resourcePath = '/cells/storage/{storageName}/exist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storage_name !== null) {
            $resourcePath = str_replace(
                '{' . 'storageName' . '}',
                ObjectSerializer::toPathValue($storage_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('storageExists'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadFile
     *
     * Upload file
     *
     * @param  string $path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header. (required)
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\FilesUploadResult
     */
     /**
     * @deprecated 
     */
    public function uploadFile_($path, $file, $storage_name = null)
    {
        $this->checkAccessToken();
        list($response) = $this->uploadFileWithHttpInfo($path, $file, $storage_name);
        return $response;
    }

    /**
     * Operation uploadFileWithHttpInfo
     *
     * Upload file
     *
     * @param  string $path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header. (required)
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\FilesUploadResult, HTTP status code, HTTP response headers (array of strings)
     */
     /**
     * @deprecated 
     */
    public function uploadFileWithHttpInfo($path, $file, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FilesUploadResult';
        $request = $this->uploadFileRequest($path, $file, $storage_name);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\FilesUploadResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadFileAsync
     *
     * Upload file
     *
     * @param  string $path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header. (required)
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function uploadFileAsync($path, $file, $storage_name = null)
    {
        return $this->uploadFileAsyncWithHttpInfo($path, $file, $storage_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadFileAsyncWithHttpInfo
     *
     * Upload file
     *
     * @param  string $path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header. (required)
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
     /**
     * @deprecated 
     */
    public function uploadFileAsyncWithHttpInfo($path, $file, $storage_name = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\FilesUploadResult';
        $request = $this->uploadFileRequest($path, $file, $storage_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadFile'
     *
     * @param  string $path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header. (required)
     * @param  \SplFileObject $file File to upload (required)
     * @param  string $storage_name Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
     /**
     * @deprecated 
     */
    protected function uploadFileRequest($path, $file, $storage_name = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling uploadFile'
            );
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling uploadFile'
            );
        }

        $resourcePath = '/cells/storage/file/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storage_name !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storage_name);
        }

        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            if( is_array($file)){
                foreach($file as $key => $value) {
                    $formParams[$key] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($value), 'rb');
                }
            }else {
                $formParams['file'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($file), 'rb');
            }
            
        }
        // body params
        $_tempBody = null;
        $_tempBodyName ;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                if (isset($_tempBody)) {
                    $httpBody = $_tempBody;
                    $multipartContents[] = [
                        'name' =>$_tempBodyName ,
                        'filename' =>$_tempBodyName ,
                        'contents' => json_encode( ObjectSerializer::sanitizeForSerialization($httpBody)) 
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }elseif (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
            else if('uploadFile'==='cellsSaveAsPostDocumentSaveAs'){
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    

    
    /*  new model */

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetAutoFilterRequest" /></param>
    public function getWorksheetAutoFilter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\AutoFilterResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetDateFilterRequest" /></param>
    public function putWorksheetDateFilter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetFilterRequest" /></param>
    public function putWorksheetFilter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetIconFilterRequest" /></param>
    public function putWorksheetIconFilter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetCustomFilterRequest" /></param>
    public function putWorksheetCustomFilter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetDynamicFilterRequest" /></param>
    public function putWorksheetDynamicFilter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetFilterTop10Request" /></param>
    public function putWorksheetFilterTop10( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetColorFilterRequest" /></param>
    public function putWorksheetColorFilter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetMatchBlanksRequest" /></param>
    public function postWorksheetMatchBlanks( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetMatchNonBlanksRequest" /></param>
    public function postWorksheetMatchNonBlanks( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetAutoFilterRefreshRequest" /></param>
    public function postWorksheetAutoFilterRefresh( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetDateFilterRequest" /></param>
    public function deleteWorksheetDateFilter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetFilterRequest" /></param>
    public function deleteWorksheetFilter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetAutoshapesRequest" /></param>
    public function getWorksheetAutoshapes( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\AutoShapesResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetAutoshapeWithFormatRequest" /></param>
    public function getWorksheetAutoshapeWithFormat( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostBatchConvertRequest" /></param>
    public function postBatchConvert( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetExtractBarcodesRequest" /></param>
    public function getExtractBarcodes( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\BarcodeResponseList';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostClearContentsRequest" /></param>
    public function postClearContents( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostClearFormatsRequest" /></param>
    public function postClearFormats( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostUpdateWorksheetRangeStyleRequest" /></param>
    public function postUpdateWorksheetRangeStyle( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetMergeRequest" /></param>
    public function postWorksheetMerge( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetUnmergeRequest" /></param>
    public function postWorksheetUnmerge( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetCellsRequest" /></param>
    public function getWorksheetCells( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetCellRequest" /></param>
    public function getWorksheetCell( $request)
    {
        $this->checkAccessToken();
        $returnType = 'string';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetCellStyleRequest" /></param>
    public function getWorksheetCellStyle( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\StyleResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetCellSetValueRequest" /></param>
    public function postWorksheetCellSetValue( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostUpdateWorksheetCellStyleRequest" /></param>
    public function postUpdateWorksheetCellStyle( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostSetCellRangeValueRequest" /></param>
    public function postSetCellRangeValue( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostCopyCellIntoCellRequest" /></param>
    public function postCopyCellIntoCell( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetCellHtmlStringRequest" /></param>
    public function getCellHtmlString( $request)
    {
        $this->checkAccessToken();
        $returnType = 'string';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostSetCellHtmlStringRequest" /></param>
    public function postSetCellHtmlString( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostCellCalculateRequest" /></param>
    public function postCellCalculate( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostCellCharactersRequest" /></param>
    public function postCellCharacters( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetColumnsRequest" /></param>
    public function getWorksheetColumns( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostSetWorksheetColumnWidthRequest" /></param>
    public function postSetWorksheetColumnWidth( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetColumnRequest" /></param>
    public function getWorksheetColumn( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\ColumnResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutInsertWorksheetColumnsRequest" /></param>
    public function putInsertWorksheetColumns( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetColumnsRequest" /></param>
    public function deleteWorksheetColumns( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostHideWorksheetColumnsRequest" /></param>
    public function postHideWorksheetColumns( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostUnhideWorksheetColumnsRequest" /></param>
    public function postUnhideWorksheetColumns( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostGroupWorksheetColumnsRequest" /></param>
    public function postGroupWorksheetColumns( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostUngroupWorksheetColumnsRequest" /></param>
    public function postUngroupWorksheetColumns( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostCopyWorksheetColumnsRequest" /></param>
    public function postCopyWorksheetColumns( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostColumnStyleRequest" /></param>
    public function postColumnStyle( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetRowsRequest" /></param>
    public function getWorksheetRows( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\RowsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetRowRequest" /></param>
    public function getWorksheetRow( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\RowResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetRowRequest" /></param>
    public function deleteWorksheetRow( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetRowsRequest" /></param>
    public function deleteWorksheetRows( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutInsertWorksheetRowsRequest" /></param>
    public function putInsertWorksheetRows( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutInsertWorksheetRowRequest" /></param>
    public function putInsertWorksheetRow( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostUpdateWorksheetRowRequest" /></param>
    public function postUpdateWorksheetRow( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostHideWorksheetRowsRequest" /></param>
    public function postHideWorksheetRows( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostUnhideWorksheetRowsRequest" /></param>
    public function postUnhideWorksheetRows( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostGroupWorksheetRowsRequest" /></param>
    public function postGroupWorksheetRows( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostUngroupWorksheetRowsRequest" /></param>
    public function postUngroupWorksheetRows( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostCopyWorksheetRowsRequest" /></param>
    public function postCopyWorksheetRows( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostRowStyleRequest" /></param>
    public function postRowStyle( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetCellsCloudServicesHealthCheckRequest" /></param>
    public function getCellsCloudServicesHealthCheck( $request)
    {
        $this->checkAccessToken();
        $returnType = 'string';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetCellsCloudServiceStatusRequest" /></param>
    public function getCellsCloudServiceStatus( $request)
    {
        $this->checkAccessToken();
        $returnType = 'string';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetChartAreaRequest" /></param>
    public function getChartArea( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\ChartAreaResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetChartAreaFillFormatRequest" /></param>
    public function getChartAreaFillFormat( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FillFormatResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetChartAreaBorderRequest" /></param>
    public function getChartAreaBorder( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\LineResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetChartsRequest" /></param>
    public function getWorksheetCharts( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\ChartsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetChartRequest" /></param>
    public function getWorksheetChart( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetAddChartRequest" /></param>
    public function putWorksheetAddChart( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetDeleteChartRequest" /></param>
    public function deleteWorksheetDeleteChart( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetChartRequest" /></param>
    public function postWorksheetChart( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetChartLegendRequest" /></param>
    public function getWorksheetChartLegend( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\LegendResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetChartLegendRequest" /></param>
    public function postWorksheetChartLegend( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetChartLegendRequest" /></param>
    public function putWorksheetChartLegend( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetChartLegendRequest" /></param>
    public function deleteWorksheetChartLegend( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetClearChartsRequest" /></param>
    public function deleteWorksheetClearCharts( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetChartTitleRequest" /></param>
    public function getWorksheetChartTitle( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\TitleResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetChartTitleRequest" /></param>
    public function postWorksheetChartTitle( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetChartTitleRequest" /></param>
    public function putWorksheetChartTitle( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetChartTitleRequest" /></param>
    public function deleteWorksheetChartTitle( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetChartSeriesAxisRequest" /></param>
    public function getChartSeriesAxis( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetChartCategoryAxisRequest" /></param>
    public function getChartCategoryAxis( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetChartValueAxisRequest" /></param>
    public function getChartValueAxis( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetChartSecondCategoryAxisRequest" /></param>
    public function getChartSecondCategoryAxis( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetChartSecondValueAxisRequest" /></param>
    public function getChartSecondValueAxis( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\AxisResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostChartSeriesAxisRequest" /></param>
    public function postChartSeriesAxis( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostChartCategoryAxisRequest" /></param>
    public function postChartCategoryAxis( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostChartValueAxisRequest" /></param>
    public function postChartValueAxis( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostChartSecondCategoryAxisRequest" /></param>
    public function postChartSecondCategoryAxis( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostChartSecondValueAxisRequest" /></param>
    public function postChartSecondValueAxis( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetConditionalFormattingsRequest" /></param>
    public function getWorksheetConditionalFormattings( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\ConditionalFormattingsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetConditionalFormattingRequest" /></param>
    public function getWorksheetConditionalFormatting( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\ConditionalFormattingResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetConditionalFormattingRequest" /></param>
    public function putWorksheetConditionalFormatting( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetFormatConditionRequest" /></param>
    public function putWorksheetFormatCondition( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetFormatConditionAreaRequest" /></param>
    public function putWorksheetFormatConditionArea( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetFormatConditionConditionRequest" /></param>
    public function putWorksheetFormatConditionCondition( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetConditionalFormattingsRequest" /></param>
    public function deleteWorksheetConditionalFormattings( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetConditionalFormattingRequest" /></param>
    public function deleteWorksheetConditionalFormatting( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetConditionalFormattingAreaRequest" /></param>
    public function deleteWorksheetConditionalFormattingArea( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorkbookRequest" /></param>
    public function getWorkbook( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutConvertWorkbookRequest" /></param>
    public function putConvertWorkbook( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorkbookSaveAsRequest" /></param>
    public function postWorkbookSaveAs( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\SaveResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostConvertWorkbookToPDFRequest" /></param>
    public function postConvertWorkbookToPDF( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostConvertWorkbookToPNGRequest" /></param>
    public function postConvertWorkbookToPNG( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostConvertWorkbookToDocxRequest" /></param>
    public function postConvertWorkbookToDocx( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostConvertWorkbookToPptxRequest" /></param>
    public function postConvertWorkbookToPptx( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostConvertWorkbookToHtmlRequest" /></param>
    public function postConvertWorkbookToHtml( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostConvertWorkbookToMarkdownRequest" /></param>
    public function postConvertWorkbookToMarkdown( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostConvertWorkbookToJsonRequest" /></param>
    public function postConvertWorkbookToJson( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostConvertWorkbookToSQLRequest" /></param>
    public function postConvertWorkbookToSQL( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostConvertWorkbookToCSVRequest" /></param>
    public function postConvertWorkbookToCSV( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }
    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetHyperlinksRequest" /></param>
    public function getWorksheetHyperlinks( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\HyperlinksResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetHyperlinkRequest" /></param>
    public function getWorksheetHyperlink( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\HyperlinkResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetHyperlinkRequest" /></param>
    public function deleteWorksheetHyperlink( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetHyperlinkRequest" /></param>
    public function postWorksheetHyperlink( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetHyperlinkRequest" /></param>
    public function putWorksheetHyperlink( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetHyperlinksRequest" /></param>
    public function deleteWorksheetHyperlinks( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostAssembleRequest" /></param>
    public function postAssemble( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostCompressRequest" /></param>
    public function postCompress( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostExportRequest" /></param>
    public function postExport( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostMergeRequest" /></param>
    public function postMerge( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FileInfo';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostUnlockRequest" /></param>
    public function postUnlock( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostProtectRequest" /></param>
    public function postProtect( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostSplitRequest" /></param>
    public function postSplit( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostSearchRequest" /></param>
    public function postSearch( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\TextItem[]';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostReplaceRequest" /></param>
    public function postReplace( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostImportRequest" /></param>
    public function postImport( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWatermarkRequest" /></param>
    public function postWatermark( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostClearObjectsRequest" /></param>
    public function postClearObjects( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostReverseRequest" /></param>
    public function postReverse( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostRotateRequest" /></param>
    public function postRotate( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostMetadataRequest" /></param>
    public function postMetadata( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetMetadataRequest" /></param>
    public function getMetadata( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsDocumentProperty[]';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteMetadataRequest" /></param>
    public function deleteMetadata( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetListObjectsRequest" /></param>
    public function getWorksheetListObjects( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\ListObjectsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetListObjectRequest" /></param>
    public function getWorksheetListObject( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetListObjectRequest" /></param>
    public function putWorksheetListObject( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetListObjectsRequest" /></param>
    public function deleteWorksheetListObjects( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetListObjectRequest" /></param>
    public function deleteWorksheetListObject( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetListObjectRequest" /></param>
    public function postWorksheetListObject( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetListObjectConvertToRangeRequest" /></param>
    public function postWorksheetListObjectConvertToRange( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetListObjectSummarizeWithPivotTableRequest" /></param>
    public function postWorksheetListObjectSummarizeWithPivotTable( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetListObjectSortTableRequest" /></param>
    public function postWorksheetListObjectSortTable( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetListColumnRequest" /></param>
    public function postWorksheetListColumn( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetListColumnsTotalRequest" /></param>
    public function postWorksheetListColumnsTotal( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetOleObjectsRequest" /></param>
    public function getWorksheetOleObjects( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\OleObjectsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetOleObjectRequest" /></param>
    public function getWorksheetOleObject( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetOleObjectsRequest" /></param>
    public function deleteWorksheetOleObjects( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetOleObjectRequest" /></param>
    public function deleteWorksheetOleObject( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostUpdateWorksheetOleObjectRequest" /></param>
    public function postUpdateWorksheetOleObject( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetOleObjectRequest" /></param>
    public function putWorksheetOleObject( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetVerticalPageBreaksRequest" /></param>
    public function getVerticalPageBreaks( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\VerticalPageBreaksResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetHorizontalPageBreaksRequest" /></param>
    public function getHorizontalPageBreaks( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\HorizontalPageBreaksResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetVerticalPageBreakRequest" /></param>
    public function getVerticalPageBreak( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\VerticalPageBreakResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetHorizontalPageBreakRequest" /></param>
    public function getHorizontalPageBreak( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\HorizontalPageBreakResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutVerticalPageBreakRequest" /></param>
    public function putVerticalPageBreak( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutHorizontalPageBreakRequest" /></param>
    public function putHorizontalPageBreak( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteVerticalPageBreaksRequest" /></param>
    public function deleteVerticalPageBreaks( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteHorizontalPageBreaksRequest" /></param>
    public function deleteHorizontalPageBreaks( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteVerticalPageBreakRequest" /></param>
    public function deleteVerticalPageBreak( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteHorizontalPageBreakRequest" /></param>
    public function deleteHorizontalPageBreak( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetPageSetupRequest" /></param>
    public function getPageSetup( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\PageSetupResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostPageSetupRequest" /></param>
    public function postPageSetup( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteHeaderFooterRequest" /></param>
    public function deleteHeaderFooter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetHeaderRequest" /></param>
    public function getHeader( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\PageSectionsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostHeaderRequest" /></param>
    public function postHeader( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetFooterRequest" /></param>
    public function getFooter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\PageSectionsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostFooterRequest" /></param>
    public function postFooter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetPicturesRequest" /></param>
    public function getWorksheetPictures( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\PicturesResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetPictureWithFormatRequest" /></param>
    public function getWorksheetPictureWithFormat( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetAddPictureRequest" /></param>
    public function putWorksheetAddPicture( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetPictureRequest" /></param>
    public function postWorksheetPicture( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetPictureRequest" /></param>
    public function deleteWorksheetPicture( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetPicturesRequest" /></param>
    public function deleteWorksheetPictures( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetPivotTablesRequest" /></param>
    public function getWorksheetPivotTables( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\PivotTablesResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetPivotTableRequest" /></param>
    public function getWorksheetPivotTable( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\PivotTableResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetPivotTableFieldRequest" /></param>
    public function getPivotTableField( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFieldResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetPivotTableFiltersRequest" /></param>
    public function getWorksheetPivotTableFilters( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFiltersResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetPivotTableFilterRequest" /></param>
    public function getWorksheetPivotTableFilter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\PivotFilterResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetPivotTableRequest" /></param>
    public function putWorksheetPivotTable( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutPivotTableFieldRequest" /></param>
    public function putPivotTableField( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetPivotTableFilterRequest" /></param>
    public function putWorksheetPivotTableFilter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostPivotTableFieldHideItemRequest" /></param>
    public function postPivotTableFieldHideItem( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostPivotTableFieldMoveToRequest" /></param>
    public function postPivotTableFieldMoveTo( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostPivotTableCellStyleRequest" /></param>
    public function postPivotTableCellStyle( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostPivotTableStyleRequest" /></param>
    public function postPivotTableStyle( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostPivotTableUpdatePivotFieldsRequest" /></param>
    public function postPivotTableUpdatePivotFields( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostPivotTableUpdatePivotFieldRequest" /></param>
    public function postPivotTableUpdatePivotField( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetPivotTableCalculateRequest" /></param>
    public function postWorksheetPivotTableCalculate( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetPivotTableMoveRequest" /></param>
    public function postWorksheetPivotTableMove( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetPivotTablesRequest" /></param>
    public function deleteWorksheetPivotTables( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetPivotTableRequest" /></param>
    public function deleteWorksheetPivotTable( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeletePivotTableFieldRequest" /></param>
    public function deletePivotTableField( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetPivotTableFiltersRequest" /></param>
    public function deleteWorksheetPivotTableFilters( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetPivotTableFilterRequest" /></param>
    public function deleteWorksheetPivotTableFilter( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetDocumentPropertiesRequest" /></param>
    public function getDocumentProperties( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsDocumentPropertiesResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetDocumentPropertyRequest" /></param>
    public function getDocumentProperty( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsDocumentPropertyResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutDocumentPropertyRequest" /></param>
    public function putDocumentProperty( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteDocumentPropertyRequest" /></param>
    public function deleteDocumentProperty( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteDocumentPropertiesRequest" /></param>
    public function deleteDocumentProperties( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetCellsRangesRequest" /></param>
    public function postWorksheetCellsRanges( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetCellsRangeMergeRequest" /></param>
    public function postWorksheetCellsRangeMerge( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetCellsRangeUnMergeRequest" /></param>
    public function postWorksheetCellsRangeUnMerge( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetCellsRangeStyleRequest" /></param>
    public function postWorksheetCellsRangeStyle( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetCellsRangeValueRequest" /></param>
    public function getWorksheetCellsRangeValue( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\RangeValueResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetCellsRangeValueRequest" /></param>
    public function postWorksheetCellsRangeValue( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetCellsRangeMoveToRequest" /></param>
    public function postWorksheetCellsRangeMoveTo( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetCellsRangeOutlineBorderRequest" /></param>
    public function postWorksheetCellsRangeOutlineBorder( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetCellsRangeColumnWidthRequest" /></param>
    public function postWorksheetCellsRangeColumnWidth( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetCellsRangeRowHeightRequest" /></param>
    public function postWorksheetCellsRangeRowHeight( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetCellsRangeRequest" /></param>
    public function putWorksheetCellsRange( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetCellsRangeRequest" /></param>
    public function deleteWorksheetCellsRange( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetShapesRequest" /></param>
    public function getWorksheetShapes( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\ShapesResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetShapeRequest" /></param>
    public function getWorksheetShape( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\ShapeResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetShapeRequest" /></param>
    public function putWorksheetShape( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetShapesRequest" /></param>
    public function deleteWorksheetShapes( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetShapeRequest" /></param>
    public function deleteWorksheetShape( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetShapeRequest" /></param>
    public function postWorksheetShape( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetGroupShapeRequest" /></param>
    public function postWorksheetGroupShape( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetUngroupShapeRequest" /></param>
    public function postWorksheetUngroupShape( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetSparklineGroupsRequest" /></param>
    public function getWorksheetSparklineGroups( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\SparklineGroupsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetSparklineGroupRequest" /></param>
    public function getWorksheetSparklineGroup( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\SparklineGroupResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetSparklineGroupsRequest" /></param>
    public function deleteWorksheetSparklineGroups( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetSparklineGroupRequest" /></param>
    public function deleteWorksheetSparklineGroup( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetSparklineGroupRequest" /></param>
    public function putWorksheetSparklineGroup( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetSparklineGroupRequest" /></param>
    public function postWorksheetSparklineGroup( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostRunTaskRequest" /></param>
    public function postRunTask( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostDigitalSignatureRequest" /></param>
    public function postDigitalSignature( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostEncryptWorkbookRequest" /></param>
    public function postEncryptWorkbook( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteDecryptWorkbookRequest" /></param>
    public function deleteDecryptWorkbook( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostProtectWorkbookRequest" /></param>
    public function postProtectWorkbook( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteUnProtectWorkbookRequest" /></param>
    public function deleteUnProtectWorkbook( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorkbookDefaultStyleRequest" /></param>
    public function getWorkbookDefaultStyle( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\StyleResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorkbookTextItemsRequest" /></param>
    public function getWorkbookTextItems( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorkbookNamesRequest" /></param>
    public function getWorkbookNames( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\NamesResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorkbookNameRequest" /></param>
    public function putWorkbookName( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorkbookNameRequest" /></param>
    public function getWorkbookName( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\NameResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorkbookNameRequest" /></param>
    public function postWorkbookName( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorkbookNameValueRequest" /></param>
    public function getWorkbookNameValue( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\RangeValueResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorkbookNamesRequest" /></param>
    public function deleteWorkbookNames( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorkbookNameRequest" /></param>
    public function deleteWorkbookName( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutDocumentProtectFromChangesRequest" /></param>
    public function putDocumentProtectFromChanges( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteDocumentUnProtectFromChangesRequest" /></param>
    public function deleteDocumentUnProtectFromChanges( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorkbooksMergeRequest" /></param>
    public function postWorkbooksMerge( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\WorkbookResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorkbooksTextSearchRequest" /></param>
    public function postWorkbooksTextSearch( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorkbookTextReplaceRequest" /></param>
    public function postWorkbookTextReplace( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\WorkbookReplaceResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorkbookGetSmartMarkerResultRequest" /></param>
    public function postWorkbookGetSmartMarkerResult( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorkbookCreateRequest" /></param>
    public function putWorkbookCreate( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorkbookSplitRequest" /></param>
    public function postWorkbookSplit( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\SplitResultResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostImportDataRequest" /></param>
    public function postImportData( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorkbookCalculateFormulaRequest" /></param>
    public function postWorkbookCalculateFormula( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostAutofitWorkbookRowsRequest" /></param>
    public function postAutofitWorkbookRows( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostAutofitWorkbookColumnsRequest" /></param>
    public function postAutofitWorkbookColumns( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorkbookSettingsRequest" /></param>
    public function getWorkbookSettings( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\WorkbookSettingsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorkbookSettingsRequest" /></param>
    public function postWorkbookSettings( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorkbookBackgroundRequest" /></param>
    public function putWorkbookBackground( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorkbookBackgroundRequest" /></param>
    public function deleteWorkbookBackground( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorkbookWaterMarkerRequest" /></param>
    public function putWorkbookWaterMarker( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetPageCountRequest" /></param>
    public function getPageCount( $request)
    {
        $this->checkAccessToken();
        $returnType = 'int';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetsRequest" /></param>
    public function getWorksheets( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetWithFormatRequest" /></param>
    public function getWorksheetWithFormat( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutChangeVisibilityWorksheetRequest" /></param>
    public function putChangeVisibilityWorksheet( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutActiveWorksheetRequest" /></param>
    public function putActiveWorksheet( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutInsertNewWorksheetRequest" /></param>
    public function putInsertNewWorksheet( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutAddNewWorksheetRequest" /></param>
    public function putAddNewWorksheet( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetRequest" /></param>
    public function deleteWorksheet( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetsRequest" /></param>
    public function deleteWorksheets( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostMoveWorksheetRequest" /></param>
    public function postMoveWorksheet( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutProtectWorksheetRequest" /></param>
    public function putProtectWorksheet( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteUnprotectWorksheetRequest" /></param>
    public function deleteUnprotectWorksheet( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetTextItemsRequest" /></param>
    public function getWorksheetTextItems( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetCommentsRequest" /></param>
    public function getWorksheetComments( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CommentsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetCommentRequest" /></param>
    public function getWorksheetComment( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CommentResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetCommentRequest" /></param>
    public function putWorksheetComment( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CommentResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetCommentRequest" /></param>
    public function postWorksheetComment( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetCommentRequest" /></param>
    public function deleteWorksheetComment( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetCommentsRequest" /></param>
    public function deleteWorksheetComments( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetMergedCellsRequest" /></param>
    public function getWorksheetMergedCells( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\MergedCellsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetMergedCellRequest" /></param>
    public function getWorksheetMergedCell( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\MergedCellResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetCalculateFormulaRequest" /></param>
    public function getWorksheetCalculateFormula( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\SingleValueResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetCalculateFormulaRequest" /></param>
    public function postWorksheetCalculateFormula( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\SingleValueResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetTextSearchRequest" /></param>
    public function postWorksheetTextSearch( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorsheetTextReplaceRequest" /></param>
    public function postWorsheetTextReplace( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetReplaceResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetRangeSortRequest" /></param>
    public function postWorksheetRangeSort( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostAutofitWorksheetRowRequest" /></param>
    public function postAutofitWorksheetRow( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostAutofitWorksheetRowsRequest" /></param>
    public function postAutofitWorksheetRows( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostAutofitWorksheetColumnsRequest" /></param>
    public function postAutofitWorksheetColumns( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetBackgroundRequest" /></param>
    public function putWorksheetBackground( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetBackgroundRequest" /></param>
    public function deleteWorksheetBackground( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetFreezePanesRequest" /></param>
    public function putWorksheetFreezePanes( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetFreezePanesRequest" /></param>
    public function deleteWorksheetFreezePanes( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostCopyWorksheetRequest" /></param>
    public function postCopyWorksheet( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostRenameWorksheetRequest" /></param>
    public function postRenameWorksheet( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostUpdateWorksheetPropertyRequest" /></param>
    public function postUpdateWorksheetProperty( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetNamedRangesRequest" /></param>
    public function getNamedRanges( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\RangesResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetNamedRangeValueRequest" /></param>
    public function getNamedRangeValue( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\RangeValueResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostUpdateWorksheetZoomRequest" /></param>
    public function postUpdateWorksheetZoom( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetPageCountRequest" /></param>
    public function getWorksheetPageCount( $request)
    {
        $this->checkAccessToken();
        $returnType = 'int';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetValidationsRequest" /></param>
    public function getWorksheetValidations( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\ValidationsResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetWorksheetValidationRequest" /></param>
    public function getWorksheetValidation( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\ValidationResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PutWorksheetValidationRequest" /></param>
    public function putWorksheetValidation( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorksheetValidationRequest" /></param>
    public function postWorksheetValidation( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetValidationRequest" /></param>
    public function deleteWorksheetValidation( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteWorksheetValidationsRequest" /></param>
    public function deleteWorksheetValidations( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\CellsCloudResponse';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }
    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorkbookExportXMLRequest" /></param>
    public function postWorkbookExportXML( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="PostWorkbookImportXMLRequest" /></param>
    public function postWorkbookImportXML( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }
    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DownloadFileRequest" /></param>
    public function downloadFile( $request)
    {
        $this->checkAccessToken();
        $returnType = '\SplFileObject';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="UploadFileRequest" /></param>
    public function uploadFile( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesUploadResult';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="CopyFileRequest" /></param>
    public function copyFile( $request)
    {
        $this->checkAccessToken();
        $returnType = '';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="MoveFileRequest" /></param>
    public function moveFile( $request)
    {
        $this->checkAccessToken();
        $returnType = '';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteFileRequest" /></param>
    public function deleteFile( $request)
    {
        $this->checkAccessToken();
        $returnType = '';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetFilesListRequest" /></param>
    public function getFilesList( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FilesList';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="CreateFolderRequest" /></param>
    public function createFolder( $request)
    {
        $this->checkAccessToken();
        $returnType = '';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="CopyFolderRequest" /></param>
    public function copyFolder( $request)
    {
        $this->checkAccessToken();
        $returnType = '';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="MoveFolderRequest" /></param>
    public function moveFolder( $request)
    {
        $this->checkAccessToken();
        $returnType = '';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="DeleteFolderRequest" /></param>
    public function deleteFolder( $request)
    {
        $this->checkAccessToken();
        $returnType = '';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="StorageExistsRequest" /></param>
    public function storageExists( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\StorageExist';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="ObjectExistsRequest" /></param>
    public function objectExists( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\ObjectExist';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetDiscUsageRequest" /></param>
    public function getDiscUsage( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\DiscUsage';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    /// <summary>
    /// </summary>
    /// <param name="request">Request. <see cref="GetFileVersionsRequest" /></param>
    public function getFileVersions( $request)
    {
        $this->checkAccessToken();
        $returnType = '\Aspose\Cells\Cloud\Model\FileVersions';
        $requesData = $request->createHttpRequest($this->headerSelector, $this->config);
        list($response) = $this->execute($requesData,$returnType);
        return  $response;
    }

    private function execute( $request , $returnType)
    {
     try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else if ($returnType === '') { 
                return [
                   null,
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
            } else {
                $content = $responseBody->getContents();
                if ( $request->getMethod() !== 'GET' ){
                    if ($returnType !== 'string') {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        $returnType,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
    public function getAccessToken($grant_type, $client_id, $client_secret ,$version = "v3.0")
    {
        $returnType = '\Aspose\Cells\Cloud\Model\AccessTokenResponse';

        if ($grant_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grant_type when calling oAuthPost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling oAuthPost'
            );
        }
        // verify the required parameter 'client_secret' is set
        if ($client_secret === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_secret when calling oAuthPost'
            );
        }

        $resourcePath = '/connect/token';
        if($version === 'v1.1'){
            $resourcePath = '/oauth2/token';
        }
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($grant_type !== null) {
            $formParams['grant_type'] = ObjectSerializer::toFormValue($grant_type);
        }
        // form params
        if ($client_id !== null) {
            $formParams['client_id'] = ObjectSerializer::toFormValue($client_id);
        }
        // form params
        if ($client_secret !== null) {
            $formParams['client_secret'] = ObjectSerializer::toFormValue($client_secret);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        $request =  new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();                
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }
            $AccessTokenResponse =  ObjectSerializer::deserialize($content, $returnType, []);
            return $AccessTokenResponse->getAccessToken();
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\AccessTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }            
    }      

}
