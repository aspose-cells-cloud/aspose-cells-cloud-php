<?php
/**
 * CellsConditionalFormattingsApi
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aspose\Cells\Cloud\ApiException;
use Aspose\Cells\Cloud\Configuration;
use Aspose\Cells\Cloud\HeaderSelector;
use Aspose\Cells\Cloud\ObjectSerializer;

/**
 * CellsConditionalFormattingsApi Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsConditionalFormattingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormatting
     *
     * Remove conditional formatting
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormatting($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        list($response) = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo($name, $sheet_name, $index, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo
     *
     * Remove conditional formatting
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingRequest($name, $sheet_name, $index, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsync
     *
     * Remove conditional formatting
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsync($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        return $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsyncWithHttpInfo($name, $sheet_name, $index, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsyncWithHttpInfo
     *
     * Remove conditional formatting
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsyncWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingRequest($name, $sheet_name, $index, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsDeleteWorksheetConditionalFormatting'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingRequest($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormatting'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormatting'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormatting'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea
     *
     * Remove cell area from conditional formatting.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $start_row start_row (required)
     * @param  int $start_column start_column (required)
     * @param  int $total_rows total_rows (required)
     * @param  int $total_columns total_columns (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage = null)
    {
        list($response) = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo
     *
     * Remove cell area from conditional formatting.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $start_row (required)
     * @param  int $start_column (required)
     * @param  int $total_rows (required)
     * @param  int $total_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsync
     *
     * Remove cell area from conditional formatting.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $start_row (required)
     * @param  int $start_column (required)
     * @param  int $total_rows (required)
     * @param  int $total_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsync($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage = null)
    {
        return $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsyncWithHttpInfo
     *
     * Remove cell area from conditional formatting.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $start_row (required)
     * @param  int $start_column (required)
     * @param  int $total_rows (required)
     * @param  int $total_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $start_row (required)
     * @param  int $start_column (required)
     * @param  int $total_rows (required)
     * @param  int $total_columns (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaRequest($name, $sheet_name, $start_row, $start_column, $total_rows, $total_columns, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
            );
        }
        // verify the required parameter 'start_row' is set
        if ($start_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_row when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
            );
        }
        // verify the required parameter 'start_column' is set
        if ($start_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_column when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
            );
        }
        // verify the required parameter 'total_rows' is set
        if ($total_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_rows when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
            );
        }
        // verify the required parameter 'total_columns' is set
        if ($total_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_columns when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings/area';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($total_rows !== null) {
            $queryParams['totalRows'] = ObjectSerializer::toQueryValue($total_rows);
        }
        // query params
        if ($total_columns !== null) {
            $queryParams['totalColumns'] = ObjectSerializer::toQueryValue($total_columns);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattings
     *
     * Clear all condition formattings
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattings($name, $sheet_name, $folder = null, $storage = null)
    {
        list($response) = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo($name, $sheet_name, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo
     *
     * Clear all condition formattings
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsRequest($name, $sheet_name, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsync
     *
     * Clear all condition formattings
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsync($name, $sheet_name, $folder = null, $storage = null)
    {
        return $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsyncWithHttpInfo
     *
     * Clear all condition formattings
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsRequest($name, $sheet_name, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsDeleteWorksheetConditionalFormattings'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsRequest($name, $sheet_name, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattings'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattings'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormatting
     *
     * Get conditional formatting
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ConditionalFormattingResponse
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormatting($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        list($response) = $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo($name, $sheet_name, $index, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo
     *
     * Get conditional formatting
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ConditionalFormattingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ConditionalFormattingResponse';
        $request = $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingRequest($name, $sheet_name, $index, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ConditionalFormattingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattingAsync
     *
     * Get conditional formatting
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattingAsync($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        return $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingAsyncWithHttpInfo($name, $sheet_name, $index, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattingAsyncWithHttpInfo
     *
     * Get conditional formatting
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattingAsyncWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ConditionalFormattingResponse';
        $request = $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingRequest($name, $sheet_name, $index, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsGetWorksheetConditionalFormatting'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsConditionalFormattingsGetWorksheetConditionalFormattingRequest($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsGetWorksheetConditionalFormatting'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsGetWorksheetConditionalFormatting'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsConditionalFormattingsGetWorksheetConditionalFormatting'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattings
     *
     * Get conditional formattings
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ConditionalFormattingsResponse
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattings($name, $sheet_name, $folder = null, $storage = null)
    {
        list($response) = $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo($name, $sheet_name, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo
     *
     * Get conditional formattings
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ConditionalFormattingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ConditionalFormattingsResponse';
        $request = $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingsRequest($name, $sheet_name, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ConditionalFormattingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattingsAsync
     *
     * Get conditional formattings
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattingsAsync($name, $sheet_name, $folder = null, $storage = null)
    {
        return $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsGetWorksheetConditionalFormattingsAsyncWithHttpInfo
     *
     * Get conditional formattings
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsGetWorksheetConditionalFormattingsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ConditionalFormattingsResponse';
        $request = $this->cellsConditionalFormattingsGetWorksheetConditionalFormattingsRequest($name, $sheet_name, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsGetWorksheetConditionalFormattings'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsConditionalFormattingsGetWorksheetConditionalFormattingsRequest($name, $sheet_name, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsGetWorksheetConditionalFormattings'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsGetWorksheetConditionalFormattings'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetConditionalFormatting
     *
     * Add a condition formatting.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $cell_area cell_area (required)
     * @param  \Aspose\Cells\Cloud\Model\FormatCondition $formatcondition formatcondition (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsConditionalFormattingsPutWorksheetConditionalFormatting($name, $sheet_name, $cell_area, $formatcondition = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo($name, $sheet_name, $cell_area, $formatcondition, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo
     *
     * Add a condition formatting.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_area (required)
     * @param  \Aspose\Cells\Cloud\Model\FormatCondition $formatcondition (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo($name, $sheet_name, $cell_area, $formatcondition = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetConditionalFormattingRequest($name, $sheet_name, $cell_area, $formatcondition, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetConditionalFormattingAsync
     *
     * Add a condition formatting.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_area (required)
     * @param  \Aspose\Cells\Cloud\Model\FormatCondition $formatcondition (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsPutWorksheetConditionalFormattingAsync($name, $sheet_name, $cell_area, $formatcondition = null, $folder = null, $storage = null)
    {
        return $this->cellsConditionalFormattingsPutWorksheetConditionalFormattingAsyncWithHttpInfo($name, $sheet_name, $cell_area, $formatcondition, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetConditionalFormattingAsyncWithHttpInfo
     *
     * Add a condition formatting.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_area (required)
     * @param  \Aspose\Cells\Cloud\Model\FormatCondition $formatcondition (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsPutWorksheetConditionalFormattingAsyncWithHttpInfo($name, $sheet_name, $cell_area, $formatcondition = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetConditionalFormattingRequest($name, $sheet_name, $cell_area, $formatcondition, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsPutWorksheetConditionalFormatting'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cell_area (required)
     * @param  \Aspose\Cells\Cloud\Model\FormatCondition $formatcondition (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsConditionalFormattingsPutWorksheetConditionalFormattingRequest($name, $sheet_name, $cell_area, $formatcondition = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsPutWorksheetConditionalFormatting'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsPutWorksheetConditionalFormatting'
            );
        }
        // verify the required parameter 'cell_area' is set
        if ($cell_area === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_area when calling cellsConditionalFormattingsPutWorksheetConditionalFormatting'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cell_area !== null) {
            $queryParams['cellArea'] = ObjectSerializer::toQueryValue($cell_area);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($formatcondition)) {
            $_tempBody = $formatcondition;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatCondition
     *
     * Add a format condition.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $cell_area cell_area (required)
     * @param  string $type type (required)
     * @param  string $operator_type operator_type (required)
     * @param  string $formula1 formula1 (required)
     * @param  string $formula2 formula2 (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsConditionalFormattingsPutWorksheetFormatCondition($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder = null, $storage = null)
    {
        list($response) = $this->cellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo
     *
     * Add a format condition.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetFormatConditionRequest($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionAsync
     *
     * Add a format condition.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionAsync($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder = null, $storage = null)
    {
        return $this->cellsConditionalFormattingsPutWorksheetFormatConditionAsyncWithHttpInfo($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionAsyncWithHttpInfo
     *
     * Add a format condition.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionAsyncWithHttpInfo($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetFormatConditionRequest($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsPutWorksheetFormatCondition'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsConditionalFormattingsPutWorksheetFormatConditionRequest($name, $sheet_name, $index, $cell_area, $type, $operator_type, $formula1, $formula2, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'cell_area' is set
        if ($cell_area === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_area when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'operator_type' is set
        if ($operator_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_type when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'formula1' is set
        if ($formula1 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formula1 when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }
        // verify the required parameter 'formula2' is set
        if ($formula2 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formula2 when calling cellsConditionalFormattingsPutWorksheetFormatCondition'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cell_area !== null) {
            $queryParams['cellArea'] = ObjectSerializer::toQueryValue($cell_area);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($operator_type !== null) {
            $queryParams['operatorType'] = ObjectSerializer::toQueryValue($operator_type);
        }
        // query params
        if ($formula1 !== null) {
            $queryParams['formula1'] = ObjectSerializer::toQueryValue($formula1);
        }
        // query params
        if ($formula2 !== null) {
            $queryParams['formula2'] = ObjectSerializer::toQueryValue($formula2);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionArea
     *
     * add a cell area for format condition
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $cell_area cell_area (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionArea($name, $sheet_name, $index, $cell_area, $folder = null, $storage = null)
    {
        list($response) = $this->cellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo($name, $sheet_name, $index, $cell_area, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo
     *
     * add a cell area for format condition
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo($name, $sheet_name, $index, $cell_area, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetFormatConditionAreaRequest($name, $sheet_name, $index, $cell_area, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionAreaAsync
     *
     * add a cell area for format condition
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionAreaAsync($name, $sheet_name, $index, $cell_area, $folder = null, $storage = null)
    {
        return $this->cellsConditionalFormattingsPutWorksheetFormatConditionAreaAsyncWithHttpInfo($name, $sheet_name, $index, $cell_area, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionAreaAsyncWithHttpInfo
     *
     * add a cell area for format condition
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionAreaAsyncWithHttpInfo($name, $sheet_name, $index, $cell_area, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetFormatConditionAreaRequest($name, $sheet_name, $index, $cell_area, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsPutWorksheetFormatConditionArea'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $cell_area (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsConditionalFormattingsPutWorksheetFormatConditionAreaRequest($name, $sheet_name, $index, $cell_area, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea'
            );
        }
        // verify the required parameter 'cell_area' is set
        if ($cell_area === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_area when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/area';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cell_area !== null) {
            $queryParams['cellArea'] = ObjectSerializer::toQueryValue($cell_area);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionCondition
     *
     * Add a condition for format condition.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $type type (required)
     * @param  string $operator_type operator_type (required)
     * @param  string $formula1 formula1 (required)
     * @param  string $formula2 formula2 (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionCondition($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder = null, $storage = null)
    {
        list($response) = $this->cellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo
     *
     * Add a condition for format condition.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetFormatConditionConditionRequest($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionConditionAsync
     *
     * Add a condition for format condition.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionConditionAsync($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder = null, $storage = null)
    {
        return $this->cellsConditionalFormattingsPutWorksheetFormatConditionConditionAsyncWithHttpInfo($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsConditionalFormattingsPutWorksheetFormatConditionConditionAsyncWithHttpInfo
     *
     * Add a condition for format condition.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsConditionalFormattingsPutWorksheetFormatConditionConditionAsyncWithHttpInfo($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsConditionalFormattingsPutWorksheetFormatConditionConditionRequest($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $type (required)
     * @param  string $operator_type (required)
     * @param  string $formula1 (required)
     * @param  string $formula2 (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsConditionalFormattingsPutWorksheetFormatConditionConditionRequest($name, $sheet_name, $index, $type, $operator_type, $formula1, $formula2, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }
        // verify the required parameter 'operator_type' is set
        if ($operator_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_type when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }
        // verify the required parameter 'formula1' is set
        if ($formula1 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formula1 when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }
        // verify the required parameter 'formula2' is set
        if ($formula2 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formula2 when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/condition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($operator_type !== null) {
            $queryParams['operatorType'] = ObjectSerializer::toQueryValue($operator_type);
        }
        // query params
        if ($formula1 !== null) {
            $queryParams['formula1'] = ObjectSerializer::toQueryValue($formula1);
        }
        // query params
        if ($formula2 !== null) {
            $queryParams['formula2'] = ObjectSerializer::toQueryValue($formula2);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
