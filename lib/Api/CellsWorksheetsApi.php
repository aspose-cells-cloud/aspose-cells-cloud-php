<?php
/**
 * CellsWorksheetsApi
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aspose\Cells\Cloud\ApiException;
use Aspose\Cells\Cloud\Configuration;
use Aspose\Cells\Cloud\HeaderSelector;
use Aspose\Cells\Cloud\ObjectSerializer;

/**
 * CellsWorksheetsApi Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsWorksheetsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cellsWorksheetsDeleteUnprotectWorksheet
     *
     * Unprotect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. Only password is used here. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorksheetResponse
     */
    public function cellsWorksheetsDeleteUnprotectWorksheet($name, $sheet_name, $protect_parameter = null, $folder = null)
    {
        list($response) = $this->cellsWorksheetsDeleteUnprotectWorksheetWithHttpInfo($name, $sheet_name, $protect_parameter, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsDeleteUnprotectWorksheetWithHttpInfo
     *
     * Unprotect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. Only password is used here. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorksheetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsDeleteUnprotectWorksheetWithHttpInfo($name, $sheet_name, $protect_parameter = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetResponse';
        $request = $this->cellsWorksheetsDeleteUnprotectWorksheetRequest($name, $sheet_name, $protect_parameter, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorksheetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsDeleteUnprotectWorksheetAsync
     *
     * Unprotect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. Only password is used here. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsDeleteUnprotectWorksheetAsync($name, $sheet_name, $protect_parameter = null, $folder = null)
    {
        return $this->cellsWorksheetsDeleteUnprotectWorksheetAsyncWithHttpInfo($name, $sheet_name, $protect_parameter, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsDeleteUnprotectWorksheetAsyncWithHttpInfo
     *
     * Unprotect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. Only password is used here. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsDeleteUnprotectWorksheetAsyncWithHttpInfo($name, $sheet_name, $protect_parameter = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetResponse';
        $request = $this->cellsWorksheetsDeleteUnprotectWorksheetRequest($name, $sheet_name, $protect_parameter, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsDeleteUnprotectWorksheet'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. Only password is used here. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsDeleteUnprotectWorksheetRequest($name, $sheet_name, $protect_parameter = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsDeleteUnprotectWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsDeleteUnprotectWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/protection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($protect_parameter)) {
            $_tempBody = $protect_parameter;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheet
     *
     * Delete worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorksheetsResponse
     */
    public function cellsWorksheetsDeleteWorksheet($name, $sheet_name, $folder = null)
    {
        list($response) = $this->cellsWorksheetsDeleteWorksheetWithHttpInfo($name, $sheet_name, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetWithHttpInfo
     *
     * Delete worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorksheetsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsDeleteWorksheetWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetsResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetRequest($name, $sheet_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorksheetsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetAsync
     *
     * Delete worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsDeleteWorksheetAsync($name, $sheet_name, $folder = null)
    {
        return $this->cellsWorksheetsDeleteWorksheetAsyncWithHttpInfo($name, $sheet_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetAsyncWithHttpInfo
     *
     * Delete worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsDeleteWorksheetAsyncWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetsResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetRequest($name, $sheet_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsDeleteWorksheet'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsDeleteWorksheetRequest($name, $sheet_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsDeleteWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsDeleteWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetBackground
     *
     * Set worksheet background image.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsDeleteWorksheetBackground($name, $sheet_name, $folder = null)
    {
        list($response) = $this->cellsWorksheetsDeleteWorksheetBackgroundWithHttpInfo($name, $sheet_name, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetBackgroundWithHttpInfo
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsDeleteWorksheetBackgroundWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetBackgroundRequest($name, $sheet_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetBackgroundAsync
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsDeleteWorksheetBackgroundAsync($name, $sheet_name, $folder = null)
    {
        return $this->cellsWorksheetsDeleteWorksheetBackgroundAsyncWithHttpInfo($name, $sheet_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetBackgroundAsyncWithHttpInfo
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsDeleteWorksheetBackgroundAsyncWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetBackgroundRequest($name, $sheet_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsDeleteWorksheetBackground'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsDeleteWorksheetBackgroundRequest($name, $sheet_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsDeleteWorksheetBackground'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsDeleteWorksheetBackground'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/background';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetComment
     *
     * Delete worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsDeleteWorksheetComment($name, $sheet_name, $cell_name, $folder = null)
    {
        list($response) = $this->cellsWorksheetsDeleteWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetCommentWithHttpInfo
     *
     * Delete worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsDeleteWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetCommentRequest($name, $sheet_name, $cell_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetCommentAsync
     *
     * Delete worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsDeleteWorksheetCommentAsync($name, $sheet_name, $cell_name, $folder = null)
    {
        return $this->cellsWorksheetsDeleteWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetCommentAsyncWithHttpInfo
     *
     * Delete worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsDeleteWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetCommentRequest($name, $sheet_name, $cell_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsDeleteWorksheetComment'
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsDeleteWorksheetCommentRequest($name, $sheet_name, $cell_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsDeleteWorksheetComment'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsDeleteWorksheetComment'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsWorksheetsDeleteWorksheetComment'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/comments/{cellName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetComments
     *
     * Delete all comments for worksheet.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsDeleteWorksheetComments($name, $sheet_name, $folder = null)
    {
        list($response) = $this->cellsWorksheetsDeleteWorksheetCommentsWithHttpInfo($name, $sheet_name, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetCommentsWithHttpInfo
     *
     * Delete all comments for worksheet.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsDeleteWorksheetCommentsWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetCommentsRequest($name, $sheet_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetCommentsAsync
     *
     * Delete all comments for worksheet.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsDeleteWorksheetCommentsAsync($name, $sheet_name, $folder = null)
    {
        return $this->cellsWorksheetsDeleteWorksheetCommentsAsyncWithHttpInfo($name, $sheet_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetCommentsAsyncWithHttpInfo
     *
     * Delete all comments for worksheet.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsDeleteWorksheetCommentsAsyncWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetCommentsRequest($name, $sheet_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsDeleteWorksheetComments'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsDeleteWorksheetCommentsRequest($name, $sheet_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsDeleteWorksheetComments'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsDeleteWorksheetComments'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetFreezePanes
     *
     * Unfreeze panes
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $row row (required)
     * @param  int $column column (required)
     * @param  int $freezed_rows freezed_rows (required)
     * @param  int $freezed_columns freezed_columns (required)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsDeleteWorksheetFreezePanes($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null)
    {
        list($response) = $this->cellsWorksheetsDeleteWorksheetFreezePanesWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetFreezePanesWithHttpInfo
     *
     * Unfreeze panes
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsDeleteWorksheetFreezePanesWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetFreezePanesRequest($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetFreezePanesAsync
     *
     * Unfreeze panes
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsDeleteWorksheetFreezePanesAsync($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null)
    {
        return $this->cellsWorksheetsDeleteWorksheetFreezePanesAsyncWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsDeleteWorksheetFreezePanesAsyncWithHttpInfo
     *
     * Unfreeze panes
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsDeleteWorksheetFreezePanesAsyncWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsDeleteWorksheetFreezePanesRequest($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsDeleteWorksheetFreezePanes'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsDeleteWorksheetFreezePanesRequest($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsDeleteWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsDeleteWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'row' is set
        if ($row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row when calling cellsWorksheetsDeleteWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'column' is set
        if ($column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column when calling cellsWorksheetsDeleteWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'freezed_rows' is set
        if ($freezed_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freezed_rows when calling cellsWorksheetsDeleteWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'freezed_columns' is set
        if ($freezed_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freezed_columns when calling cellsWorksheetsDeleteWorksheetFreezePanes'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/freezepanes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($freezed_rows !== null) {
            $queryParams['freezedRows'] = ObjectSerializer::toQueryValue($freezed_rows);
        }
        // query params
        if ($freezed_columns !== null) {
            $queryParams['freezedColumns'] = ObjectSerializer::toQueryValue($freezed_columns);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetNamedRanges
     *
     * Read worksheets ranges info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\RangesResponse
     */
    public function cellsWorksheetsGetNamedRanges($name, $folder = null)
    {
        list($response) = $this->cellsWorksheetsGetNamedRangesWithHttpInfo($name, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetNamedRangesWithHttpInfo
     *
     * Read worksheets ranges info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\RangesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsGetNamedRangesWithHttpInfo($name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RangesResponse';
        $request = $this->cellsWorksheetsGetNamedRangesRequest($name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\RangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetNamedRangesAsync
     *
     * Read worksheets ranges info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetNamedRangesAsync($name, $folder = null)
    {
        return $this->cellsWorksheetsGetNamedRangesAsyncWithHttpInfo($name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetNamedRangesAsyncWithHttpInfo
     *
     * Read worksheets ranges info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetNamedRangesAsyncWithHttpInfo($name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\RangesResponse';
        $request = $this->cellsWorksheetsGetNamedRangesRequest($name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetNamedRanges'
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsGetNamedRangesRequest($name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetNamedRanges'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/ranges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheet
     *
     * Read worksheet info or export.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function cellsWorksheetsGetWorksheet($name, $sheet_name, $vertical_resolution = '0', $horizontal_resolution = '0', $folder = null)
    {
        list($response) = $this->cellsWorksheetsGetWorksheetWithHttpInfo($name, $sheet_name, $vertical_resolution, $horizontal_resolution, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetWithHttpInfo
     *
     * Read worksheet info or export.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsGetWorksheetWithHttpInfo($name, $sheet_name, $vertical_resolution = '0', $horizontal_resolution = '0', $folder = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsWorksheetsGetWorksheetRequest($name, $sheet_name, $vertical_resolution, $horizontal_resolution, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetAsync
     *
     * Read worksheet info or export.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetAsync($name, $sheet_name, $vertical_resolution = '0', $horizontal_resolution = '0', $folder = null)
    {
        return $this->cellsWorksheetsGetWorksheetAsyncWithHttpInfo($name, $sheet_name, $vertical_resolution, $horizontal_resolution, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetAsyncWithHttpInfo
     *
     * Read worksheet info or export.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetAsyncWithHttpInfo($name, $sheet_name, $vertical_resolution = '0', $horizontal_resolution = '0', $folder = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cellsWorksheetsGetWorksheetRequest($name, $sheet_name, $vertical_resolution, $horizontal_resolution, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheet'
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $vertical_resolution Image vertical resolution. (optional, default to 0)
     * @param  int $horizontal_resolution Image horizontal resolution. (optional, default to 0)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsGetWorksheetRequest($name, $sheet_name, $vertical_resolution = '0', $horizontal_resolution = '0', $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vertical_resolution !== null) {
            $queryParams['verticalResolution'] = ObjectSerializer::toQueryValue($vertical_resolution);
        }
        // query params
        if ($horizontal_resolution !== null) {
            $queryParams['horizontalResolution'] = ObjectSerializer::toQueryValue($horizontal_resolution);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCalculateFormula
     *
     * Calculate formula value.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $formula The formula. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SingleValueResponse
     */
    public function cellsWorksheetsGetWorksheetCalculateFormula($name, $sheet_name, $formula, $folder = null)
    {
        list($response) = $this->cellsWorksheetsGetWorksheetCalculateFormulaWithHttpInfo($name, $sheet_name, $formula, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCalculateFormulaWithHttpInfo
     *
     * Calculate formula value.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $formula The formula. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SingleValueResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsGetWorksheetCalculateFormulaWithHttpInfo($name, $sheet_name, $formula, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SingleValueResponse';
        $request = $this->cellsWorksheetsGetWorksheetCalculateFormulaRequest($name, $sheet_name, $formula, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SingleValueResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCalculateFormulaAsync
     *
     * Calculate formula value.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $formula The formula. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetCalculateFormulaAsync($name, $sheet_name, $formula, $folder = null)
    {
        return $this->cellsWorksheetsGetWorksheetCalculateFormulaAsyncWithHttpInfo($name, $sheet_name, $formula, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCalculateFormulaAsyncWithHttpInfo
     *
     * Calculate formula value.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $formula The formula. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetCalculateFormulaAsyncWithHttpInfo($name, $sheet_name, $formula, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SingleValueResponse';
        $request = $this->cellsWorksheetsGetWorksheetCalculateFormulaRequest($name, $sheet_name, $formula, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheetCalculateFormula'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $formula The formula. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsGetWorksheetCalculateFormulaRequest($name, $sheet_name, $formula, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheetCalculateFormula'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheetCalculateFormula'
            );
        }
        // verify the required parameter 'formula' is set
        if ($formula === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formula when calling cellsWorksheetsGetWorksheetCalculateFormula'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/formulaResult';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($formula !== null) {
            $queryParams['formula'] = ObjectSerializer::toQueryValue($formula);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetComment
     *
     * Get worksheet comment by cell name.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CommentResponse
     */
    public function cellsWorksheetsGetWorksheetComment($name, $sheet_name, $cell_name, $folder = null)
    {
        list($response) = $this->cellsWorksheetsGetWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCommentWithHttpInfo
     *
     * Get worksheet comment by cell name.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CommentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsGetWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CommentResponse';
        $request = $this->cellsWorksheetsGetWorksheetCommentRequest($name, $sheet_name, $cell_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CommentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCommentAsync
     *
     * Get worksheet comment by cell name.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetCommentAsync($name, $sheet_name, $cell_name, $folder = null)
    {
        return $this->cellsWorksheetsGetWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCommentAsyncWithHttpInfo
     *
     * Get worksheet comment by cell name.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CommentResponse';
        $request = $this->cellsWorksheetsGetWorksheetCommentRequest($name, $sheet_name, $cell_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheetComment'
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsGetWorksheetCommentRequest($name, $sheet_name, $cell_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheetComment'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheetComment'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsWorksheetsGetWorksheetComment'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/comments/{cellName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetComments
     *
     * Get worksheet comments.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CommentsResponse
     */
    public function cellsWorksheetsGetWorksheetComments($name, $sheet_name, $folder = null)
    {
        list($response) = $this->cellsWorksheetsGetWorksheetCommentsWithHttpInfo($name, $sheet_name, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCommentsWithHttpInfo
     *
     * Get worksheet comments.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CommentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsGetWorksheetCommentsWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CommentsResponse';
        $request = $this->cellsWorksheetsGetWorksheetCommentsRequest($name, $sheet_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CommentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCommentsAsync
     *
     * Get worksheet comments.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetCommentsAsync($name, $sheet_name, $folder = null)
    {
        return $this->cellsWorksheetsGetWorksheetCommentsAsyncWithHttpInfo($name, $sheet_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetCommentsAsyncWithHttpInfo
     *
     * Get worksheet comments.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetCommentsAsyncWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CommentsResponse';
        $request = $this->cellsWorksheetsGetWorksheetCommentsRequest($name, $sheet_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheetComments'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsGetWorksheetCommentsRequest($name, $sheet_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheetComments'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheetComments'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCell
     *
     * Get worksheet merged cell by its index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $merged_cell_index Merged cell index. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\MergedCellResponse
     */
    public function cellsWorksheetsGetWorksheetMergedCell($name, $sheet_name, $merged_cell_index, $folder = null)
    {
        list($response) = $this->cellsWorksheetsGetWorksheetMergedCellWithHttpInfo($name, $sheet_name, $merged_cell_index, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCellWithHttpInfo
     *
     * Get worksheet merged cell by its index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $merged_cell_index Merged cell index. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\MergedCellResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsGetWorksheetMergedCellWithHttpInfo($name, $sheet_name, $merged_cell_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\MergedCellResponse';
        $request = $this->cellsWorksheetsGetWorksheetMergedCellRequest($name, $sheet_name, $merged_cell_index, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\MergedCellResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCellAsync
     *
     * Get worksheet merged cell by its index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $merged_cell_index Merged cell index. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetMergedCellAsync($name, $sheet_name, $merged_cell_index, $folder = null)
    {
        return $this->cellsWorksheetsGetWorksheetMergedCellAsyncWithHttpInfo($name, $sheet_name, $merged_cell_index, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCellAsyncWithHttpInfo
     *
     * Get worksheet merged cell by its index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $merged_cell_index Merged cell index. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetMergedCellAsyncWithHttpInfo($name, $sheet_name, $merged_cell_index, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\MergedCellResponse';
        $request = $this->cellsWorksheetsGetWorksheetMergedCellRequest($name, $sheet_name, $merged_cell_index, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheetMergedCell'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  int $merged_cell_index Merged cell index. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsGetWorksheetMergedCellRequest($name, $sheet_name, $merged_cell_index, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheetMergedCell'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheetMergedCell'
            );
        }
        // verify the required parameter 'merged_cell_index' is set
        if ($merged_cell_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merged_cell_index when calling cellsWorksheetsGetWorksheetMergedCell'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/mergedCells/{mergedCellIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($merged_cell_index !== null) {
            $resourcePath = str_replace(
                '{' . 'mergedCellIndex' . '}',
                ObjectSerializer::toPathValue($merged_cell_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCells
     *
     * Get worksheet merged cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The workseet name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\MergedCellsResponse
     */
    public function cellsWorksheetsGetWorksheetMergedCells($name, $sheet_name, $folder = null)
    {
        list($response) = $this->cellsWorksheetsGetWorksheetMergedCellsWithHttpInfo($name, $sheet_name, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCellsWithHttpInfo
     *
     * Get worksheet merged cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The workseet name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\MergedCellsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsGetWorksheetMergedCellsWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\MergedCellsResponse';
        $request = $this->cellsWorksheetsGetWorksheetMergedCellsRequest($name, $sheet_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\MergedCellsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCellsAsync
     *
     * Get worksheet merged cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The workseet name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetMergedCellsAsync($name, $sheet_name, $folder = null)
    {
        return $this->cellsWorksheetsGetWorksheetMergedCellsAsyncWithHttpInfo($name, $sheet_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetMergedCellsAsyncWithHttpInfo
     *
     * Get worksheet merged cells.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The workseet name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetMergedCellsAsyncWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\MergedCellsResponse';
        $request = $this->cellsWorksheetsGetWorksheetMergedCellsRequest($name, $sheet_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheetMergedCells'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The workseet name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsGetWorksheetMergedCellsRequest($name, $sheet_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheetMergedCells'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheetMergedCells'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/mergedCells';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetTextItems
     *
     * Get worksheet text items.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\TextItemsResponse
     */
    public function cellsWorksheetsGetWorksheetTextItems($name, $sheet_name, $folder = null)
    {
        list($response) = $this->cellsWorksheetsGetWorksheetTextItemsWithHttpInfo($name, $sheet_name, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetTextItemsWithHttpInfo
     *
     * Get worksheet text items.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\TextItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsGetWorksheetTextItemsWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $request = $this->cellsWorksheetsGetWorksheetTextItemsRequest($name, $sheet_name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\TextItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetTextItemsAsync
     *
     * Get worksheet text items.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetTextItemsAsync($name, $sheet_name, $folder = null)
    {
        return $this->cellsWorksheetsGetWorksheetTextItemsAsyncWithHttpInfo($name, $sheet_name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetTextItemsAsyncWithHttpInfo
     *
     * Get worksheet text items.
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetTextItemsAsyncWithHttpInfo($name, $sheet_name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $request = $this->cellsWorksheetsGetWorksheetTextItemsRequest($name, $sheet_name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheetTextItems'
     *
     * @param  string $name Workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder The workbook&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsGetWorksheetTextItemsRequest($name, $sheet_name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheetTextItems'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsGetWorksheetTextItems'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/textItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsGetWorksheets
     *
     * Read worksheets info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorksheetsResponse
     */
    public function cellsWorksheetsGetWorksheets($name, $folder = null)
    {
        list($response) = $this->cellsWorksheetsGetWorksheetsWithHttpInfo($name, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsGetWorksheetsWithHttpInfo
     *
     * Read worksheets info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorksheetsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsGetWorksheetsWithHttpInfo($name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetsResponse';
        $request = $this->cellsWorksheetsGetWorksheetsRequest($name, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorksheetsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsGetWorksheetsAsync
     *
     * Read worksheets info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetsAsync($name, $folder = null)
    {
        return $this->cellsWorksheetsGetWorksheetsAsyncWithHttpInfo($name, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsGetWorksheetsAsyncWithHttpInfo
     *
     * Read worksheets info.
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsGetWorksheetsAsyncWithHttpInfo($name, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetsResponse';
        $request = $this->cellsWorksheetsGetWorksheetsRequest($name, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsGetWorksheets'
     *
     * @param  string $name Document name. (required)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsGetWorksheetsRequest($name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsGetWorksheets'
            );
        }

        $resourcePath = '/cells/{name}/worksheets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetColumns
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $first_column first_column (required)
     * @param  int $last_column last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options auto_fitter_options (optional)
     * @param  int $first_row first_row (optional)
     * @param  int $last_row last_row (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsPostAutofitWorksheetColumns($name, $sheet_name, $first_column, $last_column, $auto_fitter_options = null, $first_row = null, $last_row = null, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPostAutofitWorksheetColumnsWithHttpInfo($name, $sheet_name, $first_column, $last_column, $auto_fitter_options, $first_row, $last_row, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetColumnsWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  int $first_row (optional)
     * @param  int $last_row (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPostAutofitWorksheetColumnsWithHttpInfo($name, $sheet_name, $first_column, $last_column, $auto_fitter_options = null, $first_row = null, $last_row = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostAutofitWorksheetColumnsRequest($name, $sheet_name, $first_column, $last_column, $auto_fitter_options, $first_row, $last_row, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetColumnsAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  int $first_row (optional)
     * @param  int $last_row (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostAutofitWorksheetColumnsAsync($name, $sheet_name, $first_column, $last_column, $auto_fitter_options = null, $first_row = null, $last_row = null, $folder = null)
    {
        return $this->cellsWorksheetsPostAutofitWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $first_column, $last_column, $auto_fitter_options, $first_row, $last_row, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetColumnsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  int $first_row (optional)
     * @param  int $last_row (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostAutofitWorksheetColumnsAsyncWithHttpInfo($name, $sheet_name, $first_column, $last_column, $auto_fitter_options = null, $first_row = null, $last_row = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostAutofitWorksheetColumnsRequest($name, $sheet_name, $first_column, $last_column, $auto_fitter_options, $first_row, $last_row, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostAutofitWorksheetColumns'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  int $first_row (optional)
     * @param  int $last_row (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPostAutofitWorksheetColumnsRequest($name, $sheet_name, $first_column, $last_column, $auto_fitter_options = null, $first_row = null, $last_row = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostAutofitWorksheetColumns'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostAutofitWorksheetColumns'
            );
        }
        // verify the required parameter 'first_column' is set
        if ($first_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_column when calling cellsWorksheetsPostAutofitWorksheetColumns'
            );
        }
        // verify the required parameter 'last_column' is set
        if ($last_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_column when calling cellsWorksheetsPostAutofitWorksheetColumns'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autofitcolumns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_column !== null) {
            $queryParams['firstColumn'] = ObjectSerializer::toQueryValue($first_column);
        }
        // query params
        if ($last_column !== null) {
            $queryParams['lastColumn'] = ObjectSerializer::toQueryValue($last_column);
        }
        // query params
        if ($first_row !== null) {
            $queryParams['firstRow'] = ObjectSerializer::toQueryValue($first_row);
        }
        // query params
        if ($last_row !== null) {
            $queryParams['lastRow'] = ObjectSerializer::toQueryValue($last_row);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($auto_fitter_options)) {
            $_tempBody = $auto_fitter_options;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRow
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $row_index row_index (required)
     * @param  int $first_column first_column (required)
     * @param  int $last_column last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options auto_fitter_options (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsPostAutofitWorksheetRow($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options = null, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPostAutofitWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRowWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row_index (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPostAutofitWorksheetRowWithHttpInfo($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostAutofitWorksheetRowRequest($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRowAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row_index (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostAutofitWorksheetRowAsync($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options = null, $folder = null)
    {
        return $this->cellsWorksheetsPostAutofitWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRowAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row_index (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostAutofitWorksheetRowAsyncWithHttpInfo($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostAutofitWorksheetRowRequest($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostAutofitWorksheetRow'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row_index (required)
     * @param  int $first_column (required)
     * @param  int $last_column (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPostAutofitWorksheetRowRequest($name, $sheet_name, $row_index, $first_column, $last_column, $auto_fitter_options = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostAutofitWorksheetRow'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostAutofitWorksheetRow'
            );
        }
        // verify the required parameter 'row_index' is set
        if ($row_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_index when calling cellsWorksheetsPostAutofitWorksheetRow'
            );
        }
        // verify the required parameter 'first_column' is set
        if ($first_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_column when calling cellsWorksheetsPostAutofitWorksheetRow'
            );
        }
        // verify the required parameter 'last_column' is set
        if ($last_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_column when calling cellsWorksheetsPostAutofitWorksheetRow'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autofitrow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($row_index !== null) {
            $queryParams['rowIndex'] = ObjectSerializer::toQueryValue($row_index);
        }
        // query params
        if ($first_column !== null) {
            $queryParams['firstColumn'] = ObjectSerializer::toQueryValue($first_column);
        }
        // query params
        if ($last_column !== null) {
            $queryParams['lastColumn'] = ObjectSerializer::toQueryValue($last_column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($auto_fitter_options)) {
            $_tempBody = $auto_fitter_options;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRows
     *
     * Autofit worksheet rows.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsPostAutofitWorksheetRows($name, $sheet_name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null)
    {
        list($response) = $this->cellsWorksheetsPostAutofitWorksheetRowsWithHttpInfo($name, $sheet_name, $auto_fitter_options, $start_row, $end_row, $only_auto, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRowsWithHttpInfo
     *
     * Autofit worksheet rows.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPostAutofitWorksheetRowsWithHttpInfo($name, $sheet_name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostAutofitWorksheetRowsRequest($name, $sheet_name, $auto_fitter_options, $start_row, $end_row, $only_auto, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRowsAsync
     *
     * Autofit worksheet rows.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostAutofitWorksheetRowsAsync($name, $sheet_name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null)
    {
        return $this->cellsWorksheetsPostAutofitWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $auto_fitter_options, $start_row, $end_row, $only_auto, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostAutofitWorksheetRowsAsyncWithHttpInfo
     *
     * Autofit worksheet rows.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostAutofitWorksheetRowsAsyncWithHttpInfo($name, $sheet_name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostAutofitWorksheetRowsRequest($name, $sheet_name, $auto_fitter_options, $start_row, $end_row, $only_auto, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostAutofitWorksheetRows'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\AutoFitterOptions $auto_fitter_options Auto Fitter Options. (optional)
     * @param  int $start_row Start row. (optional)
     * @param  int $end_row End row. (optional)
     * @param  bool $only_auto Only auto. (optional, default to false)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPostAutofitWorksheetRowsRequest($name, $sheet_name, $auto_fitter_options = null, $start_row = null, $end_row = null, $only_auto = 'false', $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostAutofitWorksheetRows'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostAutofitWorksheetRows'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/autofitrows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($end_row !== null) {
            $queryParams['endRow'] = ObjectSerializer::toQueryValue($end_row);
        }
        // query params
        if ($only_auto !== null) {
            $queryParams['onlyAuto'] = ObjectSerializer::toQueryValue($only_auto);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($auto_fitter_options)) {
            $_tempBody = $auto_fitter_options;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostCopyWorksheet
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $source_sheet source_sheet (required)
     * @param  \Aspose\Cells\Cloud\Model\CopyOptions $options options (optional)
     * @param  string $source_workbook source_workbook (optional)
     * @param  string $source_folder source_folder (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsPostCopyWorksheet($name, $sheet_name, $source_sheet, $options = null, $source_workbook = null, $source_folder = null, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPostCopyWorksheetWithHttpInfo($name, $sheet_name, $source_sheet, $options, $source_workbook, $source_folder, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostCopyWorksheetWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $source_sheet (required)
     * @param  \Aspose\Cells\Cloud\Model\CopyOptions $options (optional)
     * @param  string $source_workbook (optional)
     * @param  string $source_folder (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPostCopyWorksheetWithHttpInfo($name, $sheet_name, $source_sheet, $options = null, $source_workbook = null, $source_folder = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostCopyWorksheetRequest($name, $sheet_name, $source_sheet, $options, $source_workbook, $source_folder, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostCopyWorksheetAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $source_sheet (required)
     * @param  \Aspose\Cells\Cloud\Model\CopyOptions $options (optional)
     * @param  string $source_workbook (optional)
     * @param  string $source_folder (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostCopyWorksheetAsync($name, $sheet_name, $source_sheet, $options = null, $source_workbook = null, $source_folder = null, $folder = null)
    {
        return $this->cellsWorksheetsPostCopyWorksheetAsyncWithHttpInfo($name, $sheet_name, $source_sheet, $options, $source_workbook, $source_folder, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostCopyWorksheetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $source_sheet (required)
     * @param  \Aspose\Cells\Cloud\Model\CopyOptions $options (optional)
     * @param  string $source_workbook (optional)
     * @param  string $source_folder (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostCopyWorksheetAsyncWithHttpInfo($name, $sheet_name, $source_sheet, $options = null, $source_workbook = null, $source_folder = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostCopyWorksheetRequest($name, $sheet_name, $source_sheet, $options, $source_workbook, $source_folder, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostCopyWorksheet'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $source_sheet (required)
     * @param  \Aspose\Cells\Cloud\Model\CopyOptions $options (optional)
     * @param  string $source_workbook (optional)
     * @param  string $source_folder (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPostCopyWorksheetRequest($name, $sheet_name, $source_sheet, $options = null, $source_workbook = null, $source_folder = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostCopyWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostCopyWorksheet'
            );
        }
        // verify the required parameter 'source_sheet' is set
        if ($source_sheet === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_sheet when calling cellsWorksheetsPostCopyWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($source_sheet !== null) {
            $queryParams['sourceSheet'] = ObjectSerializer::toQueryValue($source_sheet);
        }
        // query params
        if ($source_workbook !== null) {
            $queryParams['sourceWorkbook'] = ObjectSerializer::toQueryValue($source_workbook);
        }
        // query params
        if ($source_folder !== null) {
            $queryParams['sourceFolder'] = ObjectSerializer::toQueryValue($source_folder);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($options)) {
            $_tempBody = $options;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostMoveWorksheet
     *
     * Move worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorksheetMovingRequest $moving with moving parameters. (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorksheetsResponse
     */
    public function cellsWorksheetsPostMoveWorksheet($name, $sheet_name, $moving = null, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPostMoveWorksheetWithHttpInfo($name, $sheet_name, $moving, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostMoveWorksheetWithHttpInfo
     *
     * Move worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorksheetMovingRequest $moving with moving parameters. (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorksheetsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPostMoveWorksheetWithHttpInfo($name, $sheet_name, $moving = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetsResponse';
        $request = $this->cellsWorksheetsPostMoveWorksheetRequest($name, $sheet_name, $moving, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorksheetsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostMoveWorksheetAsync
     *
     * Move worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorksheetMovingRequest $moving with moving parameters. (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostMoveWorksheetAsync($name, $sheet_name, $moving = null, $folder = null)
    {
        return $this->cellsWorksheetsPostMoveWorksheetAsyncWithHttpInfo($name, $sheet_name, $moving, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostMoveWorksheetAsyncWithHttpInfo
     *
     * Move worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorksheetMovingRequest $moving with moving parameters. (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostMoveWorksheetAsyncWithHttpInfo($name, $sheet_name, $moving = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetsResponse';
        $request = $this->cellsWorksheetsPostMoveWorksheetRequest($name, $sheet_name, $moving, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostMoveWorksheet'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\WorksheetMovingRequest $moving with moving parameters. (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPostMoveWorksheetRequest($name, $sheet_name, $moving = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostMoveWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostMoveWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/position';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($moving)) {
            $_tempBody = $moving;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostRenameWorksheet
     *
     * Rename worksheet
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $newname newname (required)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsPostRenameWorksheet($name, $sheet_name, $newname, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPostRenameWorksheetWithHttpInfo($name, $sheet_name, $newname, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostRenameWorksheetWithHttpInfo
     *
     * Rename worksheet
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $newname (required)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPostRenameWorksheetWithHttpInfo($name, $sheet_name, $newname, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostRenameWorksheetRequest($name, $sheet_name, $newname, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostRenameWorksheetAsync
     *
     * Rename worksheet
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $newname (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostRenameWorksheetAsync($name, $sheet_name, $newname, $folder = null)
    {
        return $this->cellsWorksheetsPostRenameWorksheetAsyncWithHttpInfo($name, $sheet_name, $newname, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostRenameWorksheetAsyncWithHttpInfo
     *
     * Rename worksheet
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $newname (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostRenameWorksheetAsyncWithHttpInfo($name, $sheet_name, $newname, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostRenameWorksheetRequest($name, $sheet_name, $newname, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostRenameWorksheet'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $newname (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPostRenameWorksheetRequest($name, $sheet_name, $newname, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostRenameWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostRenameWorksheet'
            );
        }
        // verify the required parameter 'newname' is set
        if ($newname === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newname when calling cellsWorksheetsPostRenameWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/rename';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($newname !== null) {
            $queryParams['newname'] = ObjectSerializer::toQueryValue($newname);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetProperty
     *
     * Update worksheet property
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\Worksheet $sheet sheet (optional)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorksheetResponse
     */
    public function cellsWorksheetsPostUpdateWorksheetProperty($name, $sheet_name, $sheet = null, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPostUpdateWorksheetPropertyWithHttpInfo($name, $sheet_name, $sheet, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetPropertyWithHttpInfo
     *
     * Update worksheet property
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\Worksheet $sheet (optional)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorksheetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPostUpdateWorksheetPropertyWithHttpInfo($name, $sheet_name, $sheet = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetResponse';
        $request = $this->cellsWorksheetsPostUpdateWorksheetPropertyRequest($name, $sheet_name, $sheet, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorksheetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetPropertyAsync
     *
     * Update worksheet property
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\Worksheet $sheet (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostUpdateWorksheetPropertyAsync($name, $sheet_name, $sheet = null, $folder = null)
    {
        return $this->cellsWorksheetsPostUpdateWorksheetPropertyAsyncWithHttpInfo($name, $sheet_name, $sheet, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetPropertyAsyncWithHttpInfo
     *
     * Update worksheet property
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\Worksheet $sheet (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostUpdateWorksheetPropertyAsyncWithHttpInfo($name, $sheet_name, $sheet = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetResponse';
        $request = $this->cellsWorksheetsPostUpdateWorksheetPropertyRequest($name, $sheet_name, $sheet, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostUpdateWorksheetProperty'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\Worksheet $sheet (optional)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPostUpdateWorksheetPropertyRequest($name, $sheet_name, $sheet = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostUpdateWorksheetProperty'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostUpdateWorksheetProperty'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($sheet)) {
            $_tempBody = $sheet;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetZoom
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $value value (required)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsPostUpdateWorksheetZoom($name, $sheet_name, $value, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPostUpdateWorksheetZoomWithHttpInfo($name, $sheet_name, $value, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetZoomWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $value (required)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPostUpdateWorksheetZoomWithHttpInfo($name, $sheet_name, $value, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostUpdateWorksheetZoomRequest($name, $sheet_name, $value, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetZoomAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $value (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostUpdateWorksheetZoomAsync($name, $sheet_name, $value, $folder = null)
    {
        return $this->cellsWorksheetsPostUpdateWorksheetZoomAsyncWithHttpInfo($name, $sheet_name, $value, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostUpdateWorksheetZoomAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $value (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostUpdateWorksheetZoomAsyncWithHttpInfo($name, $sheet_name, $value, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostUpdateWorksheetZoomRequest($name, $sheet_name, $value, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostUpdateWorksheetZoom'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $value (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPostUpdateWorksheetZoomRequest($name, $sheet_name, $value, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostUpdateWorksheetZoom'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostUpdateWorksheetZoom'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling cellsWorksheetsPostUpdateWorksheetZoom'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/zoom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostWorksheetComment
     *
     * Update worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsPostWorksheetComment($name, $sheet_name, $cell_name, $comment = null, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPostWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $comment, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostWorksheetCommentWithHttpInfo
     *
     * Update worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPostWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $comment = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostWorksheetCommentRequest($name, $sheet_name, $cell_name, $comment, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostWorksheetCommentAsync
     *
     * Update worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostWorksheetCommentAsync($name, $sheet_name, $cell_name, $comment = null, $folder = null)
    {
        return $this->cellsWorksheetsPostWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $comment, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostWorksheetCommentAsyncWithHttpInfo
     *
     * Update worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $comment = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostWorksheetCommentRequest($name, $sheet_name, $cell_name, $comment, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostWorksheetComment'
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPostWorksheetCommentRequest($name, $sheet_name, $cell_name, $comment = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostWorksheetComment'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostWorksheetComment'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsWorksheetsPostWorksheetComment'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/comments/{cellName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($comment)) {
            $_tempBody = $comment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostWorksheetRangeSort
     *
     * Sort worksheet range.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_area The range to sort. (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter with sorting settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsPostWorksheetRangeSort($name, $sheet_name, $cell_area, $data_sorter = null, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPostWorksheetRangeSortWithHttpInfo($name, $sheet_name, $cell_area, $data_sorter, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostWorksheetRangeSortWithHttpInfo
     *
     * Sort worksheet range.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_area The range to sort. (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter with sorting settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPostWorksheetRangeSortWithHttpInfo($name, $sheet_name, $cell_area, $data_sorter = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostWorksheetRangeSortRequest($name, $sheet_name, $cell_area, $data_sorter, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostWorksheetRangeSortAsync
     *
     * Sort worksheet range.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_area The range to sort. (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter with sorting settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostWorksheetRangeSortAsync($name, $sheet_name, $cell_area, $data_sorter = null, $folder = null)
    {
        return $this->cellsWorksheetsPostWorksheetRangeSortAsyncWithHttpInfo($name, $sheet_name, $cell_area, $data_sorter, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostWorksheetRangeSortAsyncWithHttpInfo
     *
     * Sort worksheet range.
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_area The range to sort. (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter with sorting settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostWorksheetRangeSortAsyncWithHttpInfo($name, $sheet_name, $cell_area, $data_sorter = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPostWorksheetRangeSortRequest($name, $sheet_name, $cell_area, $data_sorter, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostWorksheetRangeSort'
     *
     * @param  string $name The workbook name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_area The range to sort. (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter with sorting settings. (optional)
     * @param  string $folder The workbook folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPostWorksheetRangeSortRequest($name, $sheet_name, $cell_area, $data_sorter = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostWorksheetRangeSort'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostWorksheetRangeSort'
            );
        }
        // verify the required parameter 'cell_area' is set
        if ($cell_area === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_area when calling cellsWorksheetsPostWorksheetRangeSort'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/sort';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cell_area !== null) {
            $queryParams['cellArea'] = ObjectSerializer::toQueryValue($cell_area);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data_sorter)) {
            $_tempBody = $data_sorter;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostWorksheetTextSearch
     *
     * Search text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $text Text to search. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\TextItemsResponse
     */
    public function cellsWorksheetsPostWorksheetTextSearch($name, $sheet_name, $text, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPostWorksheetTextSearchWithHttpInfo($name, $sheet_name, $text, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostWorksheetTextSearchWithHttpInfo
     *
     * Search text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $text Text to search. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\TextItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPostWorksheetTextSearchWithHttpInfo($name, $sheet_name, $text, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $request = $this->cellsWorksheetsPostWorksheetTextSearchRequest($name, $sheet_name, $text, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\TextItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostWorksheetTextSearchAsync
     *
     * Search text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $text Text to search. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostWorksheetTextSearchAsync($name, $sheet_name, $text, $folder = null)
    {
        return $this->cellsWorksheetsPostWorksheetTextSearchAsyncWithHttpInfo($name, $sheet_name, $text, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostWorksheetTextSearchAsyncWithHttpInfo
     *
     * Search text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $text Text to search. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostWorksheetTextSearchAsyncWithHttpInfo($name, $sheet_name, $text, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\TextItemsResponse';
        $request = $this->cellsWorksheetsPostWorksheetTextSearchRequest($name, $sheet_name, $text, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostWorksheetTextSearch'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $text Text to search. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPostWorksheetTextSearchRequest($name, $sheet_name, $text, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostWorksheetTextSearch'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostWorksheetTextSearch'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling cellsWorksheetsPostWorksheetTextSearch'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/findText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPostWorsheetTextReplace
     *
     * Replace text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $old_value The old text to replace. (required)
     * @param  string $new_value The new text to replace by. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorksheetReplaceResponse
     */
    public function cellsWorksheetsPostWorsheetTextReplace($name, $sheet_name, $old_value, $new_value, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPostWorsheetTextReplaceWithHttpInfo($name, $sheet_name, $old_value, $new_value, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPostWorsheetTextReplaceWithHttpInfo
     *
     * Replace text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $old_value The old text to replace. (required)
     * @param  string $new_value The new text to replace by. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorksheetReplaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPostWorsheetTextReplaceWithHttpInfo($name, $sheet_name, $old_value, $new_value, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetReplaceResponse';
        $request = $this->cellsWorksheetsPostWorsheetTextReplaceRequest($name, $sheet_name, $old_value, $new_value, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorksheetReplaceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPostWorsheetTextReplaceAsync
     *
     * Replace text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $old_value The old text to replace. (required)
     * @param  string $new_value The new text to replace by. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostWorsheetTextReplaceAsync($name, $sheet_name, $old_value, $new_value, $folder = null)
    {
        return $this->cellsWorksheetsPostWorsheetTextReplaceAsyncWithHttpInfo($name, $sheet_name, $old_value, $new_value, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPostWorsheetTextReplaceAsyncWithHttpInfo
     *
     * Replace text.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $old_value The old text to replace. (required)
     * @param  string $new_value The new text to replace by. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPostWorsheetTextReplaceAsyncWithHttpInfo($name, $sheet_name, $old_value, $new_value, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetReplaceResponse';
        $request = $this->cellsWorksheetsPostWorsheetTextReplaceRequest($name, $sheet_name, $old_value, $new_value, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPostWorsheetTextReplace'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  string $old_value The old text to replace. (required)
     * @param  string $new_value The new text to replace by. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPostWorsheetTextReplaceRequest($name, $sheet_name, $old_value, $new_value, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPostWorsheetTextReplace'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPostWorsheetTextReplace'
            );
        }
        // verify the required parameter 'old_value' is set
        if ($old_value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $old_value when calling cellsWorksheetsPostWorsheetTextReplace'
            );
        }
        // verify the required parameter 'new_value' is set
        if ($new_value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_value when calling cellsWorksheetsPostWorsheetTextReplace'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/replaceText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($old_value !== null) {
            $queryParams['oldValue'] = ObjectSerializer::toQueryValue($old_value);
        }
        // query params
        if ($new_value !== null) {
            $queryParams['newValue'] = ObjectSerializer::toQueryValue($new_value);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPutAddNewWorksheet
     *
     * Add new worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The new sheet name. (required)
     * @param  int $position The new sheet position. (optional)
     * @param  string $sheettype The new sheet type. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorksheetsResponse
     */
    public function cellsWorksheetsPutAddNewWorksheet($name, $sheet_name, $position = null, $sheettype = null, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPutAddNewWorksheetWithHttpInfo($name, $sheet_name, $position, $sheettype, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPutAddNewWorksheetWithHttpInfo
     *
     * Add new worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The new sheet name. (required)
     * @param  int $position The new sheet position. (optional)
     * @param  string $sheettype The new sheet type. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorksheetsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPutAddNewWorksheetWithHttpInfo($name, $sheet_name, $position = null, $sheettype = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetsResponse';
        $request = $this->cellsWorksheetsPutAddNewWorksheetRequest($name, $sheet_name, $position, $sheettype, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorksheetsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPutAddNewWorksheetAsync
     *
     * Add new worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The new sheet name. (required)
     * @param  int $position The new sheet position. (optional)
     * @param  string $sheettype The new sheet type. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPutAddNewWorksheetAsync($name, $sheet_name, $position = null, $sheettype = null, $folder = null)
    {
        return $this->cellsWorksheetsPutAddNewWorksheetAsyncWithHttpInfo($name, $sheet_name, $position, $sheettype, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPutAddNewWorksheetAsyncWithHttpInfo
     *
     * Add new worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The new sheet name. (required)
     * @param  int $position The new sheet position. (optional)
     * @param  string $sheettype The new sheet type. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPutAddNewWorksheetAsyncWithHttpInfo($name, $sheet_name, $position = null, $sheettype = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetsResponse';
        $request = $this->cellsWorksheetsPutAddNewWorksheetRequest($name, $sheet_name, $position, $sheettype, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPutAddNewWorksheet'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The new sheet name. (required)
     * @param  int $position The new sheet position. (optional)
     * @param  string $sheettype The new sheet type. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPutAddNewWorksheetRequest($name, $sheet_name, $position = null, $sheettype = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPutAddNewWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPutAddNewWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($sheettype !== null) {
            $queryParams['sheettype'] = ObjectSerializer::toQueryValue($sheettype);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPutChangeVisibilityWorksheet
     *
     * Change worksheet visibility.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  bool $is_visible New worksheet visibility value. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorksheetResponse
     */
    public function cellsWorksheetsPutChangeVisibilityWorksheet($name, $sheet_name, $is_visible, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPutChangeVisibilityWorksheetWithHttpInfo($name, $sheet_name, $is_visible, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPutChangeVisibilityWorksheetWithHttpInfo
     *
     * Change worksheet visibility.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  bool $is_visible New worksheet visibility value. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorksheetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPutChangeVisibilityWorksheetWithHttpInfo($name, $sheet_name, $is_visible, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetResponse';
        $request = $this->cellsWorksheetsPutChangeVisibilityWorksheetRequest($name, $sheet_name, $is_visible, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorksheetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPutChangeVisibilityWorksheetAsync
     *
     * Change worksheet visibility.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  bool $is_visible New worksheet visibility value. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPutChangeVisibilityWorksheetAsync($name, $sheet_name, $is_visible, $folder = null)
    {
        return $this->cellsWorksheetsPutChangeVisibilityWorksheetAsyncWithHttpInfo($name, $sheet_name, $is_visible, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPutChangeVisibilityWorksheetAsyncWithHttpInfo
     *
     * Change worksheet visibility.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  bool $is_visible New worksheet visibility value. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPutChangeVisibilityWorksheetAsyncWithHttpInfo($name, $sheet_name, $is_visible, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetResponse';
        $request = $this->cellsWorksheetsPutChangeVisibilityWorksheetRequest($name, $sheet_name, $is_visible, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPutChangeVisibilityWorksheet'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name Worksheet name. (required)
     * @param  bool $is_visible New worksheet visibility value. (required)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPutChangeVisibilityWorksheetRequest($name, $sheet_name, $is_visible, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPutChangeVisibilityWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPutChangeVisibilityWorksheet'
            );
        }
        // verify the required parameter 'is_visible' is set
        if ($is_visible === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_visible when calling cellsWorksheetsPutChangeVisibilityWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/visible';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($is_visible !== null) {
            $queryParams['isVisible'] = ObjectSerializer::toQueryValue($is_visible);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPutProtectWorksheet
     *
     * Protect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\WorksheetResponse
     */
    public function cellsWorksheetsPutProtectWorksheet($name, $sheet_name, $protect_parameter = null, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPutProtectWorksheetWithHttpInfo($name, $sheet_name, $protect_parameter, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPutProtectWorksheetWithHttpInfo
     *
     * Protect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\WorksheetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPutProtectWorksheetWithHttpInfo($name, $sheet_name, $protect_parameter = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetResponse';
        $request = $this->cellsWorksheetsPutProtectWorksheetRequest($name, $sheet_name, $protect_parameter, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\WorksheetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPutProtectWorksheetAsync
     *
     * Protect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPutProtectWorksheetAsync($name, $sheet_name, $protect_parameter = null, $folder = null)
    {
        return $this->cellsWorksheetsPutProtectWorksheetAsyncWithHttpInfo($name, $sheet_name, $protect_parameter, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPutProtectWorksheetAsyncWithHttpInfo
     *
     * Protect worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPutProtectWorksheetAsyncWithHttpInfo($name, $sheet_name, $protect_parameter = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\WorksheetResponse';
        $request = $this->cellsWorksheetsPutProtectWorksheetRequest($name, $sheet_name, $protect_parameter, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPutProtectWorksheet'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  \Aspose\Cells\Cloud\Model\ProtectSheetParameter $protect_parameter with protection settings. (optional)
     * @param  string $folder Document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPutProtectWorksheetRequest($name, $sheet_name, $protect_parameter = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPutProtectWorksheet'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPutProtectWorksheet'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/protection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($protect_parameter)) {
            $_tempBody = $protect_parameter;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPutWorksheetBackground
     *
     * Set worksheet background image.
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $png png (required)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsPutWorksheetBackground($name, $sheet_name, $png, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPutWorksheetBackgroundWithHttpInfo($name, $sheet_name, $png, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPutWorksheetBackgroundWithHttpInfo
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $png (required)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPutWorksheetBackgroundWithHttpInfo($name, $sheet_name, $png, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPutWorksheetBackgroundRequest($name, $sheet_name, $png, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPutWorksheetBackgroundAsync
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $png (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPutWorksheetBackgroundAsync($name, $sheet_name, $png, $folder = null)
    {
        return $this->cellsWorksheetsPutWorksheetBackgroundAsyncWithHttpInfo($name, $sheet_name, $png, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPutWorksheetBackgroundAsyncWithHttpInfo
     *
     * Set worksheet background image.
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $png (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPutWorksheetBackgroundAsyncWithHttpInfo($name, $sheet_name, $png, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPutWorksheetBackgroundRequest($name, $sheet_name, $png, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPutWorksheetBackground'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $png (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPutWorksheetBackgroundRequest($name, $sheet_name, $png, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPutWorksheetBackground'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPutWorksheetBackground'
            );
        }
        // verify the required parameter 'png' is set
        if ($png === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $png when calling cellsWorksheetsPutWorksheetBackground'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/background';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($png)) {
            $_tempBody = $png;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPutWorksheetComment
     *
     * Add worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\CommentResponse
     */
    public function cellsWorksheetsPutWorksheetComment($name, $sheet_name, $cell_name, $comment = null, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPutWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $comment, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPutWorksheetCommentWithHttpInfo
     *
     * Add worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\CommentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPutWorksheetCommentWithHttpInfo($name, $sheet_name, $cell_name, $comment = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CommentResponse';
        $request = $this->cellsWorksheetsPutWorksheetCommentRequest($name, $sheet_name, $cell_name, $comment, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\CommentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPutWorksheetCommentAsync
     *
     * Add worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPutWorksheetCommentAsync($name, $sheet_name, $cell_name, $comment = null, $folder = null)
    {
        return $this->cellsWorksheetsPutWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $comment, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPutWorksheetCommentAsyncWithHttpInfo
     *
     * Add worksheet's cell comment.
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPutWorksheetCommentAsyncWithHttpInfo($name, $sheet_name, $cell_name, $comment = null, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\CommentResponse';
        $request = $this->cellsWorksheetsPutWorksheetCommentRequest($name, $sheet_name, $cell_name, $comment, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPutWorksheetComment'
     *
     * @param  string $name The document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $cell_name The cell name (required)
     * @param  \Aspose\Cells\Cloud\Model\Comment $comment Comment object (optional)
     * @param  string $folder The document folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPutWorksheetCommentRequest($name, $sheet_name, $cell_name, $comment = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPutWorksheetComment'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPutWorksheetComment'
            );
        }
        // verify the required parameter 'cell_name' is set
        if ($cell_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cell_name when calling cellsWorksheetsPutWorksheetComment'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/comments/{cellName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($cell_name !== null) {
            $resourcePath = str_replace(
                '{' . 'cellName' . '}',
                ObjectSerializer::toPathValue($cell_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($comment)) {
            $_tempBody = $comment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsWorksheetsPutWorksheetFreezePanes
     *
     * Set freeze panes
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $row row (required)
     * @param  int $column column (required)
     * @param  int $freezed_rows freezed_rows (required)
     * @param  int $freezed_columns freezed_columns (required)
     * @param  string $folder folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsWorksheetsPutWorksheetFreezePanes($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null)
    {
        list($response) = $this->cellsWorksheetsPutWorksheetFreezePanesWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder);
        return $response;
    }

    /**
     * Operation cellsWorksheetsPutWorksheetFreezePanesWithHttpInfo
     *
     * Set freeze panes
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsWorksheetsPutWorksheetFreezePanesWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPutWorksheetFreezePanesRequest($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsWorksheetsPutWorksheetFreezePanesAsync
     *
     * Set freeze panes
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPutWorksheetFreezePanesAsync($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null)
    {
        return $this->cellsWorksheetsPutWorksheetFreezePanesAsyncWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsWorksheetsPutWorksheetFreezePanesAsyncWithHttpInfo
     *
     * Set freeze panes
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsWorksheetsPutWorksheetFreezePanesAsyncWithHttpInfo($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsWorksheetsPutWorksheetFreezePanesRequest($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsWorksheetsPutWorksheetFreezePanes'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (required)
     * @param  int $column (required)
     * @param  int $freezed_rows (required)
     * @param  int $freezed_columns (required)
     * @param  string $folder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsWorksheetsPutWorksheetFreezePanesRequest($name, $sheet_name, $row, $column, $freezed_rows, $freezed_columns, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsWorksheetsPutWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsWorksheetsPutWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'row' is set
        if ($row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row when calling cellsWorksheetsPutWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'column' is set
        if ($column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column when calling cellsWorksheetsPutWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'freezed_rows' is set
        if ($freezed_rows === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freezed_rows when calling cellsWorksheetsPutWorksheetFreezePanes'
            );
        }
        // verify the required parameter 'freezed_columns' is set
        if ($freezed_columns === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freezed_columns when calling cellsWorksheetsPutWorksheetFreezePanes'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/freezepanes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($freezed_rows !== null) {
            $queryParams['freezedRows'] = ObjectSerializer::toQueryValue($freezed_rows);
        }
        // query params
        if ($freezed_columns !== null) {
            $queryParams['freezedColumns'] = ObjectSerializer::toQueryValue($freezed_columns);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
