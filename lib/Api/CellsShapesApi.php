<?php
/**
 * CellsShapesApi
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aspose\Cells\Cloud\ApiException;
use Aspose\Cells\Cloud\Configuration;
use Aspose\Cells\Cloud\HeaderSelector;
use Aspose\Cells\Cloud\ObjectSerializer;

/**
 * CellsShapesApi Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsShapesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cellsShapesDeleteWorksheetShape
     *
     * Delete a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsShapesDeleteWorksheetShape($name, $sheet_name, $shapeindex, $folder = null, $storage = null)
    {
        list($response) = $this->cellsShapesDeleteWorksheetShapeWithHttpInfo($name, $sheet_name, $shapeindex, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapeWithHttpInfo
     *
     * Delete a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsShapesDeleteWorksheetShapeWithHttpInfo($name, $sheet_name, $shapeindex, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsShapesDeleteWorksheetShapeRequest($name, $sheet_name, $shapeindex, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapeAsync
     *
     * Delete a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsShapesDeleteWorksheetShapeAsync($name, $sheet_name, $shapeindex, $folder = null, $storage = null)
    {
        return $this->cellsShapesDeleteWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapeAsyncWithHttpInfo
     *
     * Delete a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsShapesDeleteWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsShapesDeleteWorksheetShapeRequest($name, $sheet_name, $shapeindex, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesDeleteWorksheetShape'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsShapesDeleteWorksheetShapeRequest($name, $sheet_name, $shapeindex, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesDeleteWorksheetShape'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesDeleteWorksheetShape'
            );
        }
        // verify the required parameter 'shapeindex' is set
        if ($shapeindex === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shapeindex when calling cellsShapesDeleteWorksheetShape'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($shapeindex !== null) {
            $resourcePath = str_replace(
                '{' . 'shapeindex' . '}',
                ObjectSerializer::toPathValue($shapeindex),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapes
     *
     * delete all shapes in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsShapesDeleteWorksheetShapes($name, $sheet_name, $folder = null, $storage = null)
    {
        list($response) = $this->cellsShapesDeleteWorksheetShapesWithHttpInfo($name, $sheet_name, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapesWithHttpInfo
     *
     * delete all shapes in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsShapesDeleteWorksheetShapesWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsShapesDeleteWorksheetShapesRequest($name, $sheet_name, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapesAsync
     *
     * delete all shapes in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsShapesDeleteWorksheetShapesAsync($name, $sheet_name, $folder = null, $storage = null)
    {
        return $this->cellsShapesDeleteWorksheetShapesAsyncWithHttpInfo($name, $sheet_name, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesDeleteWorksheetShapesAsyncWithHttpInfo
     *
     * delete all shapes in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsShapesDeleteWorksheetShapesAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsShapesDeleteWorksheetShapesRequest($name, $sheet_name, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesDeleteWorksheetShapes'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsShapesDeleteWorksheetShapesRequest($name, $sheet_name, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesDeleteWorksheetShapes'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesDeleteWorksheetShapes'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsShapesGetWorksheetShape
     *
     * Get worksheet shape
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ShapeResponse
     */
    public function cellsShapesGetWorksheetShape($name, $sheet_name, $shapeindex, $folder = null, $storage = null)
    {
        list($response) = $this->cellsShapesGetWorksheetShapeWithHttpInfo($name, $sheet_name, $shapeindex, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsShapesGetWorksheetShapeWithHttpInfo
     *
     * Get worksheet shape
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ShapeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsShapesGetWorksheetShapeWithHttpInfo($name, $sheet_name, $shapeindex, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ShapeResponse';
        $request = $this->cellsShapesGetWorksheetShapeRequest($name, $sheet_name, $shapeindex, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ShapeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesGetWorksheetShapeAsync
     *
     * Get worksheet shape
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsShapesGetWorksheetShapeAsync($name, $sheet_name, $shapeindex, $folder = null, $storage = null)
    {
        return $this->cellsShapesGetWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesGetWorksheetShapeAsyncWithHttpInfo
     *
     * Get worksheet shape
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsShapesGetWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ShapeResponse';
        $request = $this->cellsShapesGetWorksheetShapeRequest($name, $sheet_name, $shapeindex, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesGetWorksheetShape'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsShapesGetWorksheetShapeRequest($name, $sheet_name, $shapeindex, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesGetWorksheetShape'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesGetWorksheetShape'
            );
        }
        // verify the required parameter 'shapeindex' is set
        if ($shapeindex === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shapeindex when calling cellsShapesGetWorksheetShape'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($shapeindex !== null) {
            $resourcePath = str_replace(
                '{' . 'shapeindex' . '}',
                ObjectSerializer::toPathValue($shapeindex),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsShapesGetWorksheetShapes
     *
     * Get worksheet shapes
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ShapesResponse
     */
    public function cellsShapesGetWorksheetShapes($name, $sheet_name, $folder = null, $storage = null)
    {
        list($response) = $this->cellsShapesGetWorksheetShapesWithHttpInfo($name, $sheet_name, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsShapesGetWorksheetShapesWithHttpInfo
     *
     * Get worksheet shapes
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ShapesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsShapesGetWorksheetShapesWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ShapesResponse';
        $request = $this->cellsShapesGetWorksheetShapesRequest($name, $sheet_name, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ShapesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesGetWorksheetShapesAsync
     *
     * Get worksheet shapes
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsShapesGetWorksheetShapesAsync($name, $sheet_name, $folder = null, $storage = null)
    {
        return $this->cellsShapesGetWorksheetShapesAsyncWithHttpInfo($name, $sheet_name, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesGetWorksheetShapesAsyncWithHttpInfo
     *
     * Get worksheet shapes
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsShapesGetWorksheetShapesAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ShapesResponse';
        $request = $this->cellsShapesGetWorksheetShapesRequest($name, $sheet_name, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesGetWorksheetShapes'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsShapesGetWorksheetShapesRequest($name, $sheet_name, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesGetWorksheetShapes'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesGetWorksheetShapes'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsShapesPostWorksheetShape
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $dto dto (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsShapesPostWorksheetShape($name, $sheet_name, $shapeindex, $dto = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsShapesPostWorksheetShapeWithHttpInfo($name, $sheet_name, $shapeindex, $dto, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsShapesPostWorksheetShapeWithHttpInfo
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $dto (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsShapesPostWorksheetShapeWithHttpInfo($name, $sheet_name, $shapeindex, $dto = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsShapesPostWorksheetShapeRequest($name, $sheet_name, $shapeindex, $dto, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesPostWorksheetShapeAsync
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $dto (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsShapesPostWorksheetShapeAsync($name, $sheet_name, $shapeindex, $dto = null, $folder = null, $storage = null)
    {
        return $this->cellsShapesPostWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $dto, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesPostWorksheetShapeAsyncWithHttpInfo
     *
     * Update a shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $dto (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsShapesPostWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $shapeindex, $dto = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsShapesPostWorksheetShapeRequest($name, $sheet_name, $shapeindex, $dto, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesPostWorksheetShape'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  int $shapeindex shape index in worksheet shapes. (required)
     * @param  \Aspose\Cells\Cloud\Model\Shape $dto (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsShapesPostWorksheetShapeRequest($name, $sheet_name, $shapeindex, $dto = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesPostWorksheetShape'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesPostWorksheetShape'
            );
        }
        // verify the required parameter 'shapeindex' is set
        if ($shapeindex === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shapeindex when calling cellsShapesPostWorksheetShape'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($shapeindex !== null) {
            $resourcePath = str_replace(
                '{' . 'shapeindex' . '}',
                ObjectSerializer::toPathValue($shapeindex),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($dto)) {
            $_tempBody = $dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsShapesPutWorksheetShape
     *
     * Add shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $drawing_type shape object type (required)
     * @param  int $upper_left_row Upper left row index. (required)
     * @param  int $upper_left_column Upper left column index. (required)
     * @param  int $top Represents the vertical offset of Spinner from its left row, in unit of pixel. (required)
     * @param  int $left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (required)
     * @param  int $width Represents the height of Spinner, in unit of pixel. (required)
     * @param  int $height Represents the width of Spinner, in unit of pixel. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ShapeResponse
     */
    public function cellsShapesPutWorksheetShape($name, $sheet_name, $drawing_type, $upper_left_row, $upper_left_column, $top, $left, $width, $height, $folder = null, $storage = null)
    {
        list($response) = $this->cellsShapesPutWorksheetShapeWithHttpInfo($name, $sheet_name, $drawing_type, $upper_left_row, $upper_left_column, $top, $left, $width, $height, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsShapesPutWorksheetShapeWithHttpInfo
     *
     * Add shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $drawing_type shape object type (required)
     * @param  int $upper_left_row Upper left row index. (required)
     * @param  int $upper_left_column Upper left column index. (required)
     * @param  int $top Represents the vertical offset of Spinner from its left row, in unit of pixel. (required)
     * @param  int $left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (required)
     * @param  int $width Represents the height of Spinner, in unit of pixel. (required)
     * @param  int $height Represents the width of Spinner, in unit of pixel. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ShapeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsShapesPutWorksheetShapeWithHttpInfo($name, $sheet_name, $drawing_type, $upper_left_row, $upper_left_column, $top, $left, $width, $height, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ShapeResponse';
        $request = $this->cellsShapesPutWorksheetShapeRequest($name, $sheet_name, $drawing_type, $upper_left_row, $upper_left_column, $top, $left, $width, $height, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ShapeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsShapesPutWorksheetShapeAsync
     *
     * Add shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $drawing_type shape object type (required)
     * @param  int $upper_left_row Upper left row index. (required)
     * @param  int $upper_left_column Upper left column index. (required)
     * @param  int $top Represents the vertical offset of Spinner from its left row, in unit of pixel. (required)
     * @param  int $left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (required)
     * @param  int $width Represents the height of Spinner, in unit of pixel. (required)
     * @param  int $height Represents the width of Spinner, in unit of pixel. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsShapesPutWorksheetShapeAsync($name, $sheet_name, $drawing_type, $upper_left_row, $upper_left_column, $top, $left, $width, $height, $folder = null, $storage = null)
    {
        return $this->cellsShapesPutWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $drawing_type, $upper_left_row, $upper_left_column, $top, $left, $width, $height, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsShapesPutWorksheetShapeAsyncWithHttpInfo
     *
     * Add shape in worksheet
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $drawing_type shape object type (required)
     * @param  int $upper_left_row Upper left row index. (required)
     * @param  int $upper_left_column Upper left column index. (required)
     * @param  int $top Represents the vertical offset of Spinner from its left row, in unit of pixel. (required)
     * @param  int $left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (required)
     * @param  int $width Represents the height of Spinner, in unit of pixel. (required)
     * @param  int $height Represents the width of Spinner, in unit of pixel. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsShapesPutWorksheetShapeAsyncWithHttpInfo($name, $sheet_name, $drawing_type, $upper_left_row, $upper_left_column, $top, $left, $width, $height, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ShapeResponse';
        $request = $this->cellsShapesPutWorksheetShapeRequest($name, $sheet_name, $drawing_type, $upper_left_row, $upper_left_column, $top, $left, $width, $height, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsShapesPutWorksheetShape'
     *
     * @param  string $name document name. (required)
     * @param  string $sheet_name worksheet name. (required)
     * @param  string $drawing_type shape object type (required)
     * @param  int $upper_left_row Upper left row index. (required)
     * @param  int $upper_left_column Upper left column index. (required)
     * @param  int $top Represents the vertical offset of Spinner from its left row, in unit of pixel. (required)
     * @param  int $left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (required)
     * @param  int $width Represents the height of Spinner, in unit of pixel. (required)
     * @param  int $height Represents the width of Spinner, in unit of pixel. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsShapesPutWorksheetShapeRequest($name, $sheet_name, $drawing_type, $upper_left_row, $upper_left_column, $top, $left, $width, $height, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsShapesPutWorksheetShape'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsShapesPutWorksheetShape'
            );
        }
        // verify the required parameter 'drawing_type' is set
        if ($drawing_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $drawing_type when calling cellsShapesPutWorksheetShape'
            );
        }
        // verify the required parameter 'upper_left_row' is set
        if ($upper_left_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upper_left_row when calling cellsShapesPutWorksheetShape'
            );
        }
        // verify the required parameter 'upper_left_column' is set
        if ($upper_left_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upper_left_column when calling cellsShapesPutWorksheetShape'
            );
        }
        // verify the required parameter 'top' is set
        if ($top === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $top when calling cellsShapesPutWorksheetShape'
            );
        }
        // verify the required parameter 'left' is set
        if ($left === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $left when calling cellsShapesPutWorksheetShape'
            );
        }
        // verify the required parameter 'width' is set
        if ($width === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $width when calling cellsShapesPutWorksheetShape'
            );
        }
        // verify the required parameter 'height' is set
        if ($height === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $height when calling cellsShapesPutWorksheetShape'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/shapes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($drawing_type !== null) {
            $queryParams['DrawingType'] = ObjectSerializer::toQueryValue($drawing_type);
        }
        // query params
        if ($upper_left_row !== null) {
            $queryParams['upperLeftRow'] = ObjectSerializer::toQueryValue($upper_left_row);
        }
        // query params
        if ($upper_left_column !== null) {
            $queryParams['upperLeftColumn'] = ObjectSerializer::toQueryValue($upper_left_column);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($left !== null) {
            $queryParams['left'] = ObjectSerializer::toQueryValue($left);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
