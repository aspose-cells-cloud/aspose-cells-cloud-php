<?php
/**
 * CellsPageBreaksApi
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aspose\Cells\Cloud\ApiException;
use Aspose\Cells\Cloud\Configuration;
use Aspose\Cells\Cloud\HeaderSelector;
use Aspose\Cells\Cloud\ObjectSerializer;

/**
 * CellsPageBreaksApi Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsPageBreaksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreak
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPageBreaksDeleteHorizontalPageBreak($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPageBreaksDeleteHorizontalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreakWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPageBreaksDeleteHorizontalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPageBreaksDeleteHorizontalPageBreakRequest($name, $sheet_name, $index, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreakAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksDeleteHorizontalPageBreakAsync($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        return $this->cellsPageBreaksDeleteHorizontalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksDeleteHorizontalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPageBreaksDeleteHorizontalPageBreakRequest($name, $sheet_name, $index, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksDeleteHorizontalPageBreak'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPageBreaksDeleteHorizontalPageBreakRequest($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksDeleteHorizontalPageBreak'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksDeleteHorizontalPageBreak'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsPageBreaksDeleteHorizontalPageBreak'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreaks
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $row row (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPageBreaksDeleteHorizontalPageBreaks($name, $sheet_name, $row = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPageBreaksDeleteHorizontalPageBreaksWithHttpInfo($name, $sheet_name, $row, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreaksWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPageBreaksDeleteHorizontalPageBreaksWithHttpInfo($name, $sheet_name, $row = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPageBreaksDeleteHorizontalPageBreaksRequest($name, $sheet_name, $row, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreaksAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksDeleteHorizontalPageBreaksAsync($name, $sheet_name, $row = null, $folder = null, $storage = null)
    {
        return $this->cellsPageBreaksDeleteHorizontalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $row, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksDeleteHorizontalPageBreaksAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksDeleteHorizontalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $row = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPageBreaksDeleteHorizontalPageBreaksRequest($name, $sheet_name, $row, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksDeleteHorizontalPageBreaks'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $row (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPageBreaksDeleteHorizontalPageBreaksRequest($name, $sheet_name, $row = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksDeleteHorizontalPageBreaks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksDeleteHorizontalPageBreaks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreak
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPageBreaksDeleteVerticalPageBreak($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPageBreaksDeleteVerticalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreakWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPageBreaksDeleteVerticalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPageBreaksDeleteVerticalPageBreakRequest($name, $sheet_name, $index, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreakAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksDeleteVerticalPageBreakAsync($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        return $this->cellsPageBreaksDeleteVerticalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksDeleteVerticalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPageBreaksDeleteVerticalPageBreakRequest($name, $sheet_name, $index, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksDeleteVerticalPageBreak'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPageBreaksDeleteVerticalPageBreakRequest($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksDeleteVerticalPageBreak'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksDeleteVerticalPageBreak'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsPageBreaksDeleteVerticalPageBreak'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreaks
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $column column (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPageBreaksDeleteVerticalPageBreaks($name, $sheet_name, $column = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPageBreaksDeleteVerticalPageBreaksWithHttpInfo($name, $sheet_name, $column, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreaksWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $column (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPageBreaksDeleteVerticalPageBreaksWithHttpInfo($name, $sheet_name, $column = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPageBreaksDeleteVerticalPageBreaksRequest($name, $sheet_name, $column, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreaksAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $column (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksDeleteVerticalPageBreaksAsync($name, $sheet_name, $column = null, $folder = null, $storage = null)
    {
        return $this->cellsPageBreaksDeleteVerticalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $column, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksDeleteVerticalPageBreaksAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $column (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksDeleteVerticalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $column = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPageBreaksDeleteVerticalPageBreaksRequest($name, $sheet_name, $column, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksDeleteVerticalPageBreaks'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $column (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPageBreaksDeleteVerticalPageBreaksRequest($name, $sheet_name, $column = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksDeleteVerticalPageBreaks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksDeleteVerticalPageBreaks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/verticalpagebreaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreak
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\HorizontalPageBreakResponse
     */
    public function cellsPageBreaksGetHorizontalPageBreak($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPageBreaksGetHorizontalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreakWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\HorizontalPageBreakResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPageBreaksGetHorizontalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\HorizontalPageBreakResponse';
        $request = $this->cellsPageBreaksGetHorizontalPageBreakRequest($name, $sheet_name, $index, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\HorizontalPageBreakResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreakAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksGetHorizontalPageBreakAsync($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        return $this->cellsPageBreaksGetHorizontalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksGetHorizontalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\HorizontalPageBreakResponse';
        $request = $this->cellsPageBreaksGetHorizontalPageBreakRequest($name, $sheet_name, $index, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksGetHorizontalPageBreak'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPageBreaksGetHorizontalPageBreakRequest($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksGetHorizontalPageBreak'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksGetHorizontalPageBreak'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsPageBreaksGetHorizontalPageBreak'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreaks
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\HorizontalPageBreaksResponse
     */
    public function cellsPageBreaksGetHorizontalPageBreaks($name, $sheet_name, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPageBreaksGetHorizontalPageBreaksWithHttpInfo($name, $sheet_name, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreaksWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\HorizontalPageBreaksResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPageBreaksGetHorizontalPageBreaksWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\HorizontalPageBreaksResponse';
        $request = $this->cellsPageBreaksGetHorizontalPageBreaksRequest($name, $sheet_name, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\HorizontalPageBreaksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreaksAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksGetHorizontalPageBreaksAsync($name, $sheet_name, $folder = null, $storage = null)
    {
        return $this->cellsPageBreaksGetHorizontalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksGetHorizontalPageBreaksAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksGetHorizontalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\HorizontalPageBreaksResponse';
        $request = $this->cellsPageBreaksGetHorizontalPageBreaksRequest($name, $sheet_name, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksGetHorizontalPageBreaks'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPageBreaksGetHorizontalPageBreaksRequest($name, $sheet_name, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksGetHorizontalPageBreaks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksGetHorizontalPageBreaks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreak
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $index index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\VerticalPageBreakResponse
     */
    public function cellsPageBreaksGetVerticalPageBreak($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPageBreaksGetVerticalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreakWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\VerticalPageBreakResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPageBreaksGetVerticalPageBreakWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\VerticalPageBreakResponse';
        $request = $this->cellsPageBreaksGetVerticalPageBreakRequest($name, $sheet_name, $index, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\VerticalPageBreakResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreakAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksGetVerticalPageBreakAsync($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        return $this->cellsPageBreaksGetVerticalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksGetVerticalPageBreakAsyncWithHttpInfo($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\VerticalPageBreakResponse';
        $request = $this->cellsPageBreaksGetVerticalPageBreakRequest($name, $sheet_name, $index, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksGetVerticalPageBreak'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPageBreaksGetVerticalPageBreakRequest($name, $sheet_name, $index, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksGetVerticalPageBreak'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksGetVerticalPageBreak'
            );
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling cellsPageBreaksGetVerticalPageBreak'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreaks
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\VerticalPageBreaksResponse
     */
    public function cellsPageBreaksGetVerticalPageBreaks($name, $sheet_name, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPageBreaksGetVerticalPageBreaksWithHttpInfo($name, $sheet_name, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreaksWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\VerticalPageBreaksResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPageBreaksGetVerticalPageBreaksWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\VerticalPageBreaksResponse';
        $request = $this->cellsPageBreaksGetVerticalPageBreaksRequest($name, $sheet_name, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\VerticalPageBreaksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreaksAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksGetVerticalPageBreaksAsync($name, $sheet_name, $folder = null, $storage = null)
    {
        return $this->cellsPageBreaksGetVerticalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksGetVerticalPageBreaksAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksGetVerticalPageBreaksAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\VerticalPageBreaksResponse';
        $request = $this->cellsPageBreaksGetVerticalPageBreaksRequest($name, $sheet_name, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksGetVerticalPageBreaks'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPageBreaksGetVerticalPageBreaksRequest($name, $sheet_name, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksGetVerticalPageBreaks'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksGetVerticalPageBreaks'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/verticalpagebreaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksPutHorizontalPageBreak
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $cellname cellname (optional)
     * @param  int $row row (optional)
     * @param  int $column column (optional)
     * @param  int $start_column start_column (optional)
     * @param  int $end_column end_column (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPageBreaksPutHorizontalPageBreak($name, $sheet_name, $cellname = null, $row = null, $column = null, $start_column = null, $end_column = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPageBreaksPutHorizontalPageBreakWithHttpInfo($name, $sheet_name, $cellname, $row, $column, $start_column, $end_column, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPageBreaksPutHorizontalPageBreakWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  int $start_column (optional)
     * @param  int $end_column (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPageBreaksPutHorizontalPageBreakWithHttpInfo($name, $sheet_name, $cellname = null, $row = null, $column = null, $start_column = null, $end_column = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPageBreaksPutHorizontalPageBreakRequest($name, $sheet_name, $cellname, $row, $column, $start_column, $end_column, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksPutHorizontalPageBreakAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  int $start_column (optional)
     * @param  int $end_column (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksPutHorizontalPageBreakAsync($name, $sheet_name, $cellname = null, $row = null, $column = null, $start_column = null, $end_column = null, $folder = null, $storage = null)
    {
        return $this->cellsPageBreaksPutHorizontalPageBreakAsyncWithHttpInfo($name, $sheet_name, $cellname, $row, $column, $start_column, $end_column, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksPutHorizontalPageBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  int $start_column (optional)
     * @param  int $end_column (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksPutHorizontalPageBreakAsyncWithHttpInfo($name, $sheet_name, $cellname = null, $row = null, $column = null, $start_column = null, $end_column = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPageBreaksPutHorizontalPageBreakRequest($name, $sheet_name, $cellname, $row, $column, $start_column, $end_column, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksPutHorizontalPageBreak'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $row (optional)
     * @param  int $column (optional)
     * @param  int $start_column (optional)
     * @param  int $end_column (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPageBreaksPutHorizontalPageBreakRequest($name, $sheet_name, $cellname = null, $row = null, $column = null, $start_column = null, $end_column = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksPutHorizontalPageBreak'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksPutHorizontalPageBreak'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cellname !== null) {
            $queryParams['cellname'] = ObjectSerializer::toQueryValue($cellname);
        }
        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($end_column !== null) {
            $queryParams['endColumn'] = ObjectSerializer::toQueryValue($end_column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsPageBreaksPutVerticalPageBreak
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  string $cellname cellname (optional)
     * @param  int $column column (optional)
     * @param  int $row row (optional)
     * @param  int $start_row start_row (optional)
     * @param  int $end_row end_row (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsPageBreaksPutVerticalPageBreak($name, $sheet_name, $cellname = null, $column = null, $row = null, $start_row = null, $end_row = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsPageBreaksPutVerticalPageBreakWithHttpInfo($name, $sheet_name, $cellname, $column, $row, $start_row, $end_row, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsPageBreaksPutVerticalPageBreakWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $column (optional)
     * @param  int $row (optional)
     * @param  int $start_row (optional)
     * @param  int $end_row (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsPageBreaksPutVerticalPageBreakWithHttpInfo($name, $sheet_name, $cellname = null, $column = null, $row = null, $start_row = null, $end_row = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPageBreaksPutVerticalPageBreakRequest($name, $sheet_name, $cellname, $column, $row, $start_row, $end_row, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsPageBreaksPutVerticalPageBreakAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $column (optional)
     * @param  int $row (optional)
     * @param  int $start_row (optional)
     * @param  int $end_row (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksPutVerticalPageBreakAsync($name, $sheet_name, $cellname = null, $column = null, $row = null, $start_row = null, $end_row = null, $folder = null, $storage = null)
    {
        return $this->cellsPageBreaksPutVerticalPageBreakAsyncWithHttpInfo($name, $sheet_name, $cellname, $column, $row, $start_row, $end_row, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsPageBreaksPutVerticalPageBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $column (optional)
     * @param  int $row (optional)
     * @param  int $start_row (optional)
     * @param  int $end_row (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsPageBreaksPutVerticalPageBreakAsyncWithHttpInfo($name, $sheet_name, $cellname = null, $column = null, $row = null, $start_row = null, $end_row = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsPageBreaksPutVerticalPageBreakRequest($name, $sheet_name, $cellname, $column, $row, $start_row, $end_row, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsPageBreaksPutVerticalPageBreak'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  string $cellname (optional)
     * @param  int $column (optional)
     * @param  int $row (optional)
     * @param  int $start_row (optional)
     * @param  int $end_row (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsPageBreaksPutVerticalPageBreakRequest($name, $sheet_name, $cellname = null, $column = null, $row = null, $start_row = null, $end_row = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsPageBreaksPutVerticalPageBreak'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsPageBreaksPutVerticalPageBreak'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/verticalpagebreaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cellname !== null) {
            $queryParams['cellname'] = ObjectSerializer::toQueryValue($cellname);
        }
        // query params
        if ($column !== null) {
            $queryParams['column'] = ObjectSerializer::toQueryValue($column);
        }
        // query params
        if ($row !== null) {
            $queryParams['row'] = ObjectSerializer::toQueryValue($row);
        }
        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($end_row !== null) {
            $queryParams['endRow'] = ObjectSerializer::toQueryValue($end_row);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
