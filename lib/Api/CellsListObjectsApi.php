<?php
/**
 * CellsListObjectsApi
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Cells\Cloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aspose\Cells\Cloud\ApiException;
use Aspose\Cells\Cloud\Configuration;
use Aspose\Cells\Cloud\HeaderSelector;
use Aspose\Cells\Cloud\ObjectSerializer;

/**
 * CellsListObjectsApi Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsListObjectsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObject
     *
     * Delete worksheet list object by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index List object index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsListObjectsDeleteWorksheetListObject($name, $sheet_name, $list_object_index, $folder = null, $storage = null)
    {
        list($response) = $this->cellsListObjectsDeleteWorksheetListObjectWithHttpInfo($name, $sheet_name, $list_object_index, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjectWithHttpInfo
     *
     * Delete worksheet list object by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index List object index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsListObjectsDeleteWorksheetListObjectWithHttpInfo($name, $sheet_name, $list_object_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsListObjectsDeleteWorksheetListObjectRequest($name, $sheet_name, $list_object_index, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjectAsync
     *
     * Delete worksheet list object by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index List object index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsDeleteWorksheetListObjectAsync($name, $sheet_name, $list_object_index, $folder = null, $storage = null)
    {
        return $this->cellsListObjectsDeleteWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjectAsyncWithHttpInfo
     *
     * Delete worksheet list object by index
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index List object index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsDeleteWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsListObjectsDeleteWorksheetListObjectRequest($name, $sheet_name, $list_object_index, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsDeleteWorksheetListObject'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index List object index (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsListObjectsDeleteWorksheetListObjectRequest($name, $sheet_name, $list_object_index, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsDeleteWorksheetListObject'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsDeleteWorksheetListObject'
            );
        }
        // verify the required parameter 'list_object_index' is set
        if ($list_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_object_index when calling cellsListObjectsDeleteWorksheetListObject'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($list_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'listObjectIndex' . '}',
                ObjectSerializer::toPathValue($list_object_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjects
     *
     * Delete worksheet list objects
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsListObjectsDeleteWorksheetListObjects($name, $sheet_name, $folder = null, $storage = null)
    {
        list($response) = $this->cellsListObjectsDeleteWorksheetListObjectsWithHttpInfo($name, $sheet_name, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjectsWithHttpInfo
     *
     * Delete worksheet list objects
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsListObjectsDeleteWorksheetListObjectsWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsListObjectsDeleteWorksheetListObjectsRequest($name, $sheet_name, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjectsAsync
     *
     * Delete worksheet list objects
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsDeleteWorksheetListObjectsAsync($name, $sheet_name, $folder = null, $storage = null)
    {
        return $this->cellsListObjectsDeleteWorksheetListObjectsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsDeleteWorksheetListObjectsAsyncWithHttpInfo
     *
     * Delete worksheet list objects
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsDeleteWorksheetListObjectsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsListObjectsDeleteWorksheetListObjectsRequest($name, $sheet_name, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsDeleteWorksheetListObjects'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsListObjectsDeleteWorksheetListObjectsRequest($name, $sheet_name, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsDeleteWorksheetListObjects'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsDeleteWorksheetListObjects'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObject
     *
     * Get worksheet list object info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $listobjectindex list object index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ListObjectResponse
     */
    public function cellsListObjectsGetWorksheetListObject($name, $sheet_name, $listobjectindex, $folder = null, $storage = null)
    {
        list($response) = $this->cellsListObjectsGetWorksheetListObjectWithHttpInfo($name, $sheet_name, $listobjectindex, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjectWithHttpInfo
     *
     * Get worksheet list object info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $listobjectindex list object index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ListObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsListObjectsGetWorksheetListObjectWithHttpInfo($name, $sheet_name, $listobjectindex, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ListObjectResponse';
        $request = $this->cellsListObjectsGetWorksheetListObjectRequest($name, $sheet_name, $listobjectindex, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ListObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjectAsync
     *
     * Get worksheet list object info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $listobjectindex list object index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsGetWorksheetListObjectAsync($name, $sheet_name, $listobjectindex, $folder = null, $storage = null)
    {
        return $this->cellsListObjectsGetWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $listobjectindex, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjectAsyncWithHttpInfo
     *
     * Get worksheet list object info by index.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $listobjectindex list object index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsGetWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $listobjectindex, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ListObjectResponse';
        $request = $this->cellsListObjectsGetWorksheetListObjectRequest($name, $sheet_name, $listobjectindex, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsGetWorksheetListObject'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $listobjectindex list object index. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsListObjectsGetWorksheetListObjectRequest($name, $sheet_name, $listobjectindex, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsGetWorksheetListObject'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsGetWorksheetListObject'
            );
        }
        // verify the required parameter 'listobjectindex' is set
        if ($listobjectindex === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listobjectindex when calling cellsListObjectsGetWorksheetListObject'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listobjectindex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($listobjectindex !== null) {
            $resourcePath = str_replace(
                '{' . 'listobjectindex' . '}',
                ObjectSerializer::toPathValue($listobjectindex),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjects
     *
     * Get worksheet listobjects info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ListObjectsResponse
     */
    public function cellsListObjectsGetWorksheetListObjects($name, $sheet_name, $folder = null, $storage = null)
    {
        list($response) = $this->cellsListObjectsGetWorksheetListObjectsWithHttpInfo($name, $sheet_name, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjectsWithHttpInfo
     *
     * Get worksheet listobjects info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ListObjectsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsListObjectsGetWorksheetListObjectsWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ListObjectsResponse';
        $request = $this->cellsListObjectsGetWorksheetListObjectsRequest($name, $sheet_name, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ListObjectsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjectsAsync
     *
     * Get worksheet listobjects info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsGetWorksheetListObjectsAsync($name, $sheet_name, $folder = null, $storage = null)
    {
        return $this->cellsListObjectsGetWorksheetListObjectsAsyncWithHttpInfo($name, $sheet_name, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsGetWorksheetListObjectsAsyncWithHttpInfo
     *
     * Get worksheet listobjects info.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsGetWorksheetListObjectsAsyncWithHttpInfo($name, $sheet_name, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ListObjectsResponse';
        $request = $this->cellsListObjectsGetWorksheetListObjectsRequest($name, $sheet_name, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsGetWorksheetListObjects'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsListObjectsGetWorksheetListObjectsRequest($name, $sheet_name, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsGetWorksheetListObjects'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsGetWorksheetListObjects'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObject
     *
     * Update  list object
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index list Object index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object listObject dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsListObjectsPostWorksheetListObject($name, $sheet_name, $list_object_index, $list_object = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsListObjectsPostWorksheetListObjectWithHttpInfo($name, $sheet_name, $list_object_index, $list_object, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectWithHttpInfo
     *
     * Update  list object
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index list Object index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object listObject dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsListObjectsPostWorksheetListObjectWithHttpInfo($name, $sheet_name, $list_object_index, $list_object = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectRequest($name, $sheet_name, $list_object_index, $list_object, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectAsync
     *
     * Update  list object
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index list Object index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object listObject dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsPostWorksheetListObjectAsync($name, $sheet_name, $list_object_index, $list_object = null, $folder = null, $storage = null)
    {
        return $this->cellsListObjectsPostWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $list_object, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectAsyncWithHttpInfo
     *
     * Update  list object
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index list Object index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object listObject dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsPostWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $list_object = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectRequest($name, $sheet_name, $list_object_index, $list_object, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsPostWorksheetListObject'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $list_object_index list Object index (required)
     * @param  \Aspose\Cells\Cloud\Model\ListObject $list_object listObject dto in request body. (optional)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsListObjectsPostWorksheetListObjectRequest($name, $sheet_name, $list_object_index, $list_object = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsPostWorksheetListObject'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsPostWorksheetListObject'
            );
        }
        // verify the required parameter 'list_object_index' is set
        if ($list_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_object_index when calling cellsListObjectsPostWorksheetListObject'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($list_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'listObjectIndex' . '}',
                ObjectSerializer::toPathValue($list_object_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($list_object)) {
            $_tempBody = $list_object;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectConvertToRange
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $list_object_index list_object_index (required)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsListObjectsPostWorksheetListObjectConvertToRange($name, $sheet_name, $list_object_index, $folder = null, $storage = null)
    {
        list($response) = $this->cellsListObjectsPostWorksheetListObjectConvertToRangeWithHttpInfo($name, $sheet_name, $list_object_index, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectConvertToRangeWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsListObjectsPostWorksheetListObjectConvertToRangeWithHttpInfo($name, $sheet_name, $list_object_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectConvertToRangeRequest($name, $sheet_name, $list_object_index, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectConvertToRangeAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsPostWorksheetListObjectConvertToRangeAsync($name, $sheet_name, $list_object_index, $folder = null, $storage = null)
    {
        return $this->cellsListObjectsPostWorksheetListObjectConvertToRangeAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectConvertToRangeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsPostWorksheetListObjectConvertToRangeAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectConvertToRangeRequest($name, $sheet_name, $list_object_index, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsPostWorksheetListObjectConvertToRange'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsListObjectsPostWorksheetListObjectConvertToRangeRequest($name, $sheet_name, $list_object_index, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsPostWorksheetListObjectConvertToRange'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsPostWorksheetListObjectConvertToRange'
            );
        }
        // verify the required parameter 'list_object_index' is set
        if ($list_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_object_index when calling cellsListObjectsPostWorksheetListObjectConvertToRange'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/ConvertToRange';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($list_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'listObjectIndex' . '}',
                ObjectSerializer::toPathValue($list_object_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSortTable
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $list_object_index list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter data_sorter (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsListObjectsPostWorksheetListObjectSortTable($name, $sheet_name, $list_object_index, $data_sorter = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsListObjectsPostWorksheetListObjectSortTableWithHttpInfo($name, $sheet_name, $list_object_index, $data_sorter, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSortTableWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsListObjectsPostWorksheetListObjectSortTableWithHttpInfo($name, $sheet_name, $list_object_index, $data_sorter = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectSortTableRequest($name, $sheet_name, $list_object_index, $data_sorter, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSortTableAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsPostWorksheetListObjectSortTableAsync($name, $sheet_name, $list_object_index, $data_sorter = null, $folder = null, $storage = null)
    {
        return $this->cellsListObjectsPostWorksheetListObjectSortTableAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $data_sorter, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSortTableAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsPostWorksheetListObjectSortTableAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $data_sorter = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectSortTableRequest($name, $sheet_name, $list_object_index, $data_sorter, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsPostWorksheetListObjectSortTable'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  \Aspose\Cells\Cloud\Model\DataSorter $data_sorter (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsListObjectsPostWorksheetListObjectSortTableRequest($name, $sheet_name, $list_object_index, $data_sorter = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsPostWorksheetListObjectSortTable'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsPostWorksheetListObjectSortTable'
            );
        }
        // verify the required parameter 'list_object_index' is set
        if ($list_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_object_index when calling cellsListObjectsPostWorksheetListObjectSortTable'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/sort';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($list_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'listObjectIndex' . '}',
                ObjectSerializer::toPathValue($list_object_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data_sorter)) {
            $_tempBody = $data_sorter;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable
     *
     * @param  string $name name (required)
     * @param  string $sheet_name sheet_name (required)
     * @param  int $list_object_index list_object_index (required)
     * @param  string $destsheet_name destsheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request request (optional)
     * @param  string $folder folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\SaaSposeResponse
     */
    public function cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable($name, $sheet_name, $list_object_index, $destsheet_name, $request = null, $folder = null, $storage = null)
    {
        list($response) = $this->cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableWithHttpInfo($name, $sheet_name, $list_object_index, $destsheet_name, $request, $folder, $storage);
        return $response;
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $destsheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableWithHttpInfo($name, $sheet_name, $list_object_index, $destsheet_name, $request = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableRequest($name, $sheet_name, $list_object_index, $destsheet_name, $request, $folder, $storage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\SaaSposeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $destsheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsync($name, $sheet_name, $list_object_index, $destsheet_name, $request = null, $folder = null, $storage = null)
    {
        return $this->cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $destsheet_name, $request, $folder, $storage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $destsheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsyncWithHttpInfo($name, $sheet_name, $list_object_index, $destsheet_name, $request = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Cells\Cloud\Model\SaaSposeResponse';
        $request = $this->cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableRequest($name, $sheet_name, $list_object_index, $destsheet_name, $request, $folder, $storage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable'
     *
     * @param  string $name (required)
     * @param  string $sheet_name (required)
     * @param  int $list_object_index (required)
     * @param  string $destsheet_name (required)
     * @param  \Aspose\Cells\Cloud\Model\CreatePivotTableRequest $request (optional)
     * @param  string $folder (optional)
     * @param  string $storage storage name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableRequest($name, $sheet_name, $list_object_index, $destsheet_name, $request = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable'
            );
        }
        // verify the required parameter 'list_object_index' is set
        if ($list_object_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_object_index when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable'
            );
        }
        // verify the required parameter 'destsheet_name' is set
        if ($destsheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destsheet_name when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/SummarizeWithPivotTable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($destsheet_name !== null) {
            $queryParams['destsheetName'] = ObjectSerializer::toQueryValue($destsheet_name);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }
        // path params
        if ($list_object_index !== null) {
            $resourcePath = str_replace(
                '{' . 'listObjectIndex' . '}',
                ObjectSerializer::toPathValue($list_object_index),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cellsListObjectsPutWorksheetListObject
     *
     * Add a list object into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row of the list range. (required)
     * @param  int $start_column The start row of the list range. (required)
     * @param  int $end_row The start row of the list range. (required)
     * @param  int $end_column The start row of the list range. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     * @param  bool $has_headers Whether the range has headers. (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aspose\Cells\Cloud\Model\ListObjectResponse
     */
    public function cellsListObjectsPutWorksheetListObject($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $folder = null, $storage = null, $has_headers = 'true')
    {
        list($response) = $this->cellsListObjectsPutWorksheetListObjectWithHttpInfo($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $folder, $storage, $has_headers);
        return $response;
    }

    /**
     * Operation cellsListObjectsPutWorksheetListObjectWithHttpInfo
     *
     * Add a list object into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row of the list range. (required)
     * @param  int $start_column The start row of the list range. (required)
     * @param  int $end_row The start row of the list range. (required)
     * @param  int $end_column The start row of the list range. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     * @param  bool $has_headers Whether the range has headers. (optional, default to true)
     *
     * @throws \Aspose\Cells\Cloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aspose\Cells\Cloud\Model\ListObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cellsListObjectsPutWorksheetListObjectWithHttpInfo($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $folder = null, $storage = null, $has_headers = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ListObjectResponse';
        $request = $this->cellsListObjectsPutWorksheetListObjectRequest($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $folder, $storage, $has_headers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aspose\Cells\Cloud\Model\ListObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cellsListObjectsPutWorksheetListObjectAsync
     *
     * Add a list object into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row of the list range. (required)
     * @param  int $start_column The start row of the list range. (required)
     * @param  int $end_row The start row of the list range. (required)
     * @param  int $end_column The start row of the list range. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     * @param  bool $has_headers Whether the range has headers. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsPutWorksheetListObjectAsync($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $folder = null, $storage = null, $has_headers = 'true')
    {
        return $this->cellsListObjectsPutWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $folder, $storage, $has_headers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cellsListObjectsPutWorksheetListObjectAsyncWithHttpInfo
     *
     * Add a list object into worksheet.
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row of the list range. (required)
     * @param  int $start_column The start row of the list range. (required)
     * @param  int $end_row The start row of the list range. (required)
     * @param  int $end_column The start row of the list range. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     * @param  bool $has_headers Whether the range has headers. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cellsListObjectsPutWorksheetListObjectAsyncWithHttpInfo($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $folder = null, $storage = null, $has_headers = 'true')
    {
        $returnType = '\Aspose\Cells\Cloud\Model\ListObjectResponse';
        $request = $this->cellsListObjectsPutWorksheetListObjectRequest($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $folder, $storage, $has_headers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cellsListObjectsPutWorksheetListObject'
     *
     * @param  string $name Document name. (required)
     * @param  string $sheet_name The worksheet name. (required)
     * @param  int $start_row The start row of the list range. (required)
     * @param  int $start_column The start row of the list range. (required)
     * @param  int $end_row The start row of the list range. (required)
     * @param  int $end_column The start row of the list range. (required)
     * @param  string $folder Document&#39;s folder. (optional)
     * @param  string $storage storage name. (optional)
     * @param  bool $has_headers Whether the range has headers. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cellsListObjectsPutWorksheetListObjectRequest($name, $sheet_name, $start_row, $start_column, $end_row, $end_column, $folder = null, $storage = null, $has_headers = 'true')
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cellsListObjectsPutWorksheetListObject'
            );
        }
        // verify the required parameter 'sheet_name' is set
        if ($sheet_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_name when calling cellsListObjectsPutWorksheetListObject'
            );
        }
        // verify the required parameter 'start_row' is set
        if ($start_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_row when calling cellsListObjectsPutWorksheetListObject'
            );
        }
        // verify the required parameter 'start_column' is set
        if ($start_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_column when calling cellsListObjectsPutWorksheetListObject'
            );
        }
        // verify the required parameter 'end_row' is set
        if ($end_row === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_row when calling cellsListObjectsPutWorksheetListObject'
            );
        }
        // verify the required parameter 'end_column' is set
        if ($end_column === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_column when calling cellsListObjectsPutWorksheetListObject'
            );
        }

        $resourcePath = '/cells/{name}/worksheets/{sheetName}/listobjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_row !== null) {
            $queryParams['startRow'] = ObjectSerializer::toQueryValue($start_row);
        }
        // query params
        if ($start_column !== null) {
            $queryParams['startColumn'] = ObjectSerializer::toQueryValue($start_column);
        }
        // query params
        if ($end_row !== null) {
            $queryParams['endRow'] = ObjectSerializer::toQueryValue($end_row);
        }
        // query params
        if ($end_column !== null) {
            $queryParams['endColumn'] = ObjectSerializer::toQueryValue($end_column);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($has_headers !== null) {
            $queryParams['hasHeaders'] = ObjectSerializer::toQueryValue($has_headers);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($sheet_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sheetName' . '}',
                ObjectSerializer::toPathValue($sheet_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            else if (gettype($httpBody) == 'array' && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if($this->config->getAccessToken()!==''){
            $defaultHeaders['Authorization']= 'Bearer ' . $this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
