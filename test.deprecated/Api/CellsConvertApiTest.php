<?php
/**
 * OAuthApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Aspose\Cells\Cloud;

require_once('vendor\autoload.php');
require_once('test\Api\CellsApiTestBase.php');
use \Aspose\Cells\Cloud\Configuration;
use \Aspose\Cells\Cloud\ApiException;
use \Aspose\Cells\Cloud\ObjectSerializer;
use \Aspose\Cells\Cloud\CellsApiTestBase;
use \Aspose\Cells\Cloud\Api\CellsApi;
use \Aspose\Cells\Cloud\Model\ColumnsResponse;

use \Aspose\Cells\Cloud\Model\MatchConditionRequest;
use \Aspose\Cells\Cloud\Model\Style;
use \Aspose\Cells\Cloud\Model\FileInfo;
use PHPUnit\Framework\TestCase;

/**
 * OAuthApiTest Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsConvertApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        $this->instance = CellsApiTestBase::getInstance();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    public function testCellsConvertDocxApiTest()
    {
        $outPath = null;      
        $cwd = getcwd();
        $parents = "/";
        $name = "TestData/Book1.xlsx";
        $file = null;
        for ($x=0; $x <= 10; $x++) {
            $path = $cwd . $parents . $name;
            if (file_exists($path)) {
                $file = file_get_contents($path);
                break;
            }
            $parents = $parents . "../";
        }
        $result = $this->instance->postConvertWorkbookToDocx( $path);
        // $contents = $result->fread($result->getSize());
        $this->assertGreaterThan(6000, $result->getFileSize(), "convert files error.");
    }
    public function testCellsConvertPngApiTest()
    {
        $outPath = null;      
        $cwd = getcwd();
        $parents = "/";
        $name = "TestData/Book1.xlsx";
        $file = null;
        for ($x=0; $x <= 10; $x++) {
            $path = $cwd . $parents . $name;
            if (file_exists($path)) {
                $file = file_get_contents($path);
                break;
            }
            $parents = $parents . "../";
        }
        $result = $this->instance->postConvertWorkbookToPng( $path);
        // $contents = $result->fread($result->getSize());
        $this->assertGreaterThan(6000, $result->getFileSize(), "convert files error.");
    }
    public function testCellsConvertPdfApiTest()
    {
        $outPath = null;      
        $cwd = getcwd();
        $parents = "/";
        $name = "TestData/Book1.xlsx";
        $file = null;
        for ($x=0; $x <= 10; $x++) {
            $path = $cwd . $parents . $name;
            if (file_exists($path)) {
                $file = file_get_contents($path);
                break;
            }
            $parents = $parents . "../";
        }
        $result = $this->instance->postConvertWorkbookToPdf( $path);
        // $contents = $result->fread($result->getSize());
        $this->assertGreaterThan(6000, $result->getFileSize(), "convert files error.");
    }

    public function testCellsConvertPptxApiTest()
    {
        $outPath = null;      
        $cwd = getcwd();
        $parents = "/";
        $name = "TestData/Book1.xlsx";
        $file = null;
        for ($x=0; $x <= 10; $x++) {
            $path = $cwd . $parents . $name;
            if (file_exists($path)) {
                $file = file_get_contents($path);
                break;
            }
            $parents = $parents . "../";
        }
        $result = $this->instance->postConvertWorkbookToPptx( $path);
        // $contents = $result->fread($result->getSize());
        $this->assertGreaterThan(6000, $result->getFileSize(), "convert files error.");
    }

    public function testCellsConvertHtmlApiTest()
    {
        $outPath = null;      
        $cwd = getcwd();
        $parents = "/";
        $name = "TestData/Book1.xlsx";
        $file = null;
        for ($x=0; $x <= 10; $x++) {
            $path = $cwd . $parents . $name;
            if (file_exists($path)) {
                $file = file_get_contents($path);
                break;
            }
            $parents = $parents . "../";
        }
        $result = $this->instance->postConvertWorkbookToHtml( $path);
        // $contents = $result->fread($result->getSize());
        $this->assertGreaterThan(6000, $result->getFileSize(), "convert files error.");
    }

    public function testCellsConvertMarkdownApiTest()
    {
        $outPath = null;      
        $cwd = getcwd();
        $parents = "/";
        $name = "TestData/Book1.xlsx";
        $file = null;
        for ($x=0; $x <= 10; $x++) {
            $path = $cwd . $parents . $name;
            if (file_exists($path)) {
                $file = file_get_contents($path);
                break;
            }
            $parents = $parents . "../";
        }
        $result = $this->instance->postConvertWorkbookToMarkdown( $path);
        // $contents = $result->fread($result->getSize());
        $this->
        assertGreaterThan(1000, $result->getFileSize(), "convert files error.");
    }

    public function testCellsConvertJsonApiTest()
    {
        $outPath = null;      
        $cwd = getcwd();
        $parents = "/";
        $name = "TestData/Book1.xlsx";
        $file = null;
        for ($x=0; $x <= 10; $x++) {
            $path = $cwd . $parents . $name;
            if (file_exists($path)) {
                $file = file_get_contents($path);
                break;
            }
            $parents = $parents . "../";
        }
        $result = $this->instance->postConvertWorkbookToJson( $path);
        // $contents = $result->fread($result->getSize());
        $this->assertGreaterThan(1000, $result->getFileSize(), "convert files error.");
    }
    public function testCellsConvertSQLApiTest()
    {
        $outPath = null;      
        $cwd = getcwd();
        $parents = "/";
        $name = "TestData/Book1.xlsx";
        $file = null;
        for ($x=0; $x <= 10; $x++) {
            $path = $cwd . $parents . $name;
            if (file_exists($path)) {
                $file = file_get_contents($path);
                break;
            }
            $parents = $parents . "../";
        }
        $result = $this->instance->postConvertWorkbookToSQL( $path);
        // $contents = $result->fread($result->getSize());
        $this->assertGreaterThan(1000, $result->getFileSize(), "convert files error.");
    }
    public function testCellsConvertCSVApiTest()
    {
        $outPath = null;      
        $cwd = getcwd();
        $parents = "/";
        $name = "TestData/Book1.xlsx";
        $file = null;
        for ($x=0; $x <= 10; $x++) {
            $path = $cwd . $parents . $name;
            if (file_exists($path)) {
                $file = file_get_contents($path);
                break;
            }
            $parents = $parents . "../";
        }
        $result = $this->instance->postConvertWorkbookToCSV( $path);
        // $contents = $result->fread($result->getSize());
        $this->assertGreaterThan(1000, $result->getFileSize(), "convert files error.");
    }
}
