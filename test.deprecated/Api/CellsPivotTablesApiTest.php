<?php
/**
 * CellsPivotTablesApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Aspose\Cells\Cloud;

require_once('vendor\autoload.php');
require_once('test\Api\CellsApiTestBase.php');
use \Aspose\Cells\Cloud\Configuration;
use \Aspose\Cells\Cloud\ApiException;
use \Aspose\Cells\Cloud\ObjectSerializer;
use \Aspose\Cells\Cloud\CellsApiTestBase;
use \Aspose\Cells\Cloud\Api\CellsApi;
use \Aspose\Cells\Cloud\Model\PivotTableFieldRequest;
use \Aspose\Cells\Cloud\Model\Style;
use \Aspose\Cells\Cloud\Model\Font;
use \Aspose\Cells\Cloud\Model\PivotFilter;
use \Aspose\Cells\Cloud\Model\PivotField;
use \Aspose\Cells\Cloud\Model\CreatePivotTableRequest;
use \Aspose\Cells\Cloud\Model\AutoFilter;
use \Aspose\Cells\Cloud\Model\FilterColumn;
use \Aspose\Cells\Cloud\Model\Top10Filter;
/**
 * CellsPivotTablesApiTest Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Cells\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CellsPivotTablesApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        $this->instance = CellsApiTestBase::getInstance();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for cellsPivotTablesDeletePivotTableField
     *
     * Delete pivot field into into pivot table.
     *
     */
    public function testCellsPivotTablesDeletePivotTableField()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $pivotFieldType = "row";
        $request = new PivotTableFieldRequest();
        $request->setData( array(1));
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesDeletePivotTableField($name, $sheet_name, $pivotTableIndex, $pivotFieldType,$request,$folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesDeleteWorksheetPivotTable
     *
     * Delete worksheet pivot table by index.
     *
     */
    public function testCellsPivotTablesDeleteWorksheetPivotTable()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $pivotFieldType = "row";
        $request = new PivotTableFieldRequest();
        $request->setData( array(1));
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesDeleteWorksheetPivotTable($name, $sheet_name, $pivotTableIndex, $folder);
        $this->assertEquals(200, $result['code']);
    }



    /**
     * Test case for cellsPivotTablesDeleteWorksheetPivotTableFilters
     *
     * delete all pivot filters for piovt table.
     *
     */
    public function testCellsPivotTablesDeleteWorksheetPivotTableFilters()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $fieldIndex = 0;
        $needReCalculate = 'true';
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesDeleteWorksheetPivotTableFilters($name, $sheet_name,$pivotTableIndex,$needReCalculate, $folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesDeleteWorksheetPivotTables
     *
     * Delete worksheet pivot tables.
     *
     */
    public function testCellsPivotTablesDeleteWorksheetPivotTables()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $fieldIndex = 0;
        $needReCalculate = 'true';
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesDeleteWorksheetPivotTables($name, $sheet_name, $folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesGetPivotTableField
     *
     * Get pivot field into into pivot table.
     *
     */
    public function testCellsPivotTablesGetPivotTableField()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $pivotFieldIndex = 0;
        $pivotFieldType = "Row";
        $needReCalculate = 'true';
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesGetPivotTableField($name, $sheet_name,$pivotTableIndex, $pivotFieldIndex,$pivotFieldType,$folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesGetWorksheetPivotTable
     *
     * Get worksheet pivottable info by index..
     *
     */
    public function testCellsPivotTablesGetWorksheetPivotTable()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $fieldIndex = 0;
        $needReCalculate = 'true';
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesGetWorksheetPivotTable($name, $sheet_name,$pivotTableIndex, $folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesGetWorksheetPivotTableFilter
     *
     * .
     *
     */
    public function testCellsPivotTablesGetWorksheetPivotTableFilter()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $filterIndex = 0;
        $fieldIndex = 0;
        $needReCalculate = 'true';
        $folder = "Temp";
        $pivotFilter = new PivotFilter();
        $pivotFilter->setFieldIndex (1);
        $pivotFilter->setFilterType("Count");
        $autoFilter = new AutoFilter();
        
        $filterColumn = new FilterColumn();
        $filterColumn->setFilterType( "Top10");
        $filterColumn->setFieldIndex (0);

        $filterColumn->setTop10Filter ( new Top10Filter());
        $filterColumn->getTop10Filter()->setItems  (1);
        $filterColumn->getTop10Filter()->setIsTop ("true");
        $filterColumn->getTop10Filter()->setIsPercent ("false");
        $autoFilter->FilterColumns = array ( $filterColumn);
        
        $pivotFilter->setAutoFilter ($autoFilter);

        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesPutWorksheetPivotTableFilter($name, $sheet_name,$pivotTableIndex, $pivotFilter, $needReCalculate,$folder);
        $result = $this->instance->cellsPivotTablesGetWorksheetPivotTableFilter($name, $sheet_name,$pivotTableIndex, $filterIndex, $folder);
        $result = $this->instance->cellsPivotTablesDeleteWorksheetPivotTableFilter($name, $sheet_name, $pivotTableIndex,  $fieldIndex,$needReCalculate,$folder);
        
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesGetWorksheetPivotTableFilters
     *
     * .
     *
     */
    public function testCellsPivotTablesGetWorksheetPivotTableFilters()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $fieldIndex = 0;
        $needReCalculate = 'true';
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesGetWorksheetPivotTableFilters($name, $sheet_name,$pivotTableIndex, $folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesGetWorksheetPivotTables
     *
     * Get worksheet pivottables info..
     *
     */
    public function testCellsPivotTablesGetWorksheetPivotTables()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $fieldIndex = 0;
        $needReCalculate = 'true';
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesGetWorksheetPivotTables($name, $sheet_name, $folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesPostPivotTableCellStyle
     *
     * Update cell style for pivot table.
     *
     */
    public function testCellsPivotTablesPostPivotTableCellStyle()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $column = 1;
        $row = 1;
        $style = new Style();
        $style->setFont( new Font());
        $style->getFont()->setSize (17);
        $needReCalculate = 'true';
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesPostPivotTableCellStyle($name, $sheet_name, $pivotTableIndex ,$column,$row ,$style,$needReCalculate  ,$folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesPostPivotTableFieldHideItem
     *
     * .
     *
     */
    public function testCellsPivotTablesPostPivotTableFieldHideItem()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $pivotFieldType = "Row";
        $fieldIndex = 0;
        $itemIndex = 1;
        $isHide = 'true';
        $needReCalculate = 'true';
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesPostPivotTableFieldHideItem($name, $sheet_name, $pivotTableIndex ,$pivotFieldType,$fieldIndex ,$itemIndex,$isHide,$needReCalculate  ,$folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesPostPivotTableFieldMoveTo
     *
     * .
     *
     */
    public function testCellsPivotTablesPostPivotTableFieldMoveTo()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $fieldIndex = 0;
        $from = "Row";
        $to = "Column";
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesPostPivotTableFieldMoveTo($name, $sheet_name, $pivotTableIndex ,$fieldIndex ,$from,$to ,$folder);
        $this->assertEquals(200, $result['code']);
    }
    /**
     * Test case for cellsPivotTablesPostPivotTableUpdatePivotFields
     *
     * .
     *
     */
    public function testCellsPivotTablesPostPivotTableUpdatePivotFields()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $fieldIndex = 0;
        $pivotField = new PivotField();
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesPostPivotTableUpdatePivotFields($name, $sheet_name, $pivotTableIndex ,"Row" ,$pivotField,'false' ,$folder);
        $this->assertEquals(200, $result['code']);
    }
/**
     * Test case for cellsPivotTablesPostPivotTableUpdatePivotField
     *
     * .
     *
     */
    public function testCellsPivotTablesPostPivotTableUpdatePivotField()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $fieldIndex = 0;
        $pivotField = new PivotField();
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesPostPivotTableUpdatePivotField($name, $sheet_name, $pivotTableIndex,0 ,"Row" ,$pivotField,'false' ,$folder);
        $this->assertEquals(200, $result['code']);
    }
    /**
     * Test case for cellsPivotTablesPostPivotTableStyle
     *
     * Update style for pivot table.
     *
     */
    public function testCellsPivotTablesPostPivotTableStyle()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $style = new Style();
        $style->setFont( new Font());
        $style->getFont()->setSize (17);
        $needReCalculate = 'true';
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesPostPivotTableStyle($name, $sheet_name, $pivotTableIndex ,$style,$needReCalculate,$folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesPostWorksheetPivotTableCalculate
     *
     * Calculates pivottable's data to cells..
     *
     */
    public function testCellsPivotTablesPostWorksheetPivotTableCalculate()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $needReCalculate = 'true';
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesPostWorksheetPivotTableCalculate($name, $sheet_name, $pivotTableIndex ,$folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesPostWorksheetPivotTableMove
     *
     * .
     *
     */
    public function testCellsPivotTablesPostWorksheetPivotTableMove()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $column = 1;
        $row = 1;
        $destCellName = 'C10';
        $needReCalculate = 'true';
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesPostWorksheetPivotTableMove($name, $sheet_name, $pivotTableIndex ,$column,$row ,$destCellName ,$folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesPutPivotTableField
     *
     * Add pivot field into into pivot table.
     *
     */
    public function testCellsPivotTablesPutPivotTableField()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $pivotFieldType = "Row";
        $request = new PivotTableFieldRequest();
        $request->setData( array(1));
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesPutPivotTableField($name, $sheet_name, $pivotTableIndex, $pivotFieldType,$request,null,$folder);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesPutWorksheetPivotTable
     *
     * Add a pivot table into worksheet..
     *
     */
    public function testCellsPivotTablesPutWorksheetPivotTable()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $request = new CreatePivotTableRequest();
        $request->setName ("TestPivot");
        $request->setDestCellName ("C1");
        $request->setSourceData ("Sheet1!C6:E13");
        $request->setUseSameSource( true);
        $sourceData = "Sheet1!C6:E13";
        $destCellName = "C1";
        $tableName = "TestPivot";
        $useSameSource = 'true';
        $folder = "Temp";
        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesPutWorksheetPivotTable($name, $sheet_name, null, $folder,null, $sourceData,$destCellName,$tableName,$useSameSource);
        $this->assertEquals(200, $result['code']);
    }

    /**
     * Test case for cellsPivotTablesPutWorksheetPivotTableFilter
     *
     * Add pivot filter for piovt table index.
     *
     */
    public function testCellsPivotTablesPutWorksheetPivotTableFilter()
    {
        $name ='TestCase.xlsx';
        $sheet_name ='Sheet4';
        $pivotTableIndex = 0;
        $fieldIndex = 0;
        $needReCalculate = 'true';
        $folder = "Temp";
        $pivotFilter = new PivotFilter();
        $pivotFilter->setFieldIndex (1);
        $pivotFilter->setFilterType("Count");
        $autoFilter = new AutoFilter();
       
        $filterColumn = new FilterColumn();
        $filterColumn->setFilterType( "Top10");
        $filterColumn->setFieldIndex (0);

        $filterColumn->setTop10Filter ( new Top10Filter());
        $filterColumn->getTop10Filter()->setItems  (1);
        $filterColumn->getTop10Filter()->setIsTop ("true");
        $filterColumn->getTop10Filter()->setIsPercent ("false");
        $autoFilter->FilterColumns = array ( $filterColumn);
        $pivotFilter->setAutoFilter ($autoFilter);

        CellsApiTestBase::ready(  $this->instance,$name ,$folder);
        $result = $this->instance->cellsPivotTablesPutWorksheetPivotTableFilter($name, $sheet_name,$pivotTableIndex, $pivotFilter, $needReCalculate,$folder);
        $this->assertEquals(200, $result['code']);    
    }
}
